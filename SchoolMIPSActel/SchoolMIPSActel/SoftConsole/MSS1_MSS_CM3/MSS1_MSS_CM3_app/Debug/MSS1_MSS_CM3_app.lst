
MSS1_MSS_CM3_app:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .vector_table 00000190  20000000  20000000  00008000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .boot_code    00000330  20000190  20000190  00008190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00002ca0  200004c0  200004c0  000084c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .data         00000040  20003160  20003160  0000b160  2**4
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000190  200031a0  200031a0  0000b1a0  2**4
                  ALLOC
  5 .heap         0000bcd0  20003330  20003330  0000b1a0  2**4
                  ALLOC
  6 .stack        00001000  2000f000  2000f000  0000b1a0  2**4
                  ALLOC
  7 .comment      00000102  00000000  00000000  0000b1a0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000488  00000000  00000000  0000b2a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 00000acb  00000000  00000000  0000b72a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00006af3  00000000  00000000  0000c1f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000ae4  00000000  00000000  00012ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00002431  00000000  00000000  000137cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000ff0  00000000  00000000  00015c00  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000028cf  00000000  00000000  00016bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00001ad3  00000000  00000000  000194bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macinfo 0002cbe9  00000000  00000000  0001af92  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .ARM.attributes 00000025  00000000  00000000  00047b7b  2**0
                  CONTENTS, READONLY
 18 .debug_ranges 00000458  00000000  00000000  00047ba0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .vector_table:

20000000 <__vector_table_start>:
20000000:	20010000 	.word	0x20010000
20000004:	20000191 	.word	0x20000191
20000008:	2000037f 	.word	0x2000037f
2000000c:	20000381 	.word	0x20000381
20000010:	20000383 	.word	0x20000383
20000014:	20000385 	.word	0x20000385
20000018:	20000387 	.word	0x20000387
	...
2000002c:	20000389 	.word	0x20000389
20000030:	2000038b 	.word	0x2000038b
20000034:	00000000 	.word	0x00000000
20000038:	2000038d 	.word	0x2000038d
2000003c:	2000038f 	.word	0x2000038f
20000040:	20000391 	.word	0x20000391
20000044:	20000393 	.word	0x20000393
20000048:	20002a81 	.word	0x20002a81
2000004c:	20002aa5 	.word	0x20002aa5
20000050:	20000399 	.word	0x20000399
20000054:	2000039b 	.word	0x2000039b
20000058:	2000039d 	.word	0x2000039d
2000005c:	2000039f 	.word	0x2000039f
20000060:	200003a1 	.word	0x200003a1
20000064:	200003a3 	.word	0x200003a3
20000068:	20001a2d 	.word	0x20001a2d
2000006c:	20001a51 	.word	0x20001a51
20000070:	200003a9 	.word	0x200003a9
20000074:	200003ab 	.word	0x200003ab
20000078:	200003ad 	.word	0x200003ad
2000007c:	200003af 	.word	0x200003af
20000080:	200003b1 	.word	0x200003b1
20000084:	200003b3 	.word	0x200003b3
20000088:	200003b5 	.word	0x200003b5
2000008c:	200003b7 	.word	0x200003b7
20000090:	200003b9 	.word	0x200003b9
20000094:	200003bb 	.word	0x200003bb
20000098:	200003bd 	.word	0x200003bd
2000009c:	200003bf 	.word	0x200003bf
200000a0:	200003c1 	.word	0x200003c1
200000a4:	200003c3 	.word	0x200003c3
200000a8:	200003c5 	.word	0x200003c5
200000ac:	200003c7 	.word	0x200003c7
200000b0:	200003c9 	.word	0x200003c9
200000b4:	200003cb 	.word	0x200003cb
200000b8:	200003cd 	.word	0x200003cd
200000bc:	200003cf 	.word	0x200003cf
200000c0:	200003d1 	.word	0x200003d1
200000c4:	200003d3 	.word	0x200003d3
200000c8:	200003d5 	.word	0x200003d5
200000cc:	200003d7 	.word	0x200003d7
200000d0:	200003d9 	.word	0x200003d9
200000d4:	200003db 	.word	0x200003db
200000d8:	200003dd 	.word	0x200003dd
200000dc:	200003df 	.word	0x200003df
200000e0:	200003e1 	.word	0x200003e1
200000e4:	200003e3 	.word	0x200003e3
200000e8:	200003e5 	.word	0x200003e5
200000ec:	200003e7 	.word	0x200003e7
200000f0:	200003e9 	.word	0x200003e9
200000f4:	200003eb 	.word	0x200003eb
200000f8:	200003ed 	.word	0x200003ed
200000fc:	200003ef 	.word	0x200003ef
20000100:	200003f1 	.word	0x200003f1
20000104:	200003f3 	.word	0x200003f3
20000108:	200003f5 	.word	0x200003f5
2000010c:	200003f7 	.word	0x200003f7
20000110:	200003f9 	.word	0x200003f9
20000114:	200003fb 	.word	0x200003fb
20000118:	200003fd 	.word	0x200003fd
2000011c:	200003ff 	.word	0x200003ff
20000120:	20000401 	.word	0x20000401
20000124:	20000403 	.word	0x20000403
20000128:	20000405 	.word	0x20000405
2000012c:	20000407 	.word	0x20000407
20000130:	20000409 	.word	0x20000409
20000134:	2000040b 	.word	0x2000040b
20000138:	2000040d 	.word	0x2000040d
2000013c:	2000040f 	.word	0x2000040f
20000140:	20000411 	.word	0x20000411
20000144:	20000413 	.word	0x20000413
20000148:	20000415 	.word	0x20000415
2000014c:	20000417 	.word	0x20000417
20000150:	20000419 	.word	0x20000419
20000154:	2000041b 	.word	0x2000041b
20000158:	2000041d 	.word	0x2000041d
2000015c:	2000041f 	.word	0x2000041f
20000160:	20000421 	.word	0x20000421
20000164:	20000423 	.word	0x20000423
20000168:	20000425 	.word	0x20000425
2000016c:	20000427 	.word	0x20000427
20000170:	20000429 	.word	0x20000429
20000174:	2000042b 	.word	0x2000042b
20000178:	2000042d 	.word	0x2000042d
2000017c:	2000042f 	.word	0x2000042f
20000180:	20000431 	.word	0x20000431
20000184:	20000433 	.word	0x20000433
	...

Disassembly of section .boot_code:

20000190 <Reset_Handler>:
20000190:	f04f 0b00 	mov.w	fp, #0
20000194:	f8df 02be 	ldr.w	r0, [pc, #702]	; 20000456 <SF2_MDDR_MODE_CR>
20000198:	6800      	ldr	r0, [r0, #0]
2000019a:	f8df 12b6 	ldr.w	r1, [pc, #694]	; 20000452 <SF2_EDAC_CR>
2000019e:	6809      	ldr	r1, [r1, #0]
200001a0:	f001 0103 	and.w	r1, r1, #3
200001a4:	f000 001c 	and.w	r0, r0, #28
200001a8:	2814      	cmp	r0, #20
200001aa:	d101      	bne.n	200001b0 <check_esram_edac>
200001ac:	f04b 0b02 	orr.w	fp, fp, #2

200001b0 <check_esram_edac>:
200001b0:	2900      	cmp	r1, #0
200001b2:	d001      	beq.n	200001b8 <check_stack_init>
200001b4:	f04b 0b01 	orr.w	fp, fp, #1

200001b8 <check_stack_init>:
200001b8:	f1bb 0f00 	cmp.w	fp, #0
200001bc:	d005      	beq.n	200001ca <system_init>

200001be <clear_stack>:
200001be:	48a7      	ldr	r0, [pc, #668]	; (2000045c <SF2_MDDR_MODE_CR+0x6>)
200001c0:	49a7      	ldr	r1, [pc, #668]	; (20000460 <SF2_MDDR_MODE_CR+0xa>)
200001c2:	f8df 2272 	ldr.w	r2, [pc, #626]	; 20000436 <RAM_INIT_PATTERN>
200001c6:	f000 f89f 	bl	20000308 <fill_memory>

200001ca <system_init>:
200001ca:	48a6      	ldr	r0, [pc, #664]	; (20000464 <SF2_MDDR_MODE_CR+0xe>)
200001cc:	4780      	blx	r0
200001ce:	f00b 0a02 	and.w	sl, fp, #2
200001d2:	f1ba 0f00 	cmp.w	sl, #0
200001d6:	d00c      	beq.n	200001f2 <remap_memory>
200001d8:	f8df 026e 	ldr.w	r0, [pc, #622]	; 2000044a <SF2_DDRB_NB_SIZE>
200001dc:	f8df 126e 	ldr.w	r1, [pc, #622]	; 2000044e <SF2_DDRB_CR>
200001e0:	6802      	ldr	r2, [r0, #0]
200001e2:	680b      	ldr	r3, [r1, #0]
200001e4:	b40f      	push	{r0, r1, r2, r3}
200001e6:	f04f 0200 	mov.w	r2, #0
200001ea:	f04f 03ff 	mov.w	r3, #255	; 0xff
200001ee:	6002      	str	r2, [r0, #0]
200001f0:	600b      	str	r3, [r1, #0]

200001f2 <remap_memory>:
200001f2:	489d      	ldr	r0, [pc, #628]	; (20000468 <SF2_MDDR_MODE_CR+0x12>)
200001f4:	4a9d      	ldr	r2, [pc, #628]	; (2000046c <SF2_MDDR_MODE_CR+0x16>)
200001f6:	4b9e      	ldr	r3, [pc, #632]	; (20000470 <SF2_MDDR_MODE_CR+0x1a>)
200001f8:	2802      	cmp	r0, #2
200001fa:	d108      	bne.n	2000020e <check_esram_remap>
200001fc:	f8df 123e 	ldr.w	r1, [pc, #574]	; 2000043e <SF2_ESRAM_CR>
20000200:	600a      	str	r2, [r1, #0]
20000202:	f8df 1242 	ldr.w	r1, [pc, #578]	; 20000446 <SF2_ENVM_REMAP_CR>
20000206:	600a      	str	r2, [r1, #0]
20000208:	f8df 1236 	ldr.w	r1, [pc, #566]	; 20000442 <SF2_DDR_CR>
2000020c:	600b      	str	r3, [r1, #0]

2000020e <check_esram_remap>:
2000020e:	2801      	cmp	r0, #1
20000210:	d108      	bne.n	20000224 <check_mirrored_nvm>
20000212:	f8df 122e 	ldr.w	r1, [pc, #558]	; 20000442 <SF2_DDR_CR>
20000216:	600a      	str	r2, [r1, #0]
20000218:	f8df 122a 	ldr.w	r1, [pc, #554]	; 20000446 <SF2_ENVM_REMAP_CR>
2000021c:	600a      	str	r2, [r1, #0]
2000021e:	f8df 121e 	ldr.w	r1, [pc, #542]	; 2000043e <SF2_ESRAM_CR>
20000222:	600b      	str	r3, [r1, #0]

20000224 <check_mirrored_nvm>:
20000224:	4893      	ldr	r0, [pc, #588]	; (20000474 <SF2_MDDR_MODE_CR+0x1e>)
20000226:	2800      	cmp	r0, #0
20000228:	d109      	bne.n	2000023e <copy_data>
2000022a:	4893      	ldr	r0, [pc, #588]	; (20000478 <SF2_MDDR_MODE_CR+0x22>)
2000022c:	4993      	ldr	r1, [pc, #588]	; (2000047c <SF2_MDDR_MODE_CR+0x26>)
2000022e:	4a94      	ldr	r2, [pc, #592]	; (20000480 <SF2_MDDR_MODE_CR+0x2a>)
20000230:	f000 f832 	bl	20000298 <block_copy>

20000234 <copy_text>:
20000234:	4893      	ldr	r0, [pc, #588]	; (20000484 <SF2_MDDR_MODE_CR+0x2e>)
20000236:	4994      	ldr	r1, [pc, #592]	; (20000488 <SF2_MDDR_MODE_CR+0x32>)
20000238:	4a94      	ldr	r2, [pc, #592]	; (2000048c <SF2_MDDR_MODE_CR+0x36>)
2000023a:	f000 f82d 	bl	20000298 <block_copy>

2000023e <copy_data>:
2000023e:	4894      	ldr	r0, [pc, #592]	; (20000490 <SF2_MDDR_MODE_CR+0x3a>)
20000240:	4994      	ldr	r1, [pc, #592]	; (20000494 <SF2_MDDR_MODE_CR+0x3e>)
20000242:	4a95      	ldr	r2, [pc, #596]	; (20000498 <SF2_MDDR_MODE_CR+0x42>)
20000244:	f000 f828 	bl	20000298 <block_copy>

20000248 <clear_bss>:
20000248:	4894      	ldr	r0, [pc, #592]	; (2000049c <SF2_MDDR_MODE_CR+0x46>)
2000024a:	4995      	ldr	r1, [pc, #596]	; (200004a0 <SF2_MDDR_MODE_CR+0x4a>)
2000024c:	f8df 21e6 	ldr.w	r2, [pc, #486]	; 20000436 <RAM_INIT_PATTERN>
20000250:	f000 f85a 	bl	20000308 <fill_memory>

20000254 <clear_heap>:
20000254:	f1bb 0f00 	cmp.w	fp, #0
20000258:	d012      	beq.n	20000280 <call_glob_ctor>
2000025a:	4892      	ldr	r0, [pc, #584]	; (200004a4 <SF2_MDDR_MODE_CR+0x4e>)
2000025c:	4992      	ldr	r1, [pc, #584]	; (200004a8 <SF2_MDDR_MODE_CR+0x52>)
2000025e:	f8df 21da 	ldr.w	r2, [pc, #474]	; 2000043a <HEAP_INIT_PATTERN>
20000262:	f000 f851 	bl	20000308 <fill_memory>
20000266:	f00b 0a02 	and.w	sl, fp, #2
2000026a:	f1ba 0f00 	cmp.w	sl, #0
2000026e:	d007      	beq.n	20000280 <call_glob_ctor>
20000270:	bc0f      	pop	{r0, r1, r2, r3}
20000272:	6002      	str	r2, [r0, #0]
20000274:	600b      	str	r3, [r1, #0]
20000276:	bf00      	nop
20000278:	f3af 8000 	nop.w
2000027c:	f3af 8000 	nop.w

20000280 <call_glob_ctor>:
20000280:	f8df 0228 	ldr.w	r0, [pc, #552]	; 200004ac <SF2_MDDR_MODE_CR+0x56>
20000284:	f20f 0e03 	addw	lr, pc, #3
20000288:	4700      	bx	r0

2000028a <branch_to_main>:
2000028a:	f04f 0000 	mov.w	r0, #0
2000028e:	f04f 0100 	mov.w	r1, #0
20000292:	f8df f21c 	ldr.w	pc, [pc, #540]	; 200004b0 <SF2_MDDR_MODE_CR+0x5a>

20000296 <ExitLoop>:
20000296:	e7fe      	b.n	20000296 <ExitLoop>

20000298 <block_copy>:
20000298:	e92d 41f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, lr}
2000029c:	4288      	cmp	r0, r1
2000029e:	d025      	beq.n	200002ec <block_copy_exit>
200002a0:	ebb2 0201 	subs.w	r2, r2, r1
200002a4:	d500      	bpl.n	200002a8 <block_copy_address_ok>
200002a6:	e7fe      	b.n	200002a6 <block_copy+0xe>

200002a8 <block_copy_address_ok>:
200002a8:	ea40 0301 	orr.w	r3, r0, r1
200002ac:	f013 0303 	ands.w	r3, r3, #3
200002b0:	d002      	beq.n	200002b8 <block_copy_continue>

200002b2 <block_copy_byte_copy>:
200002b2:	f000 f81d 	bl	200002f0 <block_copy_byte>
200002b6:	e019      	b.n	200002ec <block_copy_exit>

200002b8 <block_copy_continue>:
200002b8:	f04f 0300 	mov.w	r3, #0
200002bc:	4690      	mov	r8, r2
200002be:	1112      	asrs	r2, r2, #4
200002c0:	d0f7      	beq.n	200002b2 <block_copy_byte_copy>

200002c2 <block_copy_loop>:
200002c2:	429a      	cmp	r2, r3
200002c4:	bf1c      	itt	ne
200002c6:	c8f0      	ldmiane	r0!, {r4, r5, r6, r7}
200002c8:	c1f0      	stmiane	r1!, {r4, r5, r6, r7}
200002ca:	f103 0301 	add.w	r3, r3, #1
200002ce:	d1f8      	bne.n	200002c2 <block_copy_loop>
200002d0:	f008 080f 	and.w	r8, r8, #15
200002d4:	f1b8 0f00 	cmp.w	r8, #0
200002d8:	d008      	beq.n	200002ec <block_copy_exit>

200002da <copy_spare_bytes>:
200002da:	7804      	ldrb	r4, [r0, #0]
200002dc:	700c      	strb	r4, [r1, #0]
200002de:	f100 0001 	add.w	r0, r0, #1
200002e2:	f101 0101 	add.w	r1, r1, #1
200002e6:	f1b8 0801 	subs.w	r8, r8, #1
200002ea:	d1f6      	bne.n	200002da <copy_spare_bytes>

200002ec <block_copy_exit>:
200002ec:	e8bd 81f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, pc}

200002f0 <block_copy_byte>:
200002f0:	b508      	push	{r3, lr}
200002f2:	f04f 0300 	mov.w	r3, #0

200002f6 <block_copy_byte_loop>:
200002f6:	7803      	ldrb	r3, [r0, #0]
200002f8:	700b      	strb	r3, [r1, #0]
200002fa:	f100 0001 	add.w	r0, r0, #1
200002fe:	f101 0101 	add.w	r1, r1, #1
20000302:	3a01      	subs	r2, #1
20000304:	d1f7      	bne.n	200002f6 <block_copy_byte_loop>
20000306:	bd08      	pop	{r3, pc}

20000308 <fill_memory>:
20000308:	4288      	cmp	r0, r1
2000030a:	d037      	beq.n	2000037c <fill_memory_exit>
2000030c:	f000 0603 	and.w	r6, r0, #3
20000310:	2e00      	cmp	r6, #0
20000312:	d014      	beq.n	2000033e <fill_memory_end_start>
20000314:	f04f 0504 	mov.w	r5, #4
20000318:	eba5 0406 	sub.w	r4, r5, r6
2000031c:	f04f 0708 	mov.w	r7, #8
20000320:	fb07 f806 	mul.w	r8, r7, r6
20000324:	4691      	mov	r9, r2
20000326:	fa69 f908 	ror.w	r9, r9, r8

2000032a <fill_memory_spare_bytes_start>:
2000032a:	2c00      	cmp	r4, #0
2000032c:	d007      	beq.n	2000033e <fill_memory_end_start>
2000032e:	f880 9000 	strb.w	r9, [r0]
20000332:	fa69 f907 	ror.w	r9, r9, r7
20000336:	f100 0001 	add.w	r0, r0, #1
2000033a:	3c01      	subs	r4, #1
2000033c:	e7f5      	b.n	2000032a <fill_memory_spare_bytes_start>

2000033e <fill_memory_end_start>:
2000033e:	f04f 0600 	mov.w	r6, #0
20000342:	460f      	mov	r7, r1
20000344:	1a09      	subs	r1, r1, r0
20000346:	4688      	mov	r8, r1
20000348:	1109      	asrs	r1, r1, #4
2000034a:	4691      	mov	r9, r2
2000034c:	4614      	mov	r4, r2
2000034e:	4615      	mov	r5, r2
20000350:	42b1      	cmp	r1, r6
20000352:	d006      	beq.n	20000362 <fill_memory_spare_bytes_end>

20000354 <fill_memory_loop>:
20000354:	bf18      	it	ne
20000356:	e8a0 0234 	stmiane.w	r0!, {r2, r4, r5, r9}
2000035a:	f106 0601 	add.w	r6, r6, #1
2000035e:	42b1      	cmp	r1, r6
20000360:	d1f8      	bne.n	20000354 <fill_memory_loop>

20000362 <fill_memory_spare_bytes_end>:
20000362:	f008 080f 	and.w	r8, r8, #15

20000366 <fill_memory_spare_end_loop>:
20000366:	f1b8 0f00 	cmp.w	r8, #0
2000036a:	d007      	beq.n	2000037c <fill_memory_exit>
2000036c:	7002      	strb	r2, [r0, #0]
2000036e:	ea4f 2232 	mov.w	r2, r2, ror #8
20000372:	f100 0001 	add.w	r0, r0, #1
20000376:	f1b8 0801 	subs.w	r8, r8, #1
2000037a:	e7f4      	b.n	20000366 <fill_memory_spare_end_loop>

2000037c <fill_memory_exit>:
2000037c:	4770      	bx	lr

2000037e <NMI_Handler>:
2000037e:	e7fe      	b.n	2000037e <NMI_Handler>

20000380 <HardFault_Handler>:
20000380:	e7fe      	b.n	20000380 <HardFault_Handler>

20000382 <MemManage_Handler>:
20000382:	e7fe      	b.n	20000382 <MemManage_Handler>

20000384 <BusFault_Handler>:
20000384:	e7fe      	b.n	20000384 <BusFault_Handler>

20000386 <UsageFault_Handler>:
20000386:	e7fe      	b.n	20000386 <UsageFault_Handler>

20000388 <SVC_Handler>:
20000388:	e7fe      	b.n	20000388 <SVC_Handler>

2000038a <DebugMon_Handler>:
2000038a:	e7fe      	b.n	2000038a <DebugMon_Handler>

2000038c <PendSV_Handler>:
2000038c:	e7fe      	b.n	2000038c <PendSV_Handler>

2000038e <SysTick_Handler>:
2000038e:	e7fe      	b.n	2000038e <SysTick_Handler>

20000390 <WdogWakeup_IRQHandler>:
20000390:	e7fe      	b.n	20000390 <WdogWakeup_IRQHandler>

20000392 <RTC_Wakeup_IRQHandler>:
20000392:	e7fe      	b.n	20000392 <RTC_Wakeup_IRQHandler>
20000394:	e7fe      	b.n	20000394 <RTC_Wakeup_IRQHandler+0x2>
20000396:	e7fe      	b.n	20000396 <RTC_Wakeup_IRQHandler+0x4>

20000398 <I2C0_IRQHandler>:
20000398:	e7fe      	b.n	20000398 <I2C0_IRQHandler>

2000039a <I2C0_SMBAlert_IRQHandler>:
2000039a:	e7fe      	b.n	2000039a <I2C0_SMBAlert_IRQHandler>

2000039c <I2C0_SMBus_IRQHandler>:
2000039c:	e7fe      	b.n	2000039c <I2C0_SMBus_IRQHandler>

2000039e <I2C1_IRQHandler>:
2000039e:	e7fe      	b.n	2000039e <I2C1_IRQHandler>

200003a0 <I2C1_SMBAlert_IRQHandler>:
200003a0:	e7fe      	b.n	200003a0 <I2C1_SMBAlert_IRQHandler>

200003a2 <I2C1_SMBus_IRQHandler>:
200003a2:	e7fe      	b.n	200003a2 <I2C1_SMBus_IRQHandler>
200003a4:	e7fe      	b.n	200003a4 <I2C1_SMBus_IRQHandler+0x2>
200003a6:	e7fe      	b.n	200003a6 <I2C1_SMBus_IRQHandler+0x4>

200003a8 <EthernetMAC_IRQHandler>:
200003a8:	e7fe      	b.n	200003a8 <EthernetMAC_IRQHandler>

200003aa <DMA_IRQHandler>:
200003aa:	e7fe      	b.n	200003aa <DMA_IRQHandler>

200003ac <Timer1_IRQHandler>:
200003ac:	e7fe      	b.n	200003ac <Timer1_IRQHandler>

200003ae <Timer2_IRQHandler>:
200003ae:	e7fe      	b.n	200003ae <Timer2_IRQHandler>

200003b0 <CAN_IRQHandler>:
200003b0:	e7fe      	b.n	200003b0 <CAN_IRQHandler>

200003b2 <ENVM0_IRQHandler>:
200003b2:	e7fe      	b.n	200003b2 <ENVM0_IRQHandler>

200003b4 <ENVM1_IRQHandler>:
200003b4:	e7fe      	b.n	200003b4 <ENVM1_IRQHandler>

200003b6 <ComBlk_IRQHandler>:
200003b6:	e7fe      	b.n	200003b6 <ComBlk_IRQHandler>

200003b8 <USB_IRQHandler>:
200003b8:	e7fe      	b.n	200003b8 <USB_IRQHandler>

200003ba <USB_DMA_IRQHandler>:
200003ba:	e7fe      	b.n	200003ba <USB_DMA_IRQHandler>

200003bc <PLL_Lock_IRQHandler>:
200003bc:	e7fe      	b.n	200003bc <PLL_Lock_IRQHandler>

200003be <PLL_LockLost_IRQHandler>:
200003be:	e7fe      	b.n	200003be <PLL_LockLost_IRQHandler>

200003c0 <CommSwitchError_IRQHandler>:
200003c0:	e7fe      	b.n	200003c0 <CommSwitchError_IRQHandler>

200003c2 <CacheError_IRQHandler>:
200003c2:	e7fe      	b.n	200003c2 <CacheError_IRQHandler>

200003c4 <DDR_IRQHandler>:
200003c4:	e7fe      	b.n	200003c4 <DDR_IRQHandler>

200003c6 <HPDMA_Complete_IRQHandler>:
200003c6:	e7fe      	b.n	200003c6 <HPDMA_Complete_IRQHandler>

200003c8 <HPDMA_Error_IRQHandler>:
200003c8:	e7fe      	b.n	200003c8 <HPDMA_Error_IRQHandler>

200003ca <ECC_Error_IRQHandler>:
200003ca:	e7fe      	b.n	200003ca <ECC_Error_IRQHandler>

200003cc <MDDR_IOCalib_IRQHandler>:
200003cc:	e7fe      	b.n	200003cc <MDDR_IOCalib_IRQHandler>

200003ce <FAB_PLL_Lock_IRQHandler>:
200003ce:	e7fe      	b.n	200003ce <FAB_PLL_Lock_IRQHandler>

200003d0 <FAB_PLL_LockLost_IRQHandler>:
200003d0:	e7fe      	b.n	200003d0 <FAB_PLL_LockLost_IRQHandler>

200003d2 <FIC64_IRQHandler>:
200003d2:	e7fe      	b.n	200003d2 <FIC64_IRQHandler>

200003d4 <FabricIrq0_IRQHandler>:
200003d4:	e7fe      	b.n	200003d4 <FabricIrq0_IRQHandler>

200003d6 <FabricIrq1_IRQHandler>:
200003d6:	e7fe      	b.n	200003d6 <FabricIrq1_IRQHandler>

200003d8 <FabricIrq2_IRQHandler>:
200003d8:	e7fe      	b.n	200003d8 <FabricIrq2_IRQHandler>

200003da <FabricIrq3_IRQHandler>:
200003da:	e7fe      	b.n	200003da <FabricIrq3_IRQHandler>

200003dc <FabricIrq4_IRQHandler>:
200003dc:	e7fe      	b.n	200003dc <FabricIrq4_IRQHandler>

200003de <FabricIrq5_IRQHandler>:
200003de:	e7fe      	b.n	200003de <FabricIrq5_IRQHandler>

200003e0 <FabricIrq6_IRQHandler>:
200003e0:	e7fe      	b.n	200003e0 <FabricIrq6_IRQHandler>

200003e2 <FabricIrq7_IRQHandler>:
200003e2:	e7fe      	b.n	200003e2 <FabricIrq7_IRQHandler>

200003e4 <FabricIrq8_IRQHandler>:
200003e4:	e7fe      	b.n	200003e4 <FabricIrq8_IRQHandler>

200003e6 <FabricIrq9_IRQHandler>:
200003e6:	e7fe      	b.n	200003e6 <FabricIrq9_IRQHandler>

200003e8 <FabricIrq10_IRQHandler>:
200003e8:	e7fe      	b.n	200003e8 <FabricIrq10_IRQHandler>

200003ea <FabricIrq11_IRQHandler>:
200003ea:	e7fe      	b.n	200003ea <FabricIrq11_IRQHandler>

200003ec <FabricIrq12_IRQHandler>:
200003ec:	e7fe      	b.n	200003ec <FabricIrq12_IRQHandler>

200003ee <FabricIrq13_IRQHandler>:
200003ee:	e7fe      	b.n	200003ee <FabricIrq13_IRQHandler>

200003f0 <FabricIrq14_IRQHandler>:
200003f0:	e7fe      	b.n	200003f0 <FabricIrq14_IRQHandler>

200003f2 <FabricIrq15_IRQHandler>:
200003f2:	e7fe      	b.n	200003f2 <FabricIrq15_IRQHandler>

200003f4 <GPIO0_IRQHandler>:
200003f4:	e7fe      	b.n	200003f4 <GPIO0_IRQHandler>

200003f6 <GPIO1_IRQHandler>:
200003f6:	e7fe      	b.n	200003f6 <GPIO1_IRQHandler>

200003f8 <GPIO2_IRQHandler>:
200003f8:	e7fe      	b.n	200003f8 <GPIO2_IRQHandler>

200003fa <GPIO3_IRQHandler>:
200003fa:	e7fe      	b.n	200003fa <GPIO3_IRQHandler>

200003fc <GPIO4_IRQHandler>:
200003fc:	e7fe      	b.n	200003fc <GPIO4_IRQHandler>

200003fe <GPIO5_IRQHandler>:
200003fe:	e7fe      	b.n	200003fe <GPIO5_IRQHandler>

20000400 <GPIO6_IRQHandler>:
20000400:	e7fe      	b.n	20000400 <GPIO6_IRQHandler>

20000402 <GPIO7_IRQHandler>:
20000402:	e7fe      	b.n	20000402 <GPIO7_IRQHandler>

20000404 <GPIO8_IRQHandler>:
20000404:	e7fe      	b.n	20000404 <GPIO8_IRQHandler>

20000406 <GPIO9_IRQHandler>:
20000406:	e7fe      	b.n	20000406 <GPIO9_IRQHandler>

20000408 <GPIO10_IRQHandler>:
20000408:	e7fe      	b.n	20000408 <GPIO10_IRQHandler>

2000040a <GPIO11_IRQHandler>:
2000040a:	e7fe      	b.n	2000040a <GPIO11_IRQHandler>

2000040c <GPIO12_IRQHandler>:
2000040c:	e7fe      	b.n	2000040c <GPIO12_IRQHandler>

2000040e <GPIO13_IRQHandler>:
2000040e:	e7fe      	b.n	2000040e <GPIO13_IRQHandler>

20000410 <GPIO14_IRQHandler>:
20000410:	e7fe      	b.n	20000410 <GPIO14_IRQHandler>

20000412 <GPIO15_IRQHandler>:
20000412:	e7fe      	b.n	20000412 <GPIO15_IRQHandler>

20000414 <GPIO16_IRQHandler>:
20000414:	e7fe      	b.n	20000414 <GPIO16_IRQHandler>

20000416 <GPIO17_IRQHandler>:
20000416:	e7fe      	b.n	20000416 <GPIO17_IRQHandler>

20000418 <GPIO18_IRQHandler>:
20000418:	e7fe      	b.n	20000418 <GPIO18_IRQHandler>

2000041a <GPIO19_IRQHandler>:
2000041a:	e7fe      	b.n	2000041a <GPIO19_IRQHandler>

2000041c <GPIO20_IRQHandler>:
2000041c:	e7fe      	b.n	2000041c <GPIO20_IRQHandler>

2000041e <GPIO21_IRQHandler>:
2000041e:	e7fe      	b.n	2000041e <GPIO21_IRQHandler>

20000420 <GPIO22_IRQHandler>:
20000420:	e7fe      	b.n	20000420 <GPIO22_IRQHandler>

20000422 <GPIO23_IRQHandler>:
20000422:	e7fe      	b.n	20000422 <GPIO23_IRQHandler>

20000424 <GPIO24_IRQHandler>:
20000424:	e7fe      	b.n	20000424 <GPIO24_IRQHandler>

20000426 <GPIO25_IRQHandler>:
20000426:	e7fe      	b.n	20000426 <GPIO25_IRQHandler>

20000428 <GPIO26_IRQHandler>:
20000428:	e7fe      	b.n	20000428 <GPIO26_IRQHandler>

2000042a <GPIO27_IRQHandler>:
2000042a:	e7fe      	b.n	2000042a <GPIO27_IRQHandler>

2000042c <GPIO28_IRQHandler>:
2000042c:	e7fe      	b.n	2000042c <GPIO28_IRQHandler>

2000042e <GPIO29_IRQHandler>:
2000042e:	e7fe      	b.n	2000042e <GPIO29_IRQHandler>

20000430 <GPIO30_IRQHandler>:
20000430:	e7fe      	b.n	20000430 <GPIO30_IRQHandler>

20000432 <GPIO31_IRQHandler>:
20000432:	e7fe      	b.n	20000432 <GPIO31_IRQHandler>

20000434 <mscc_post_hw_cfg_init>:
20000434:	4770      	bx	lr

20000436 <RAM_INIT_PATTERN>:
20000436:	0000      	.short	0x0000
	...

2000043a <HEAP_INIT_PATTERN>:
2000043a:	a2a2      	.short	0xa2a2
2000043c:	a2a2      	.short	0xa2a2

2000043e <SF2_ESRAM_CR>:
2000043e:	8000      	.short	0x8000
20000440:	4003      	.short	0x4003

20000442 <SF2_DDR_CR>:
20000442:	8008      	.short	0x8008
20000444:	4003      	.short	0x4003

20000446 <SF2_ENVM_REMAP_CR>:
20000446:	8010      	.short	0x8010
20000448:	4003      	.short	0x4003

2000044a <SF2_DDRB_NB_SIZE>:
2000044a:	8030      	.short	0x8030
2000044c:	4003      	.short	0x4003

2000044e <SF2_DDRB_CR>:
2000044e:	8034      	.short	0x8034
20000450:	4003      	.short	0x4003

20000452 <SF2_EDAC_CR>:
20000452:	8038      	.short	0x8038
20000454:	4003      	.short	0x4003

20000456 <SF2_MDDR_MODE_CR>:
20000456:	0818      	.short	0x0818
20000458:	00004002 	.word	0x00004002
2000045c:	2000f000 	.word	0x2000f000
20000460:	20010000 	.word	0x20010000
20000464:	20002c99 	.word	0x20002c99
	...
20000470:	00000001 	.word	0x00000001
20000474:	00000000 	.word	0x00000000
20000478:	20000000 	.word	0x20000000
2000047c:	20000000 	.word	0x20000000
20000480:	20000190 	.word	0x20000190
20000484:	200004c0 	.word	0x200004c0
20000488:	200004c0 	.word	0x200004c0
2000048c:	20003160 	.word	0x20003160
20000490:	20003160 	.word	0x20003160
20000494:	20003160 	.word	0x20003160
20000498:	200031a0 	.word	0x200031a0
2000049c:	200031a0 	.word	0x200031a0
200004a0:	20003330 	.word	0x20003330
200004a4:	20003330 	.word	0x20003330
200004a8:	2000f000 	.word	0x2000f000
200004ac:	20002f71 	.word	0x20002f71
200004b0:	20000e0d 	.word	0x20000e0d
200004b4:	f3af 8000 	nop.w
200004b8:	f3af 8000 	nop.w
200004bc:	f3af 8000 	nop.w

Disassembly of section .text:

200004c0 <__do_global_dtors_aux>:
200004c0:	f243 13a0 	movw	r3, #12704	; 0x31a0
200004c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200004c8:	781a      	ldrb	r2, [r3, #0]
200004ca:	b90a      	cbnz	r2, 200004d0 <__do_global_dtors_aux+0x10>
200004cc:	2001      	movs	r0, #1
200004ce:	7018      	strb	r0, [r3, #0]
200004d0:	4770      	bx	lr
200004d2:	bf00      	nop

200004d4 <frame_dummy>:
200004d4:	f243 1060 	movw	r0, #12640	; 0x3160
200004d8:	f2c2 0000 	movt	r0, #8192	; 0x2000
200004dc:	b508      	push	{r3, lr}
200004de:	6803      	ldr	r3, [r0, #0]
200004e0:	b12b      	cbz	r3, 200004ee <frame_dummy+0x1a>
200004e2:	f240 0300 	movw	r3, #0
200004e6:	f2c0 0300 	movt	r3, #0
200004ea:	b103      	cbz	r3, 200004ee <frame_dummy+0x1a>
200004ec:	4798      	blx	r3
200004ee:	bd08      	pop	{r3, pc}

200004f0 <MSS_GPIO_get_inputs>:
        gpio_inputs = MSS_GPIO_get_inputs();
    @endcode
 */
static __INLINE uint32_t
MSS_GPIO_get_inputs( void )
{
200004f0:	b480      	push	{r7}
200004f2:	af00      	add	r7, sp, #0
    return GPIO->GPIO_IN;
200004f4:	f243 0300 	movw	r3, #12288	; 0x3000
200004f8:	f2c4 0301 	movt	r3, #16385	; 0x4001
200004fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
}
20000500:	4618      	mov	r0, r3
20000502:	46bd      	mov	sp, r7
20000504:	bc80      	pop	{r7}
20000506:	4770      	bx	lr

20000508 <read_write>:
	clock;
	return data;
}

uint8_t read_write(uint8_t addr, uint8_t complete)
{
20000508:	b580      	push	{r7, lr}
2000050a:	b084      	sub	sp, #16
2000050c:	af00      	add	r7, sp, #0
2000050e:	4602      	mov	r2, r0
20000510:	460b      	mov	r3, r1
20000512:	71fa      	strb	r2, [r7, #7]
20000514:	71bb      	strb	r3, [r7, #6]
	c_TMS;
20000516:	f04f 000b 	mov.w	r0, #11
2000051a:	f04f 0100 	mov.w	r1, #0
2000051e:	f002 fb83 	bl	20002c28 <MSS_GPIO_set_output>
	uint8_t data=0x00;
20000522:	f04f 0300 	mov.w	r3, #0
20000526:	73fb      	strb	r3, [r7, #15]
	if(((addr>>7)&0x01)==0x00)
20000528:	79fb      	ldrb	r3, [r7, #7]
2000052a:	b25b      	sxtb	r3, r3
2000052c:	2b00      	cmp	r3, #0
2000052e:	db06      	blt.n	2000053e <read_write+0x36>
		c_TDI
20000530:	f04f 000d 	mov.w	r0, #13
20000534:	f04f 0100 	mov.w	r1, #0
20000538:	f002 fb76 	bl	20002c28 <MSS_GPIO_set_output>
2000053c:	e005      	b.n	2000054a <read_write+0x42>
	else
		s_TDI
2000053e:	f04f 000d 	mov.w	r0, #13
20000542:	f04f 0101 	mov.w	r1, #1
20000546:	f002 fb6f 	bl	20002c28 <MSS_GPIO_set_output>
	data=data | (o_TDO<<7);
2000054a:	f7ff ffd1 	bl	200004f0 <MSS_GPIO_get_inputs>
2000054e:	4603      	mov	r3, r0
20000550:	ea4f 33d3 	mov.w	r3, r3, lsr #15
20000554:	b2db      	uxtb	r3, r3
20000556:	ea4f 13c3 	mov.w	r3, r3, lsl #7
2000055a:	b2da      	uxtb	r2, r3
2000055c:	7bfb      	ldrb	r3, [r7, #15]
2000055e:	ea42 0303 	orr.w	r3, r2, r3
20000562:	73fb      	strb	r3, [r7, #15]
	clock;
20000564:	f04f 000c 	mov.w	r0, #12
20000568:	f04f 0101 	mov.w	r1, #1
2000056c:	f002 fb5c 	bl	20002c28 <MSS_GPIO_set_output>
20000570:	f04f 000c 	mov.w	r0, #12
20000574:	f04f 0100 	mov.w	r1, #0
20000578:	f002 fb56 	bl	20002c28 <MSS_GPIO_set_output>
	if(((addr>>6)&0x01)==0x00)
2000057c:	79fb      	ldrb	r3, [r7, #7]
2000057e:	ea4f 1393 	mov.w	r3, r3, lsr #6
20000582:	b2db      	uxtb	r3, r3
20000584:	f003 0301 	and.w	r3, r3, #1
20000588:	2b00      	cmp	r3, #0
2000058a:	d106      	bne.n	2000059a <read_write+0x92>
		c_TDI
2000058c:	f04f 000d 	mov.w	r0, #13
20000590:	f04f 0100 	mov.w	r1, #0
20000594:	f002 fb48 	bl	20002c28 <MSS_GPIO_set_output>
20000598:	e005      	b.n	200005a6 <read_write+0x9e>
	else
		s_TDI
2000059a:	f04f 000d 	mov.w	r0, #13
2000059e:	f04f 0101 	mov.w	r1, #1
200005a2:	f002 fb41 	bl	20002c28 <MSS_GPIO_set_output>
	data=data | (o_TDO<<6);
200005a6:	f7ff ffa3 	bl	200004f0 <MSS_GPIO_get_inputs>
200005aa:	4603      	mov	r3, r0
200005ac:	ea4f 33d3 	mov.w	r3, r3, lsr #15
200005b0:	b2db      	uxtb	r3, r3
200005b2:	f003 0301 	and.w	r3, r3, #1
200005b6:	ea4f 1383 	mov.w	r3, r3, lsl #6
200005ba:	b2da      	uxtb	r2, r3
200005bc:	7bfb      	ldrb	r3, [r7, #15]
200005be:	ea42 0303 	orr.w	r3, r2, r3
200005c2:	73fb      	strb	r3, [r7, #15]
	clock;
200005c4:	f04f 000c 	mov.w	r0, #12
200005c8:	f04f 0101 	mov.w	r1, #1
200005cc:	f002 fb2c 	bl	20002c28 <MSS_GPIO_set_output>
200005d0:	f04f 000c 	mov.w	r0, #12
200005d4:	f04f 0100 	mov.w	r1, #0
200005d8:	f002 fb26 	bl	20002c28 <MSS_GPIO_set_output>
	if(((addr>>5)&0x01)==0x00)
200005dc:	79fb      	ldrb	r3, [r7, #7]
200005de:	ea4f 1353 	mov.w	r3, r3, lsr #5
200005e2:	b2db      	uxtb	r3, r3
200005e4:	f003 0301 	and.w	r3, r3, #1
200005e8:	2b00      	cmp	r3, #0
200005ea:	d106      	bne.n	200005fa <read_write+0xf2>
		c_TDI
200005ec:	f04f 000d 	mov.w	r0, #13
200005f0:	f04f 0100 	mov.w	r1, #0
200005f4:	f002 fb18 	bl	20002c28 <MSS_GPIO_set_output>
200005f8:	e005      	b.n	20000606 <read_write+0xfe>
	else
		s_TDI
200005fa:	f04f 000d 	mov.w	r0, #13
200005fe:	f04f 0101 	mov.w	r1, #1
20000602:	f002 fb11 	bl	20002c28 <MSS_GPIO_set_output>
	data=data | (o_TDO<<5);
20000606:	f7ff ff73 	bl	200004f0 <MSS_GPIO_get_inputs>
2000060a:	4603      	mov	r3, r0
2000060c:	ea4f 33d3 	mov.w	r3, r3, lsr #15
20000610:	b2db      	uxtb	r3, r3
20000612:	f003 0301 	and.w	r3, r3, #1
20000616:	ea4f 1343 	mov.w	r3, r3, lsl #5
2000061a:	b2da      	uxtb	r2, r3
2000061c:	7bfb      	ldrb	r3, [r7, #15]
2000061e:	ea42 0303 	orr.w	r3, r2, r3
20000622:	73fb      	strb	r3, [r7, #15]
	clock;
20000624:	f04f 000c 	mov.w	r0, #12
20000628:	f04f 0101 	mov.w	r1, #1
2000062c:	f002 fafc 	bl	20002c28 <MSS_GPIO_set_output>
20000630:	f04f 000c 	mov.w	r0, #12
20000634:	f04f 0100 	mov.w	r1, #0
20000638:	f002 faf6 	bl	20002c28 <MSS_GPIO_set_output>
	if(((addr>>4)&0x01)==0x00)
2000063c:	79fb      	ldrb	r3, [r7, #7]
2000063e:	ea4f 1313 	mov.w	r3, r3, lsr #4
20000642:	b2db      	uxtb	r3, r3
20000644:	f003 0301 	and.w	r3, r3, #1
20000648:	2b00      	cmp	r3, #0
2000064a:	d106      	bne.n	2000065a <read_write+0x152>
		c_TDI
2000064c:	f04f 000d 	mov.w	r0, #13
20000650:	f04f 0100 	mov.w	r1, #0
20000654:	f002 fae8 	bl	20002c28 <MSS_GPIO_set_output>
20000658:	e005      	b.n	20000666 <read_write+0x15e>
	else
		s_TDI
2000065a:	f04f 000d 	mov.w	r0, #13
2000065e:	f04f 0101 	mov.w	r1, #1
20000662:	f002 fae1 	bl	20002c28 <MSS_GPIO_set_output>
	data=data | (o_TDO<<4);
20000666:	f7ff ff43 	bl	200004f0 <MSS_GPIO_get_inputs>
2000066a:	4603      	mov	r3, r0
2000066c:	ea4f 33d3 	mov.w	r3, r3, lsr #15
20000670:	b2db      	uxtb	r3, r3
20000672:	f003 0301 	and.w	r3, r3, #1
20000676:	ea4f 1303 	mov.w	r3, r3, lsl #4
2000067a:	b2da      	uxtb	r2, r3
2000067c:	7bfb      	ldrb	r3, [r7, #15]
2000067e:	ea42 0303 	orr.w	r3, r2, r3
20000682:	73fb      	strb	r3, [r7, #15]
	clock;
20000684:	f04f 000c 	mov.w	r0, #12
20000688:	f04f 0101 	mov.w	r1, #1
2000068c:	f002 facc 	bl	20002c28 <MSS_GPIO_set_output>
20000690:	f04f 000c 	mov.w	r0, #12
20000694:	f04f 0100 	mov.w	r1, #0
20000698:	f002 fac6 	bl	20002c28 <MSS_GPIO_set_output>
	if(((addr>>3)&0x01)==0x00)
2000069c:	79fb      	ldrb	r3, [r7, #7]
2000069e:	ea4f 03d3 	mov.w	r3, r3, lsr #3
200006a2:	b2db      	uxtb	r3, r3
200006a4:	f003 0301 	and.w	r3, r3, #1
200006a8:	2b00      	cmp	r3, #0
200006aa:	d106      	bne.n	200006ba <read_write+0x1b2>
		c_TDI
200006ac:	f04f 000d 	mov.w	r0, #13
200006b0:	f04f 0100 	mov.w	r1, #0
200006b4:	f002 fab8 	bl	20002c28 <MSS_GPIO_set_output>
200006b8:	e005      	b.n	200006c6 <read_write+0x1be>
	else
		s_TDI
200006ba:	f04f 000d 	mov.w	r0, #13
200006be:	f04f 0101 	mov.w	r1, #1
200006c2:	f002 fab1 	bl	20002c28 <MSS_GPIO_set_output>
	data=data | (o_TDO<<3);
200006c6:	f7ff ff13 	bl	200004f0 <MSS_GPIO_get_inputs>
200006ca:	4603      	mov	r3, r0
200006cc:	ea4f 33d3 	mov.w	r3, r3, lsr #15
200006d0:	b2db      	uxtb	r3, r3
200006d2:	f003 0301 	and.w	r3, r3, #1
200006d6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
200006da:	b2da      	uxtb	r2, r3
200006dc:	7bfb      	ldrb	r3, [r7, #15]
200006de:	ea42 0303 	orr.w	r3, r2, r3
200006e2:	73fb      	strb	r3, [r7, #15]
	clock;
200006e4:	f04f 000c 	mov.w	r0, #12
200006e8:	f04f 0101 	mov.w	r1, #1
200006ec:	f002 fa9c 	bl	20002c28 <MSS_GPIO_set_output>
200006f0:	f04f 000c 	mov.w	r0, #12
200006f4:	f04f 0100 	mov.w	r1, #0
200006f8:	f002 fa96 	bl	20002c28 <MSS_GPIO_set_output>
	if(((addr>>2)&0x01)==0x00)
200006fc:	79fb      	ldrb	r3, [r7, #7]
200006fe:	ea4f 0393 	mov.w	r3, r3, lsr #2
20000702:	b2db      	uxtb	r3, r3
20000704:	f003 0301 	and.w	r3, r3, #1
20000708:	2b00      	cmp	r3, #0
2000070a:	d106      	bne.n	2000071a <read_write+0x212>
		c_TDI
2000070c:	f04f 000d 	mov.w	r0, #13
20000710:	f04f 0100 	mov.w	r1, #0
20000714:	f002 fa88 	bl	20002c28 <MSS_GPIO_set_output>
20000718:	e005      	b.n	20000726 <read_write+0x21e>
	else
		s_TDI
2000071a:	f04f 000d 	mov.w	r0, #13
2000071e:	f04f 0101 	mov.w	r1, #1
20000722:	f002 fa81 	bl	20002c28 <MSS_GPIO_set_output>
	data=data | (o_TDO<<2);
20000726:	f7ff fee3 	bl	200004f0 <MSS_GPIO_get_inputs>
2000072a:	4603      	mov	r3, r0
2000072c:	ea4f 33d3 	mov.w	r3, r3, lsr #15
20000730:	b2db      	uxtb	r3, r3
20000732:	f003 0301 	and.w	r3, r3, #1
20000736:	ea4f 0383 	mov.w	r3, r3, lsl #2
2000073a:	b2da      	uxtb	r2, r3
2000073c:	7bfb      	ldrb	r3, [r7, #15]
2000073e:	ea42 0303 	orr.w	r3, r2, r3
20000742:	73fb      	strb	r3, [r7, #15]
	clock;
20000744:	f04f 000c 	mov.w	r0, #12
20000748:	f04f 0101 	mov.w	r1, #1
2000074c:	f002 fa6c 	bl	20002c28 <MSS_GPIO_set_output>
20000750:	f04f 000c 	mov.w	r0, #12
20000754:	f04f 0100 	mov.w	r1, #0
20000758:	f002 fa66 	bl	20002c28 <MSS_GPIO_set_output>
	if(((addr>>1)&0x01)==0x00)
2000075c:	79fb      	ldrb	r3, [r7, #7]
2000075e:	ea4f 0353 	mov.w	r3, r3, lsr #1
20000762:	b2db      	uxtb	r3, r3
20000764:	f003 0301 	and.w	r3, r3, #1
20000768:	2b00      	cmp	r3, #0
2000076a:	d106      	bne.n	2000077a <read_write+0x272>
		c_TDI
2000076c:	f04f 000d 	mov.w	r0, #13
20000770:	f04f 0100 	mov.w	r1, #0
20000774:	f002 fa58 	bl	20002c28 <MSS_GPIO_set_output>
20000778:	e005      	b.n	20000786 <read_write+0x27e>
	else
		s_TDI
2000077a:	f04f 000d 	mov.w	r0, #13
2000077e:	f04f 0101 	mov.w	r1, #1
20000782:	f002 fa51 	bl	20002c28 <MSS_GPIO_set_output>
	data=data | (o_TDO<<1);
20000786:	f7ff feb3 	bl	200004f0 <MSS_GPIO_get_inputs>
2000078a:	4603      	mov	r3, r0
2000078c:	ea4f 33d3 	mov.w	r3, r3, lsr #15
20000790:	b2db      	uxtb	r3, r3
20000792:	f003 0301 	and.w	r3, r3, #1
20000796:	ea4f 0343 	mov.w	r3, r3, lsl #1
2000079a:	b2da      	uxtb	r2, r3
2000079c:	7bfb      	ldrb	r3, [r7, #15]
2000079e:	ea42 0303 	orr.w	r3, r2, r3
200007a2:	73fb      	strb	r3, [r7, #15]
	clock;
200007a4:	f04f 000c 	mov.w	r0, #12
200007a8:	f04f 0101 	mov.w	r1, #1
200007ac:	f002 fa3c 	bl	20002c28 <MSS_GPIO_set_output>
200007b0:	f04f 000c 	mov.w	r0, #12
200007b4:	f04f 0100 	mov.w	r1, #0
200007b8:	f002 fa36 	bl	20002c28 <MSS_GPIO_set_output>
	if(((addr>>0)&0x01)==0x00)
200007bc:	79fb      	ldrb	r3, [r7, #7]
200007be:	f003 0301 	and.w	r3, r3, #1
200007c2:	2b00      	cmp	r3, #0
200007c4:	d106      	bne.n	200007d4 <read_write+0x2cc>
		c_TDI
200007c6:	f04f 000d 	mov.w	r0, #13
200007ca:	f04f 0100 	mov.w	r1, #0
200007ce:	f002 fa2b 	bl	20002c28 <MSS_GPIO_set_output>
200007d2:	e005      	b.n	200007e0 <read_write+0x2d8>
	else
		s_TDI
200007d4:	f04f 000d 	mov.w	r0, #13
200007d8:	f04f 0101 	mov.w	r1, #1
200007dc:	f002 fa24 	bl	20002c28 <MSS_GPIO_set_output>
	data=data | (o_TDO<<0);
200007e0:	f7ff fe86 	bl	200004f0 <MSS_GPIO_get_inputs>
200007e4:	4603      	mov	r3, r0
200007e6:	ea4f 33d3 	mov.w	r3, r3, lsr #15
200007ea:	b2db      	uxtb	r3, r3
200007ec:	f003 0301 	and.w	r3, r3, #1
200007f0:	7bfa      	ldrb	r2, [r7, #15]
200007f2:	ea43 0302 	orr.w	r3, r3, r2
200007f6:	73fb      	strb	r3, [r7, #15]
	if (complete!=0x00)
200007f8:	79bb      	ldrb	r3, [r7, #6]
200007fa:	2b00      	cmp	r3, #0
200007fc:	d006      	beq.n	2000080c <read_write+0x304>
		s_TMS
200007fe:	f04f 000b 	mov.w	r0, #11
20000802:	f04f 0101 	mov.w	r1, #1
20000806:	f002 fa0f 	bl	20002c28 <MSS_GPIO_set_output>
2000080a:	e005      	b.n	20000818 <read_write+0x310>
	else
		c_TMS
2000080c:	f04f 000b 	mov.w	r0, #11
20000810:	f04f 0100 	mov.w	r1, #0
20000814:	f002 fa08 	bl	20002c28 <MSS_GPIO_set_output>
	clock;
20000818:	f04f 000c 	mov.w	r0, #12
2000081c:	f04f 0101 	mov.w	r1, #1
20000820:	f002 fa02 	bl	20002c28 <MSS_GPIO_set_output>
20000824:	f04f 000c 	mov.w	r0, #12
20000828:	f04f 0100 	mov.w	r1, #0
2000082c:	f002 f9fc 	bl	20002c28 <MSS_GPIO_set_output>
	return data;
20000830:	7bfb      	ldrb	r3, [r7, #15]
}
20000832:	4618      	mov	r0, r3
20000834:	f107 0710 	add.w	r7, r7, #16
20000838:	46bd      	mov	sp, r7
2000083a:	bd80      	pop	{r7, pc}

2000083c <print_reg>:
void print_reg(uint8_t *data)
{
2000083c:	b580      	push	{r7, lr}
2000083e:	b084      	sub	sp, #16
20000840:	af00      	add	r7, sp, #0
20000842:	6078      	str	r0, [r7, #4]
	int i=0;
20000844:	f04f 0300 	mov.w	r3, #0
20000848:	60fb      	str	r3, [r7, #12]
	for (i=3;i>=0;i--)
2000084a:	f04f 0303 	mov.w	r3, #3
2000084e:	60fb      	str	r3, [r7, #12]
20000850:	e0ff      	b.n	20000a52 <print_reg+0x216>
		switch (data[i]&0x0F)
20000852:	68fa      	ldr	r2, [r7, #12]
20000854:	687b      	ldr	r3, [r7, #4]
20000856:	4413      	add	r3, r2
20000858:	781b      	ldrb	r3, [r3, #0]
2000085a:	f003 030f 	and.w	r3, r3, #15
2000085e:	2b0f      	cmp	r3, #15
20000860:	f200 80f3 	bhi.w	20000a4a <print_reg+0x20e>
20000864:	a201      	add	r2, pc, #4	; (adr r2, 2000086c <print_reg+0x30>)
20000866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2000086a:	bf00      	nop
2000086c:	200008ad 	.word	0x200008ad
20000870:	200008c7 	.word	0x200008c7
20000874:	200008e1 	.word	0x200008e1
20000878:	200008fb 	.word	0x200008fb
2000087c:	20000915 	.word	0x20000915
20000880:	2000092f 	.word	0x2000092f
20000884:	20000949 	.word	0x20000949
20000888:	20000963 	.word	0x20000963
2000088c:	2000097d 	.word	0x2000097d
20000890:	20000997 	.word	0x20000997
20000894:	200009b1 	.word	0x200009b1
20000898:	200009cb 	.word	0x200009cb
2000089c:	200009e5 	.word	0x200009e5
200008a0:	200009ff 	.word	0x200009ff
200008a4:	20000a19 	.word	0x20000a19
200008a8:	20000a33 	.word	0x20000a33
		{
			case 0x00:
				Message[i*2+1]='0';
200008ac:	68fb      	ldr	r3, [r7, #12]
200008ae:	ea4f 0343 	mov.w	r3, r3, lsl #1
200008b2:	f103 0201 	add.w	r2, r3, #1
200008b6:	f243 136c 	movw	r3, #12652	; 0x316c
200008ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
200008be:	f04f 0130 	mov.w	r1, #48	; 0x30
200008c2:	5499      	strb	r1, [r3, r2]
			break;
200008c4:	e0c1      	b.n	20000a4a <print_reg+0x20e>
			case 0x01:
				Message[i*2+1]='1';
200008c6:	68fb      	ldr	r3, [r7, #12]
200008c8:	ea4f 0343 	mov.w	r3, r3, lsl #1
200008cc:	f103 0201 	add.w	r2, r3, #1
200008d0:	f243 136c 	movw	r3, #12652	; 0x316c
200008d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200008d8:	f04f 0131 	mov.w	r1, #49	; 0x31
200008dc:	5499      	strb	r1, [r3, r2]
			break;
200008de:	e0b4      	b.n	20000a4a <print_reg+0x20e>
			case 0x02:
				Message[i*2+1]='2';
200008e0:	68fb      	ldr	r3, [r7, #12]
200008e2:	ea4f 0343 	mov.w	r3, r3, lsl #1
200008e6:	f103 0201 	add.w	r2, r3, #1
200008ea:	f243 136c 	movw	r3, #12652	; 0x316c
200008ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
200008f2:	f04f 0132 	mov.w	r1, #50	; 0x32
200008f6:	5499      	strb	r1, [r3, r2]
			break;
200008f8:	e0a7      	b.n	20000a4a <print_reg+0x20e>
			case 0x03:
				Message[i*2+1]='3';
200008fa:	68fb      	ldr	r3, [r7, #12]
200008fc:	ea4f 0343 	mov.w	r3, r3, lsl #1
20000900:	f103 0201 	add.w	r2, r3, #1
20000904:	f243 136c 	movw	r3, #12652	; 0x316c
20000908:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000090c:	f04f 0133 	mov.w	r1, #51	; 0x33
20000910:	5499      	strb	r1, [r3, r2]
			break;
20000912:	e09a      	b.n	20000a4a <print_reg+0x20e>
			case 0x04:
				Message[i*2+1]='4';
20000914:	68fb      	ldr	r3, [r7, #12]
20000916:	ea4f 0343 	mov.w	r3, r3, lsl #1
2000091a:	f103 0201 	add.w	r2, r3, #1
2000091e:	f243 136c 	movw	r3, #12652	; 0x316c
20000922:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000926:	f04f 0134 	mov.w	r1, #52	; 0x34
2000092a:	5499      	strb	r1, [r3, r2]
			break;
2000092c:	e08d      	b.n	20000a4a <print_reg+0x20e>
			case 0x05:
				Message[i*2+1]='5';
2000092e:	68fb      	ldr	r3, [r7, #12]
20000930:	ea4f 0343 	mov.w	r3, r3, lsl #1
20000934:	f103 0201 	add.w	r2, r3, #1
20000938:	f243 136c 	movw	r3, #12652	; 0x316c
2000093c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000940:	f04f 0135 	mov.w	r1, #53	; 0x35
20000944:	5499      	strb	r1, [r3, r2]
			break;
20000946:	e080      	b.n	20000a4a <print_reg+0x20e>
			case 0x06:
				Message[i*2+1]='6';
20000948:	68fb      	ldr	r3, [r7, #12]
2000094a:	ea4f 0343 	mov.w	r3, r3, lsl #1
2000094e:	f103 0201 	add.w	r2, r3, #1
20000952:	f243 136c 	movw	r3, #12652	; 0x316c
20000956:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000095a:	f04f 0136 	mov.w	r1, #54	; 0x36
2000095e:	5499      	strb	r1, [r3, r2]
			break;
20000960:	e073      	b.n	20000a4a <print_reg+0x20e>
			case 0x07:
				Message[i*2+1]='7';
20000962:	68fb      	ldr	r3, [r7, #12]
20000964:	ea4f 0343 	mov.w	r3, r3, lsl #1
20000968:	f103 0201 	add.w	r2, r3, #1
2000096c:	f243 136c 	movw	r3, #12652	; 0x316c
20000970:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000974:	f04f 0137 	mov.w	r1, #55	; 0x37
20000978:	5499      	strb	r1, [r3, r2]
			break;
2000097a:	e066      	b.n	20000a4a <print_reg+0x20e>
			case 0x08:
				Message[i*2+1]='8';
2000097c:	68fb      	ldr	r3, [r7, #12]
2000097e:	ea4f 0343 	mov.w	r3, r3, lsl #1
20000982:	f103 0201 	add.w	r2, r3, #1
20000986:	f243 136c 	movw	r3, #12652	; 0x316c
2000098a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000098e:	f04f 0138 	mov.w	r1, #56	; 0x38
20000992:	5499      	strb	r1, [r3, r2]
			break;
20000994:	e059      	b.n	20000a4a <print_reg+0x20e>
			case 0x09:
				Message[i*2+1]='9';
20000996:	68fb      	ldr	r3, [r7, #12]
20000998:	ea4f 0343 	mov.w	r3, r3, lsl #1
2000099c:	f103 0201 	add.w	r2, r3, #1
200009a0:	f243 136c 	movw	r3, #12652	; 0x316c
200009a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200009a8:	f04f 0139 	mov.w	r1, #57	; 0x39
200009ac:	5499      	strb	r1, [r3, r2]
			break;
200009ae:	e04c      	b.n	20000a4a <print_reg+0x20e>
			case 0x0a:
				Message[i*2+1]='A';
200009b0:	68fb      	ldr	r3, [r7, #12]
200009b2:	ea4f 0343 	mov.w	r3, r3, lsl #1
200009b6:	f103 0201 	add.w	r2, r3, #1
200009ba:	f243 136c 	movw	r3, #12652	; 0x316c
200009be:	f2c2 0300 	movt	r3, #8192	; 0x2000
200009c2:	f04f 0141 	mov.w	r1, #65	; 0x41
200009c6:	5499      	strb	r1, [r3, r2]
			break;
200009c8:	e03f      	b.n	20000a4a <print_reg+0x20e>
			case 0x0b:
				Message[i*2+1]='B';
200009ca:	68fb      	ldr	r3, [r7, #12]
200009cc:	ea4f 0343 	mov.w	r3, r3, lsl #1
200009d0:	f103 0201 	add.w	r2, r3, #1
200009d4:	f243 136c 	movw	r3, #12652	; 0x316c
200009d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200009dc:	f04f 0142 	mov.w	r1, #66	; 0x42
200009e0:	5499      	strb	r1, [r3, r2]
			break;
200009e2:	e032      	b.n	20000a4a <print_reg+0x20e>
			case 0x0c:
				Message[i*2+1]='C';
200009e4:	68fb      	ldr	r3, [r7, #12]
200009e6:	ea4f 0343 	mov.w	r3, r3, lsl #1
200009ea:	f103 0201 	add.w	r2, r3, #1
200009ee:	f243 136c 	movw	r3, #12652	; 0x316c
200009f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200009f6:	f04f 0143 	mov.w	r1, #67	; 0x43
200009fa:	5499      	strb	r1, [r3, r2]
			break;
200009fc:	e025      	b.n	20000a4a <print_reg+0x20e>
			case 0x0d:
				Message[i*2+1]='D';
200009fe:	68fb      	ldr	r3, [r7, #12]
20000a00:	ea4f 0343 	mov.w	r3, r3, lsl #1
20000a04:	f103 0201 	add.w	r2, r3, #1
20000a08:	f243 136c 	movw	r3, #12652	; 0x316c
20000a0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000a10:	f04f 0144 	mov.w	r1, #68	; 0x44
20000a14:	5499      	strb	r1, [r3, r2]
			break;
20000a16:	e018      	b.n	20000a4a <print_reg+0x20e>
			case 0x0e:
				Message[i*2+1]='E';
20000a18:	68fb      	ldr	r3, [r7, #12]
20000a1a:	ea4f 0343 	mov.w	r3, r3, lsl #1
20000a1e:	f103 0201 	add.w	r2, r3, #1
20000a22:	f243 136c 	movw	r3, #12652	; 0x316c
20000a26:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000a2a:	f04f 0145 	mov.w	r1, #69	; 0x45
20000a2e:	5499      	strb	r1, [r3, r2]
			break;
20000a30:	e00b      	b.n	20000a4a <print_reg+0x20e>
			case 0x0f:
				Message[i*2+1]='F';
20000a32:	68fb      	ldr	r3, [r7, #12]
20000a34:	ea4f 0343 	mov.w	r3, r3, lsl #1
20000a38:	f103 0201 	add.w	r2, r3, #1
20000a3c:	f243 136c 	movw	r3, #12652	; 0x316c
20000a40:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000a44:	f04f 0146 	mov.w	r1, #70	; 0x46
20000a48:	5499      	strb	r1, [r3, r2]
	return data;
}
void print_reg(uint8_t *data)
{
	int i=0;
	for (i=3;i>=0;i--)
20000a4a:	68fb      	ldr	r3, [r7, #12]
20000a4c:	f103 33ff 	add.w	r3, r3, #4294967295
20000a50:	60fb      	str	r3, [r7, #12]
20000a52:	68fb      	ldr	r3, [r7, #12]
20000a54:	2b00      	cmp	r3, #0
20000a56:	f6bf aefc 	bge.w	20000852 <print_reg+0x16>
			break;
			case 0x0f:
				Message[i*2+1]='F';
			break;
			}
	for (i=3;i>=0;i--)
20000a5a:	f04f 0303 	mov.w	r3, #3
20000a5e:	60fb      	str	r3, [r7, #12]
20000a60:	e0eb      	b.n	20000c3a <print_reg+0x3fe>
		switch (data[i]&0xF0)
20000a62:	68fa      	ldr	r2, [r7, #12]
20000a64:	687b      	ldr	r3, [r7, #4]
20000a66:	4413      	add	r3, r2
20000a68:	781b      	ldrb	r3, [r3, #0]
20000a6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
20000a6e:	2b70      	cmp	r3, #112	; 0x70
20000a70:	d07d      	beq.n	20000b6e <print_reg+0x332>
20000a72:	2b70      	cmp	r3, #112	; 0x70
20000a74:	dc11      	bgt.n	20000a9a <print_reg+0x25e>
20000a76:	2b30      	cmp	r3, #48	; 0x30
20000a78:	d04d      	beq.n	20000b16 <print_reg+0x2da>
20000a7a:	2b30      	cmp	r3, #48	; 0x30
20000a7c:	dc06      	bgt.n	20000a8c <print_reg+0x250>
20000a7e:	2b10      	cmp	r3, #16
20000a80:	d033      	beq.n	20000aea <print_reg+0x2ae>
20000a82:	2b20      	cmp	r3, #32
20000a84:	d03c      	beq.n	20000b00 <print_reg+0x2c4>
20000a86:	2b00      	cmp	r3, #0
20000a88:	d024      	beq.n	20000ad4 <print_reg+0x298>
20000a8a:	e0d2      	b.n	20000c32 <print_reg+0x3f6>
20000a8c:	2b50      	cmp	r3, #80	; 0x50
20000a8e:	d058      	beq.n	20000b42 <print_reg+0x306>
20000a90:	2b60      	cmp	r3, #96	; 0x60
20000a92:	d061      	beq.n	20000b58 <print_reg+0x31c>
20000a94:	2b40      	cmp	r3, #64	; 0x40
20000a96:	d049      	beq.n	20000b2c <print_reg+0x2f0>
20000a98:	e0cb      	b.n	20000c32 <print_reg+0x3f6>
20000a9a:	2bb0      	cmp	r3, #176	; 0xb0
20000a9c:	f000 8093 	beq.w	20000bc6 <print_reg+0x38a>
20000aa0:	2bb0      	cmp	r3, #176	; 0xb0
20000aa2:	dc07      	bgt.n	20000ab4 <print_reg+0x278>
20000aa4:	2b90      	cmp	r3, #144	; 0x90
20000aa6:	d078      	beq.n	20000b9a <print_reg+0x35e>
20000aa8:	2ba0      	cmp	r3, #160	; 0xa0
20000aaa:	f000 8081 	beq.w	20000bb0 <print_reg+0x374>
20000aae:	2b80      	cmp	r3, #128	; 0x80
20000ab0:	d068      	beq.n	20000b84 <print_reg+0x348>
20000ab2:	e0be      	b.n	20000c32 <print_reg+0x3f6>
20000ab4:	2bd0      	cmp	r3, #208	; 0xd0
20000ab6:	f000 809c 	beq.w	20000bf2 <print_reg+0x3b6>
20000aba:	2bd0      	cmp	r3, #208	; 0xd0
20000abc:	dc03      	bgt.n	20000ac6 <print_reg+0x28a>
20000abe:	2bc0      	cmp	r3, #192	; 0xc0
20000ac0:	f000 808c 	beq.w	20000bdc <print_reg+0x3a0>
20000ac4:	e0b5      	b.n	20000c32 <print_reg+0x3f6>
20000ac6:	2be0      	cmp	r3, #224	; 0xe0
20000ac8:	f000 809e 	beq.w	20000c08 <print_reg+0x3cc>
20000acc:	2bf0      	cmp	r3, #240	; 0xf0
20000ace:	f000 80a6 	beq.w	20000c1e <print_reg+0x3e2>
20000ad2:	e0ae      	b.n	20000c32 <print_reg+0x3f6>
			{
			case 0x00:
				Message[i*2]='0';
20000ad4:	68fb      	ldr	r3, [r7, #12]
20000ad6:	ea4f 0243 	mov.w	r2, r3, lsl #1
20000ada:	f243 136c 	movw	r3, #12652	; 0x316c
20000ade:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000ae2:	f04f 0130 	mov.w	r1, #48	; 0x30
20000ae6:	5499      	strb	r1, [r3, r2]
			break;
20000ae8:	e0a3      	b.n	20000c32 <print_reg+0x3f6>
			case 0x10:
				Message[i*2]='1';
20000aea:	68fb      	ldr	r3, [r7, #12]
20000aec:	ea4f 0243 	mov.w	r2, r3, lsl #1
20000af0:	f243 136c 	movw	r3, #12652	; 0x316c
20000af4:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000af8:	f04f 0131 	mov.w	r1, #49	; 0x31
20000afc:	5499      	strb	r1, [r3, r2]
			break;
20000afe:	e098      	b.n	20000c32 <print_reg+0x3f6>
			case 0x20:
				Message[i*2]='2';
20000b00:	68fb      	ldr	r3, [r7, #12]
20000b02:	ea4f 0243 	mov.w	r2, r3, lsl #1
20000b06:	f243 136c 	movw	r3, #12652	; 0x316c
20000b0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000b0e:	f04f 0132 	mov.w	r1, #50	; 0x32
20000b12:	5499      	strb	r1, [r3, r2]
			break;
20000b14:	e08d      	b.n	20000c32 <print_reg+0x3f6>
			case 0x30:
				Message[i*2]='3';
20000b16:	68fb      	ldr	r3, [r7, #12]
20000b18:	ea4f 0243 	mov.w	r2, r3, lsl #1
20000b1c:	f243 136c 	movw	r3, #12652	; 0x316c
20000b20:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000b24:	f04f 0133 	mov.w	r1, #51	; 0x33
20000b28:	5499      	strb	r1, [r3, r2]
			break;
20000b2a:	e082      	b.n	20000c32 <print_reg+0x3f6>
			case 0x40:
				Message[i*2]='4';
20000b2c:	68fb      	ldr	r3, [r7, #12]
20000b2e:	ea4f 0243 	mov.w	r2, r3, lsl #1
20000b32:	f243 136c 	movw	r3, #12652	; 0x316c
20000b36:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000b3a:	f04f 0134 	mov.w	r1, #52	; 0x34
20000b3e:	5499      	strb	r1, [r3, r2]
			break;
20000b40:	e077      	b.n	20000c32 <print_reg+0x3f6>
			case 0x50:
				Message[i*2]='5';
20000b42:	68fb      	ldr	r3, [r7, #12]
20000b44:	ea4f 0243 	mov.w	r2, r3, lsl #1
20000b48:	f243 136c 	movw	r3, #12652	; 0x316c
20000b4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000b50:	f04f 0135 	mov.w	r1, #53	; 0x35
20000b54:	5499      	strb	r1, [r3, r2]
			break;
20000b56:	e06c      	b.n	20000c32 <print_reg+0x3f6>
			case 0x60:
				Message[i*2]='6';
20000b58:	68fb      	ldr	r3, [r7, #12]
20000b5a:	ea4f 0243 	mov.w	r2, r3, lsl #1
20000b5e:	f243 136c 	movw	r3, #12652	; 0x316c
20000b62:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000b66:	f04f 0136 	mov.w	r1, #54	; 0x36
20000b6a:	5499      	strb	r1, [r3, r2]
			break;
20000b6c:	e061      	b.n	20000c32 <print_reg+0x3f6>
			case 0x70:
				Message[i*2]='7';
20000b6e:	68fb      	ldr	r3, [r7, #12]
20000b70:	ea4f 0243 	mov.w	r2, r3, lsl #1
20000b74:	f243 136c 	movw	r3, #12652	; 0x316c
20000b78:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000b7c:	f04f 0137 	mov.w	r1, #55	; 0x37
20000b80:	5499      	strb	r1, [r3, r2]
			break;
20000b82:	e056      	b.n	20000c32 <print_reg+0x3f6>
			case 0x80:
				Message[i*2]='8';
20000b84:	68fb      	ldr	r3, [r7, #12]
20000b86:	ea4f 0243 	mov.w	r2, r3, lsl #1
20000b8a:	f243 136c 	movw	r3, #12652	; 0x316c
20000b8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000b92:	f04f 0138 	mov.w	r1, #56	; 0x38
20000b96:	5499      	strb	r1, [r3, r2]
			break;
20000b98:	e04b      	b.n	20000c32 <print_reg+0x3f6>
			case 0x90:
				Message[i*2]='9';
20000b9a:	68fb      	ldr	r3, [r7, #12]
20000b9c:	ea4f 0243 	mov.w	r2, r3, lsl #1
20000ba0:	f243 136c 	movw	r3, #12652	; 0x316c
20000ba4:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000ba8:	f04f 0139 	mov.w	r1, #57	; 0x39
20000bac:	5499      	strb	r1, [r3, r2]
			break;
20000bae:	e040      	b.n	20000c32 <print_reg+0x3f6>
			case 0xa0:
				Message[i*2]='A';
20000bb0:	68fb      	ldr	r3, [r7, #12]
20000bb2:	ea4f 0243 	mov.w	r2, r3, lsl #1
20000bb6:	f243 136c 	movw	r3, #12652	; 0x316c
20000bba:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000bbe:	f04f 0141 	mov.w	r1, #65	; 0x41
20000bc2:	5499      	strb	r1, [r3, r2]
			break;
20000bc4:	e035      	b.n	20000c32 <print_reg+0x3f6>
			case 0xb0:
				Message[i*2]='B';
20000bc6:	68fb      	ldr	r3, [r7, #12]
20000bc8:	ea4f 0243 	mov.w	r2, r3, lsl #1
20000bcc:	f243 136c 	movw	r3, #12652	; 0x316c
20000bd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000bd4:	f04f 0142 	mov.w	r1, #66	; 0x42
20000bd8:	5499      	strb	r1, [r3, r2]
			break;
20000bda:	e02a      	b.n	20000c32 <print_reg+0x3f6>
			case 0xc0:
				Message[i*2]='C';
20000bdc:	68fb      	ldr	r3, [r7, #12]
20000bde:	ea4f 0243 	mov.w	r2, r3, lsl #1
20000be2:	f243 136c 	movw	r3, #12652	; 0x316c
20000be6:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000bea:	f04f 0143 	mov.w	r1, #67	; 0x43
20000bee:	5499      	strb	r1, [r3, r2]
			break;
20000bf0:	e01f      	b.n	20000c32 <print_reg+0x3f6>
			case 0xd0:
				Message[i*2]='D';
20000bf2:	68fb      	ldr	r3, [r7, #12]
20000bf4:	ea4f 0243 	mov.w	r2, r3, lsl #1
20000bf8:	f243 136c 	movw	r3, #12652	; 0x316c
20000bfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c00:	f04f 0144 	mov.w	r1, #68	; 0x44
20000c04:	5499      	strb	r1, [r3, r2]
			break;
20000c06:	e014      	b.n	20000c32 <print_reg+0x3f6>
			case 0xe0:
				Message[i*2]='E';
20000c08:	68fb      	ldr	r3, [r7, #12]
20000c0a:	ea4f 0243 	mov.w	r2, r3, lsl #1
20000c0e:	f243 136c 	movw	r3, #12652	; 0x316c
20000c12:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c16:	f04f 0145 	mov.w	r1, #69	; 0x45
20000c1a:	5499      	strb	r1, [r3, r2]
			break;
20000c1c:	e009      	b.n	20000c32 <print_reg+0x3f6>
			case 0xf0:
				Message[i*2]='F';
20000c1e:	68fb      	ldr	r3, [r7, #12]
20000c20:	ea4f 0243 	mov.w	r2, r3, lsl #1
20000c24:	f243 136c 	movw	r3, #12652	; 0x316c
20000c28:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c2c:	f04f 0146 	mov.w	r1, #70	; 0x46
20000c30:	5499      	strb	r1, [r3, r2]
			break;
			case 0x0f:
				Message[i*2+1]='F';
			break;
			}
	for (i=3;i>=0;i--)
20000c32:	68fb      	ldr	r3, [r7, #12]
20000c34:	f103 33ff 	add.w	r3, r3, #4294967295
20000c38:	60fb      	str	r3, [r7, #12]
20000c3a:	68fb      	ldr	r3, [r7, #12]
20000c3c:	2b00      	cmp	r3, #0
20000c3e:	f6bf af10 	bge.w	20000a62 <print_reg+0x226>
			break;
			case 0xf0:
				Message[i*2]='F';
			break;
			}
	Message[8]='\r';
20000c42:	f243 136c 	movw	r3, #12652	; 0x316c
20000c46:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c4a:	f04f 020d 	mov.w	r2, #13
20000c4e:	721a      	strb	r2, [r3, #8]
	Message[9]='\n';
20000c50:	f243 136c 	movw	r3, #12652	; 0x316c
20000c54:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c58:	f04f 020a 	mov.w	r2, #10
20000c5c:	725a      	strb	r2, [r3, #9]
	//Sending message
	MSS_UART_polled_tx_string(gp_my_uart, Message);
20000c5e:	f243 0394 	movw	r3, #12436	; 0x3094
20000c62:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c66:	681b      	ldr	r3, [r3, #0]
20000c68:	4618      	mov	r0, r3
20000c6a:	f243 116c 	movw	r1, #12652	; 0x316c
20000c6e:	f2c2 0100 	movt	r1, #8192	; 0x2000
20000c72:	f000 fe75 	bl	20001960 <MSS_UART_polled_tx_string>
}
20000c76:	f107 0710 	add.w	r7, r7, #16
20000c7a:	46bd      	mov	sp, r7
20000c7c:	bd80      	pop	{r7, pc}
20000c7e:	bf00      	nop

20000c80 <read_one_reg>:

		MSS_GPIO_set_output(cpu_clk,1);
		MSS_GPIO_set_output(cpu_clk,0);
}
void read_one_reg(uint8_t addr, uint8_t *data)
{
20000c80:	b590      	push	{r4, r7, lr}
20000c82:	b083      	sub	sp, #12
20000c84:	af00      	add	r7, sp, #0
20000c86:	4603      	mov	r3, r0
20000c88:	6039      	str	r1, [r7, #0]
20000c8a:	71fb      	strb	r3, [r7, #7]
	c_TMS;
20000c8c:	f04f 000b 	mov.w	r0, #11
20000c90:	f04f 0100 	mov.w	r1, #0
20000c94:	f001 ffc8 	bl	20002c28 <MSS_GPIO_set_output>
	clock;
20000c98:	f04f 000c 	mov.w	r0, #12
20000c9c:	f04f 0101 	mov.w	r1, #1
20000ca0:	f001 ffc2 	bl	20002c28 <MSS_GPIO_set_output>
20000ca4:	f04f 000c 	mov.w	r0, #12
20000ca8:	f04f 0100 	mov.w	r1, #0
20000cac:	f001 ffbc 	bl	20002c28 <MSS_GPIO_set_output>
	clock;
20000cb0:	f04f 000c 	mov.w	r0, #12
20000cb4:	f04f 0101 	mov.w	r1, #1
20000cb8:	f001 ffb6 	bl	20002c28 <MSS_GPIO_set_output>
20000cbc:	f04f 000c 	mov.w	r0, #12
20000cc0:	f04f 0100 	mov.w	r1, #0
20000cc4:	f001 ffb0 	bl	20002c28 <MSS_GPIO_set_output>
	read_write(addr,0x01);
20000cc8:	79fb      	ldrb	r3, [r7, #7]
20000cca:	4618      	mov	r0, r3
20000ccc:	f04f 0101 	mov.w	r1, #1
20000cd0:	f7ff fc1a 	bl	20000508 <read_write>
	clock;
20000cd4:	f04f 000c 	mov.w	r0, #12
20000cd8:	f04f 0101 	mov.w	r1, #1
20000cdc:	f001 ffa4 	bl	20002c28 <MSS_GPIO_set_output>
20000ce0:	f04f 000c 	mov.w	r0, #12
20000ce4:	f04f 0100 	mov.w	r1, #0
20000ce8:	f001 ff9e 	bl	20002c28 <MSS_GPIO_set_output>
	clock;
20000cec:	f04f 000c 	mov.w	r0, #12
20000cf0:	f04f 0101 	mov.w	r1, #1
20000cf4:	f001 ff98 	bl	20002c28 <MSS_GPIO_set_output>
20000cf8:	f04f 000c 	mov.w	r0, #12
20000cfc:	f04f 0100 	mov.w	r1, #0
20000d00:	f001 ff92 	bl	20002c28 <MSS_GPIO_set_output>
	c_TMS
20000d04:	f04f 000b 	mov.w	r0, #11
20000d08:	f04f 0100 	mov.w	r1, #0
20000d0c:	f001 ff8c 	bl	20002c28 <MSS_GPIO_set_output>
	clock;
20000d10:	f04f 000c 	mov.w	r0, #12
20000d14:	f04f 0101 	mov.w	r1, #1
20000d18:	f001 ff86 	bl	20002c28 <MSS_GPIO_set_output>
20000d1c:	f04f 000c 	mov.w	r0, #12
20000d20:	f04f 0100 	mov.w	r1, #0
20000d24:	f001 ff80 	bl	20002c28 <MSS_GPIO_set_output>
	clock;
20000d28:	f04f 000c 	mov.w	r0, #12
20000d2c:	f04f 0101 	mov.w	r1, #1
20000d30:	f001 ff7a 	bl	20002c28 <MSS_GPIO_set_output>
20000d34:	f04f 000c 	mov.w	r0, #12
20000d38:	f04f 0100 	mov.w	r1, #0
20000d3c:	f001 ff74 	bl	20002c28 <MSS_GPIO_set_output>
	//clock;
	data[0]= read_write(0x00,0x00);
20000d40:	f04f 0000 	mov.w	r0, #0
20000d44:	f04f 0100 	mov.w	r1, #0
20000d48:	f7ff fbde 	bl	20000508 <read_write>
20000d4c:	4603      	mov	r3, r0
20000d4e:	461a      	mov	r2, r3
20000d50:	683b      	ldr	r3, [r7, #0]
20000d52:	701a      	strb	r2, [r3, #0]
	data[1]= read_write(0x00,0x00);
20000d54:	683b      	ldr	r3, [r7, #0]
20000d56:	f103 0401 	add.w	r4, r3, #1
20000d5a:	f04f 0000 	mov.w	r0, #0
20000d5e:	f04f 0100 	mov.w	r1, #0
20000d62:	f7ff fbd1 	bl	20000508 <read_write>
20000d66:	4603      	mov	r3, r0
20000d68:	7023      	strb	r3, [r4, #0]
	data[2]= read_write(0x00,0x00);
20000d6a:	683b      	ldr	r3, [r7, #0]
20000d6c:	f103 0402 	add.w	r4, r3, #2
20000d70:	f04f 0000 	mov.w	r0, #0
20000d74:	f04f 0100 	mov.w	r1, #0
20000d78:	f7ff fbc6 	bl	20000508 <read_write>
20000d7c:	4603      	mov	r3, r0
20000d7e:	7023      	strb	r3, [r4, #0]
	data[3]= read_write(0x00,0x01);
20000d80:	683b      	ldr	r3, [r7, #0]
20000d82:	f103 0403 	add.w	r4, r3, #3
20000d86:	f04f 0000 	mov.w	r0, #0
20000d8a:	f04f 0101 	mov.w	r1, #1
20000d8e:	f7ff fbbb 	bl	20000508 <read_write>
20000d92:	4603      	mov	r3, r0
20000d94:	7023      	strb	r3, [r4, #0]
	clock;
20000d96:	f04f 000c 	mov.w	r0, #12
20000d9a:	f04f 0101 	mov.w	r1, #1
20000d9e:	f001 ff43 	bl	20002c28 <MSS_GPIO_set_output>
20000da2:	f04f 000c 	mov.w	r0, #12
20000da6:	f04f 0100 	mov.w	r1, #0
20000daa:	f001 ff3d 	bl	20002c28 <MSS_GPIO_set_output>
	clock;
20000dae:	f04f 000c 	mov.w	r0, #12
20000db2:	f04f 0101 	mov.w	r1, #1
20000db6:	f001 ff37 	bl	20002c28 <MSS_GPIO_set_output>
20000dba:	f04f 000c 	mov.w	r0, #12
20000dbe:	f04f 0100 	mov.w	r1, #0
20000dc2:	f001 ff31 	bl	20002c28 <MSS_GPIO_set_output>
	c_TMS
20000dc6:	f04f 000b 	mov.w	r0, #11
20000dca:	f04f 0100 	mov.w	r1, #0
20000dce:	f001 ff2b 	bl	20002c28 <MSS_GPIO_set_output>
	clock;
20000dd2:	f04f 000c 	mov.w	r0, #12
20000dd6:	f04f 0101 	mov.w	r1, #1
20000dda:	f001 ff25 	bl	20002c28 <MSS_GPIO_set_output>
20000dde:	f04f 000c 	mov.w	r0, #12
20000de2:	f04f 0100 	mov.w	r1, #0
20000de6:	f001 ff1f 	bl	20002c28 <MSS_GPIO_set_output>
	clock;
20000dea:	f04f 000c 	mov.w	r0, #12
20000dee:	f04f 0101 	mov.w	r1, #1
20000df2:	f001 ff19 	bl	20002c28 <MSS_GPIO_set_output>
20000df6:	f04f 000c 	mov.w	r0, #12
20000dfa:	f04f 0100 	mov.w	r1, #0
20000dfe:	f001 ff13 	bl	20002c28 <MSS_GPIO_set_output>
}
20000e02:	f107 070c 	add.w	r7, r7, #12
20000e06:	46bd      	mov	sp, r7
20000e08:	bd90      	pop	{r4, r7, pc}
20000e0a:	bf00      	nop

20000e0c <main>:

int main()
{
20000e0c:	b580      	push	{r7, lr}
20000e0e:	b08a      	sub	sp, #40	; 0x28
20000e10:	af02      	add	r7, sp, #8
    MSS_UART_init(gp_my_uart, MSS_UART_115200_BAUD,
20000e12:	f243 0394 	movw	r3, #12436	; 0x3094
20000e16:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e1a:	681b      	ldr	r3, [r3, #0]
20000e1c:	4618      	mov	r0, r3
20000e1e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
20000e22:	f04f 0203 	mov.w	r2, #3
20000e26:	f000 fd59 	bl	200018dc <MSS_UART_init>
                  MSS_UART_DATA_8_BITS | MSS_UART_NO_PARITY | MSS_UART_ONE_STOP_BIT);
    /*MSS_UART_set_rx_handler(gp_my_uart, uart0_rx_handler,
                              MSS_UART_FIFO_SINGLE_BYTE);*/

    MSS_GPIO_init();
20000e2a:	f001 fe89 	bl	20002b40 <MSS_GPIO_init>
    //reg_MUX inputs. MIPS reg outputs [7:0] or [15:8] or [23:9] or [31:24]
    MSS_GPIO_config(reg_MUX0 , MSS_GPIO_INPUT_MODE );
20000e2e:	f04f 0000 	mov.w	r0, #0
20000e32:	f04f 0102 	mov.w	r1, #2
20000e36:	f001 fed9 	bl	20002bec <MSS_GPIO_config>
    MSS_GPIO_config(reg_MUX1 , MSS_GPIO_INPUT_MODE );
20000e3a:	f04f 0001 	mov.w	r0, #1
20000e3e:	f04f 0102 	mov.w	r1, #2
20000e42:	f001 fed3 	bl	20002bec <MSS_GPIO_config>
    MSS_GPIO_config(reg_MUX2 , MSS_GPIO_INPUT_MODE );
20000e46:	f04f 0002 	mov.w	r0, #2
20000e4a:	f04f 0102 	mov.w	r1, #2
20000e4e:	f001 fecd 	bl	20002bec <MSS_GPIO_config>
    MSS_GPIO_config(reg_MUX3 , MSS_GPIO_INPUT_MODE );
20000e52:	f04f 0003 	mov.w	r0, #3
20000e56:	f04f 0102 	mov.w	r1, #2
20000e5a:	f001 fec7 	bl	20002bec <MSS_GPIO_config>
    MSS_GPIO_config(reg_MUX4 , MSS_GPIO_INPUT_MODE );
20000e5e:	f04f 0004 	mov.w	r0, #4
20000e62:	f04f 0102 	mov.w	r1, #2
20000e66:	f001 fec1 	bl	20002bec <MSS_GPIO_config>
    MSS_GPIO_config(reg_MUX5 , MSS_GPIO_INPUT_MODE );
20000e6a:	f04f 0005 	mov.w	r0, #5
20000e6e:	f04f 0102 	mov.w	r1, #2
20000e72:	f001 febb 	bl	20002bec <MSS_GPIO_config>
    MSS_GPIO_config(reg_MUX6 , MSS_GPIO_INPUT_MODE );
20000e76:	f04f 0006 	mov.w	r0, #6
20000e7a:	f04f 0102 	mov.w	r1, #2
20000e7e:	f001 feb5 	bl	20002bec <MSS_GPIO_config>
    MSS_GPIO_config(reg_MUX7 , MSS_GPIO_INPUT_MODE );
20000e82:	f04f 0007 	mov.w	r0, #7
20000e86:	f04f 0102 	mov.w	r1, #2
20000e8a:	f001 feaf 	bl	20002bec <MSS_GPIO_config>
    //MUX sel inputs. Enable MIPS reg outputs [7:0] or [15:8] or [23:9] or [31:24]
    MSS_GPIO_config(sel_MUX0 , MSS_GPIO_OUTPUT_MODE );
20000e8e:	f04f 0008 	mov.w	r0, #8
20000e92:	f04f 0105 	mov.w	r1, #5
20000e96:	f001 fea9 	bl	20002bec <MSS_GPIO_config>
    MSS_GPIO_config(sel_MUX1 , MSS_GPIO_OUTPUT_MODE );
20000e9a:	f04f 0009 	mov.w	r0, #9
20000e9e:	f04f 0105 	mov.w	r1, #5
20000ea2:	f001 fea3 	bl	20002bec <MSS_GPIO_config>
    //Configuring MIPS inputs to test
    MSS_GPIO_config(cpu_clk , MSS_GPIO_OUTPUT_MODE );
20000ea6:	f04f 000e 	mov.w	r0, #14
20000eaa:	f04f 0105 	mov.w	r1, #5
20000eae:	f001 fe9d 	bl	20002bec <MSS_GPIO_config>
    MSS_GPIO_config(TMS , MSS_GPIO_OUTPUT_MODE );
20000eb2:	f04f 000b 	mov.w	r0, #11
20000eb6:	f04f 0105 	mov.w	r1, #5
20000eba:	f001 fe97 	bl	20002bec <MSS_GPIO_config>
    MSS_GPIO_config(TDI , MSS_GPIO_OUTPUT_MODE );
20000ebe:	f04f 000d 	mov.w	r0, #13
20000ec2:	f04f 0105 	mov.w	r1, #5
20000ec6:	f001 fe91 	bl	20002bec <MSS_GPIO_config>
    MSS_GPIO_config(TCK , MSS_GPIO_OUTPUT_MODE );
20000eca:	f04f 000c 	mov.w	r0, #12
20000ece:	f04f 0105 	mov.w	r1, #5
20000ed2:	f001 fe8b 	bl	20002bec <MSS_GPIO_config>
    MSS_GPIO_config(TDO , MSS_GPIO_INPUT_MODE );
20000ed6:	f04f 000f 	mov.w	r0, #15
20000eda:	f04f 0102 	mov.w	r1, #2
20000ede:	f001 fe85 	bl	20002bec <MSS_GPIO_config>
    MSS_GPIO_config(TRST , MSS_GPIO_OUTPUT_MODE );
20000ee2:	f04f 0010 	mov.w	r0, #16
20000ee6:	f04f 0105 	mov.w	r1, #5
20000eea:	f001 fe7f 	bl	20002bec <MSS_GPIO_config>

    //MIPS rst_n input
    MSS_GPIO_config(rst_n , MSS_GPIO_OUTPUT_MODE );
20000eee:	f04f 000a 	mov.w	r0, #10
20000ef2:	f04f 0105 	mov.w	r1, #5
20000ef6:	f001 fe79 	bl	20002bec <MSS_GPIO_config>
    //Reset MIPS
    MSS_GPIO_set_output(rst_n,0);
20000efa:	f04f 000a 	mov.w	r0, #10
20000efe:	f04f 0100 	mov.w	r1, #0
20000f02:	f001 fe91 	bl	20002c28 <MSS_GPIO_set_output>
    MSS_GPIO_set_output(cpu_clk,1);
20000f06:	f04f 000e 	mov.w	r0, #14
20000f0a:	f04f 0101 	mov.w	r1, #1
20000f0e:	f001 fe8b 	bl	20002c28 <MSS_GPIO_set_output>
    MSS_GPIO_set_output(cpu_clk,0);
20000f12:	f04f 000e 	mov.w	r0, #14
20000f16:	f04f 0100 	mov.w	r1, #0
20000f1a:	f001 fe85 	bl	20002c28 <MSS_GPIO_set_output>
    MSS_GPIO_set_output(cpu_clk,1);
20000f1e:	f04f 000e 	mov.w	r0, #14
20000f22:	f04f 0101 	mov.w	r1, #1
20000f26:	f001 fe7f 	bl	20002c28 <MSS_GPIO_set_output>
    MSS_GPIO_set_output(cpu_clk,0);
20000f2a:	f04f 000e 	mov.w	r0, #14
20000f2e:	f04f 0100 	mov.w	r1, #0
20000f32:	f001 fe79 	bl	20002c28 <MSS_GPIO_set_output>
    MSS_GPIO_set_output(cpu_clk,1);
20000f36:	f04f 000e 	mov.w	r0, #14
20000f3a:	f04f 0101 	mov.w	r1, #1
20000f3e:	f001 fe73 	bl	20002c28 <MSS_GPIO_set_output>
    MSS_GPIO_set_output(cpu_clk,0);
20000f42:	f04f 000e 	mov.w	r0, #14
20000f46:	f04f 0100 	mov.w	r1, #0
20000f4a:	f001 fe6d 	bl	20002c28 <MSS_GPIO_set_output>
    MSS_GPIO_set_output(rst_n,1);
20000f4e:	f04f 000a 	mov.w	r0, #10
20000f52:	f04f 0101 	mov.w	r1, #1
20000f56:	f001 fe67 	bl	20002c28 <MSS_GPIO_set_output>
    MSS_SPI_init(&g_mss_spi0);
20000f5a:	f243 20a8 	movw	r0, #12968	; 0x32a8
20000f5e:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000f62:	f001 f97d 	bl	20002260 <MSS_SPI_init>
    MSS_SPI_configure_master_mode(&g_mss_spi0,MSS_SPI_SLAVE_0,MSS_SPI_MODE0,16u,8);
20000f66:	f04f 0308 	mov.w	r3, #8
20000f6a:	9300      	str	r3, [sp, #0]
20000f6c:	f243 20a8 	movw	r0, #12968	; 0x32a8
20000f70:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000f74:	f04f 0100 	mov.w	r1, #0
20000f78:	f04f 0200 	mov.w	r2, #0
20000f7c:	f04f 0310 	mov.w	r3, #16
20000f80:	f001 fab8 	bl	200024f4 <MSS_SPI_configure_master_mode>
    MSS_GPIO_set_output(TMS,1);
20000f84:	f04f 000b 	mov.w	r0, #11
20000f88:	f04f 0101 	mov.w	r1, #1
20000f8c:	f001 fe4c 	bl	20002c28 <MSS_GPIO_set_output>
    MSS_GPIO_set_output(TRST,0);
20000f90:	f04f 0010 	mov.w	r0, #16
20000f94:	f04f 0100 	mov.w	r1, #0
20000f98:	f001 fe46 	bl	20002c28 <MSS_GPIO_set_output>
    int i;
    MSS_GPIO_set_output(TRST,1);
20000f9c:	f04f 0010 	mov.w	r0, #16
20000fa0:	f04f 0101 	mov.w	r1, #1
20000fa4:	f001 fe40 	bl	20002c28 <MSS_GPIO_set_output>
    c_TMS;
20000fa8:	f04f 000b 	mov.w	r0, #11
20000fac:	f04f 0100 	mov.w	r1, #0
20000fb0:	f001 fe3a 	bl	20002c28 <MSS_GPIO_set_output>
    clock;
20000fb4:	f04f 000c 	mov.w	r0, #12
20000fb8:	f04f 0101 	mov.w	r1, #1
20000fbc:	f001 fe34 	bl	20002c28 <MSS_GPIO_set_output>
20000fc0:	f04f 000c 	mov.w	r0, #12
20000fc4:	f04f 0100 	mov.w	r1, #0
20000fc8:	f001 fe2e 	bl	20002c28 <MSS_GPIO_set_output>
    clock;
20000fcc:	f04f 000c 	mov.w	r0, #12
20000fd0:	f04f 0101 	mov.w	r1, #1
20000fd4:	f001 fe28 	bl	20002c28 <MSS_GPIO_set_output>
20000fd8:	f04f 000c 	mov.w	r0, #12
20000fdc:	f04f 0100 	mov.w	r1, #0
20000fe0:	f001 fe22 	bl	20002c28 <MSS_GPIO_set_output>
    s_TMS;
20000fe4:	f04f 000b 	mov.w	r0, #11
20000fe8:	f04f 0101 	mov.w	r1, #1
20000fec:	f001 fe1c 	bl	20002c28 <MSS_GPIO_set_output>
    clock;
20000ff0:	f04f 000c 	mov.w	r0, #12
20000ff4:	f04f 0101 	mov.w	r1, #1
20000ff8:	f001 fe16 	bl	20002c28 <MSS_GPIO_set_output>
20000ffc:	f04f 000c 	mov.w	r0, #12
20001000:	f04f 0100 	mov.w	r1, #0
20001004:	f001 fe10 	bl	20002c28 <MSS_GPIO_set_output>
    clock;
20001008:	f04f 000c 	mov.w	r0, #12
2000100c:	f04f 0101 	mov.w	r1, #1
20001010:	f001 fe0a 	bl	20002c28 <MSS_GPIO_set_output>
20001014:	f04f 000c 	mov.w	r0, #12
20001018:	f04f 0100 	mov.w	r1, #0
2000101c:	f001 fe04 	bl	20002c28 <MSS_GPIO_set_output>
    c_TMS;
20001020:	f04f 000b 	mov.w	r0, #11
20001024:	f04f 0100 	mov.w	r1, #0
20001028:	f001 fdfe 	bl	20002c28 <MSS_GPIO_set_output>
    clock;
2000102c:	f04f 000c 	mov.w	r0, #12
20001030:	f04f 0101 	mov.w	r1, #1
20001034:	f001 fdf8 	bl	20002c28 <MSS_GPIO_set_output>
20001038:	f04f 000c 	mov.w	r0, #12
2000103c:	f04f 0100 	mov.w	r1, #0
20001040:	f001 fdf2 	bl	20002c28 <MSS_GPIO_set_output>
    clock;
20001044:	f04f 000c 	mov.w	r0, #12
20001048:	f04f 0101 	mov.w	r1, #1
2000104c:	f001 fdec 	bl	20002c28 <MSS_GPIO_set_output>
20001050:	f04f 000c 	mov.w	r0, #12
20001054:	f04f 0100 	mov.w	r1, #0
20001058:	f001 fde6 	bl	20002c28 <MSS_GPIO_set_output>
    clock;
2000105c:	f04f 000c 	mov.w	r0, #12
20001060:	f04f 0101 	mov.w	r1, #1
20001064:	f001 fde0 	bl	20002c28 <MSS_GPIO_set_output>
20001068:	f04f 000c 	mov.w	r0, #12
2000106c:	f04f 0100 	mov.w	r1, #0
20001070:	f001 fdda 	bl	20002c28 <MSS_GPIO_set_output>

    /*BYPASS={width{1'b1}},
                SAMPLE_PRELOAD={{(width-1){1'b0}},1'b1},
                IDCODE={width{1'b0}},*/
    serialData[0]=read_write(0x01,0x00);
20001074:	f04f 0001 	mov.w	r0, #1
20001078:	f04f 0100 	mov.w	r1, #0
2000107c:	f7ff fa44 	bl	20000508 <read_write>
20001080:	4603      	mov	r3, r0
20001082:	461a      	mov	r2, r3
20001084:	f243 1364 	movw	r3, #12644	; 0x3164
20001088:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000108c:	701a      	strb	r2, [r3, #0]
    serialData[0]=read_write(0x01,0x01);
2000108e:	f04f 0001 	mov.w	r0, #1
20001092:	f04f 0101 	mov.w	r1, #1
20001096:	f7ff fa37 	bl	20000508 <read_write>
2000109a:	4603      	mov	r3, r0
2000109c:	461a      	mov	r2, r3
2000109e:	f243 1364 	movw	r3, #12644	; 0x3164
200010a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200010a6:	701a      	strb	r2, [r3, #0]
    clock;
200010a8:	f04f 000c 	mov.w	r0, #12
200010ac:	f04f 0101 	mov.w	r1, #1
200010b0:	f001 fdba 	bl	20002c28 <MSS_GPIO_set_output>
200010b4:	f04f 000c 	mov.w	r0, #12
200010b8:	f04f 0100 	mov.w	r1, #0
200010bc:	f001 fdb4 	bl	20002c28 <MSS_GPIO_set_output>
    clock;
200010c0:	f04f 000c 	mov.w	r0, #12
200010c4:	f04f 0101 	mov.w	r1, #1
200010c8:	f001 fdae 	bl	20002c28 <MSS_GPIO_set_output>
200010cc:	f04f 000c 	mov.w	r0, #12
200010d0:	f04f 0100 	mov.w	r1, #0
200010d4:	f001 fda8 	bl	20002c28 <MSS_GPIO_set_output>
    c_TMS
200010d8:	f04f 000b 	mov.w	r0, #11
200010dc:	f04f 0100 	mov.w	r1, #0
200010e0:	f001 fda2 	bl	20002c28 <MSS_GPIO_set_output>
    clock;
200010e4:	f04f 000c 	mov.w	r0, #12
200010e8:	f04f 0101 	mov.w	r1, #1
200010ec:	f001 fd9c 	bl	20002c28 <MSS_GPIO_set_output>
200010f0:	f04f 000c 	mov.w	r0, #12
200010f4:	f04f 0100 	mov.w	r1, #0
200010f8:	f001 fd96 	bl	20002c28 <MSS_GPIO_set_output>
    clock;
200010fc:	f04f 000c 	mov.w	r0, #12
20001100:	f04f 0101 	mov.w	r1, #1
20001104:	f001 fd90 	bl	20002c28 <MSS_GPIO_set_output>
20001108:	f04f 000c 	mov.w	r0, #12
2000110c:	f04f 0100 	mov.w	r1, #0
20001110:	f001 fd8a 	bl	20002c28 <MSS_GPIO_set_output>

    uint8_t reg_data[4];
    while (1)
    {
    	for(i=0;i<32;i++)
20001114:	f04f 0300 	mov.w	r3, #0
20001118:	61fb      	str	r3, [r7, #28]
2000111a:	e350      	b.n	200017be <main+0x9b2>
    	        		{
    	        			uint8_t name[7];
    	        			if(i==0)
2000111c:	69fb      	ldr	r3, [r7, #28]
2000111e:	2b00      	cmp	r3, #0
20001120:	d116      	bne.n	20001150 <main+0x344>
    	        			{
    	        				name[0]='p';
20001122:	f04f 0370 	mov.w	r3, #112	; 0x70
20001126:	743b      	strb	r3, [r7, #16]
    	        				name[1]='c';
20001128:	f04f 0363 	mov.w	r3, #99	; 0x63
2000112c:	747b      	strb	r3, [r7, #17]
    	        				name[2]='=';
2000112e:	f04f 033d 	mov.w	r3, #61	; 0x3d
20001132:	74bb      	strb	r3, [r7, #18]
    	        				name[3]='\0';
20001134:	f04f 0300 	mov.w	r3, #0
20001138:	74fb      	strb	r3, [r7, #19]
    	        				MSS_UART_polled_tx_string(gp_my_uart, name);
2000113a:	f243 0394 	movw	r3, #12436	; 0x3094
2000113e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001142:	681a      	ldr	r2, [r3, #0]
20001144:	f107 0310 	add.w	r3, r7, #16
20001148:	4610      	mov	r0, r2
2000114a:	4619      	mov	r1, r3
2000114c:	f000 fc08 	bl	20001960 <MSS_UART_polled_tx_string>
    	        			}
    	        			if(i==1)
20001150:	69fb      	ldr	r3, [r7, #28]
20001152:	2b01      	cmp	r3, #1
20001154:	d116      	bne.n	20001184 <main+0x378>
    	        			    {
    	        			        name[0]='a';
20001156:	f04f 0361 	mov.w	r3, #97	; 0x61
2000115a:	743b      	strb	r3, [r7, #16]
    	        			        name[1]='t';
2000115c:	f04f 0374 	mov.w	r3, #116	; 0x74
20001160:	747b      	strb	r3, [r7, #17]
    	        			        name[2]='=';
20001162:	f04f 033d 	mov.w	r3, #61	; 0x3d
20001166:	74bb      	strb	r3, [r7, #18]
    	        			        name[3]='\0';
20001168:	f04f 0300 	mov.w	r3, #0
2000116c:	74fb      	strb	r3, [r7, #19]
    	        			        MSS_UART_polled_tx_string(gp_my_uart, name);
2000116e:	f243 0394 	movw	r3, #12436	; 0x3094
20001172:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001176:	681a      	ldr	r2, [r3, #0]
20001178:	f107 0310 	add.w	r3, r7, #16
2000117c:	4610      	mov	r0, r2
2000117e:	4619      	mov	r1, r3
20001180:	f000 fbee 	bl	20001960 <MSS_UART_polled_tx_string>
    	        			    }
    	        			if(i==2)
20001184:	69fb      	ldr	r3, [r7, #28]
20001186:	2b02      	cmp	r3, #2
20001188:	d116      	bne.n	200011b8 <main+0x3ac>
    	        			    {
    	        			        name[0]='v';
2000118a:	f04f 0376 	mov.w	r3, #118	; 0x76
2000118e:	743b      	strb	r3, [r7, #16]
    	        			        name[1]='0';
20001190:	f04f 0330 	mov.w	r3, #48	; 0x30
20001194:	747b      	strb	r3, [r7, #17]
    	        			        name[2]='=';
20001196:	f04f 033d 	mov.w	r3, #61	; 0x3d
2000119a:	74bb      	strb	r3, [r7, #18]
    	        			        name[3]='\0';
2000119c:	f04f 0300 	mov.w	r3, #0
200011a0:	74fb      	strb	r3, [r7, #19]
    	        			        MSS_UART_polled_tx_string(gp_my_uart, name);
200011a2:	f243 0394 	movw	r3, #12436	; 0x3094
200011a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200011aa:	681a      	ldr	r2, [r3, #0]
200011ac:	f107 0310 	add.w	r3, r7, #16
200011b0:	4610      	mov	r0, r2
200011b2:	4619      	mov	r1, r3
200011b4:	f000 fbd4 	bl	20001960 <MSS_UART_polled_tx_string>
    	        			    }
    	        		    if(i==3)
200011b8:	69fb      	ldr	r3, [r7, #28]
200011ba:	2b03      	cmp	r3, #3
200011bc:	d116      	bne.n	200011ec <main+0x3e0>
    	        			    {
    	        			        name[0]='v';
200011be:	f04f 0376 	mov.w	r3, #118	; 0x76
200011c2:	743b      	strb	r3, [r7, #16]
    	        			        name[1]='1';
200011c4:	f04f 0331 	mov.w	r3, #49	; 0x31
200011c8:	747b      	strb	r3, [r7, #17]
    	        			        name[2]='=';
200011ca:	f04f 033d 	mov.w	r3, #61	; 0x3d
200011ce:	74bb      	strb	r3, [r7, #18]
    	        			        name[3]='\0';
200011d0:	f04f 0300 	mov.w	r3, #0
200011d4:	74fb      	strb	r3, [r7, #19]
    	        			        MSS_UART_polled_tx_string(gp_my_uart, name);
200011d6:	f243 0394 	movw	r3, #12436	; 0x3094
200011da:	f2c2 0300 	movt	r3, #8192	; 0x2000
200011de:	681a      	ldr	r2, [r3, #0]
200011e0:	f107 0310 	add.w	r3, r7, #16
200011e4:	4610      	mov	r0, r2
200011e6:	4619      	mov	r1, r3
200011e8:	f000 fbba 	bl	20001960 <MSS_UART_polled_tx_string>
    	        			    }
    	        			if(i==4)
200011ec:	69fb      	ldr	r3, [r7, #28]
200011ee:	2b04      	cmp	r3, #4
200011f0:	d116      	bne.n	20001220 <main+0x414>
    							{
    								name[0]='a';
200011f2:	f04f 0361 	mov.w	r3, #97	; 0x61
200011f6:	743b      	strb	r3, [r7, #16]
    								name[1]='0';
200011f8:	f04f 0330 	mov.w	r3, #48	; 0x30
200011fc:	747b      	strb	r3, [r7, #17]
    								name[2]='=';
200011fe:	f04f 033d 	mov.w	r3, #61	; 0x3d
20001202:	74bb      	strb	r3, [r7, #18]
    								name[3]='\0';
20001204:	f04f 0300 	mov.w	r3, #0
20001208:	74fb      	strb	r3, [r7, #19]
    								MSS_UART_polled_tx_string(gp_my_uart, name);
2000120a:	f243 0394 	movw	r3, #12436	; 0x3094
2000120e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001212:	681a      	ldr	r2, [r3, #0]
20001214:	f107 0310 	add.w	r3, r7, #16
20001218:	4610      	mov	r0, r2
2000121a:	4619      	mov	r1, r3
2000121c:	f000 fba0 	bl	20001960 <MSS_UART_polled_tx_string>
    							}
    	        			if(i==5)
20001220:	69fb      	ldr	r3, [r7, #28]
20001222:	2b05      	cmp	r3, #5
20001224:	d116      	bne.n	20001254 <main+0x448>
    							{
    								name[0]='a';
20001226:	f04f 0361 	mov.w	r3, #97	; 0x61
2000122a:	743b      	strb	r3, [r7, #16]
    								name[1]='1';
2000122c:	f04f 0331 	mov.w	r3, #49	; 0x31
20001230:	747b      	strb	r3, [r7, #17]
    								name[2]='=';
20001232:	f04f 033d 	mov.w	r3, #61	; 0x3d
20001236:	74bb      	strb	r3, [r7, #18]
    								name[3]='\0';
20001238:	f04f 0300 	mov.w	r3, #0
2000123c:	74fb      	strb	r3, [r7, #19]
    								MSS_UART_polled_tx_string(gp_my_uart, name);
2000123e:	f243 0394 	movw	r3, #12436	; 0x3094
20001242:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001246:	681a      	ldr	r2, [r3, #0]
20001248:	f107 0310 	add.w	r3, r7, #16
2000124c:	4610      	mov	r0, r2
2000124e:	4619      	mov	r1, r3
20001250:	f000 fb86 	bl	20001960 <MSS_UART_polled_tx_string>
    							}
    	        			if(i==6)
20001254:	69fb      	ldr	r3, [r7, #28]
20001256:	2b06      	cmp	r3, #6
20001258:	d116      	bne.n	20001288 <main+0x47c>
    							{
    								name[0]='a';
2000125a:	f04f 0361 	mov.w	r3, #97	; 0x61
2000125e:	743b      	strb	r3, [r7, #16]
    								name[1]='2';
20001260:	f04f 0332 	mov.w	r3, #50	; 0x32
20001264:	747b      	strb	r3, [r7, #17]
    								name[2]='=';
20001266:	f04f 033d 	mov.w	r3, #61	; 0x3d
2000126a:	74bb      	strb	r3, [r7, #18]
    								name[3]='\0';
2000126c:	f04f 0300 	mov.w	r3, #0
20001270:	74fb      	strb	r3, [r7, #19]
    								MSS_UART_polled_tx_string(gp_my_uart, name);
20001272:	f243 0394 	movw	r3, #12436	; 0x3094
20001276:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000127a:	681a      	ldr	r2, [r3, #0]
2000127c:	f107 0310 	add.w	r3, r7, #16
20001280:	4610      	mov	r0, r2
20001282:	4619      	mov	r1, r3
20001284:	f000 fb6c 	bl	20001960 <MSS_UART_polled_tx_string>
    							}
    	        			if(i==7)
20001288:	69fb      	ldr	r3, [r7, #28]
2000128a:	2b07      	cmp	r3, #7
2000128c:	d116      	bne.n	200012bc <main+0x4b0>
    							{
    								name[0]='a';
2000128e:	f04f 0361 	mov.w	r3, #97	; 0x61
20001292:	743b      	strb	r3, [r7, #16]
    								name[1]='3';
20001294:	f04f 0333 	mov.w	r3, #51	; 0x33
20001298:	747b      	strb	r3, [r7, #17]
    								name[2]='=';
2000129a:	f04f 033d 	mov.w	r3, #61	; 0x3d
2000129e:	74bb      	strb	r3, [r7, #18]
    								name[3]='\0';
200012a0:	f04f 0300 	mov.w	r3, #0
200012a4:	74fb      	strb	r3, [r7, #19]
    								MSS_UART_polled_tx_string(gp_my_uart, name);
200012a6:	f243 0394 	movw	r3, #12436	; 0x3094
200012aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
200012ae:	681a      	ldr	r2, [r3, #0]
200012b0:	f107 0310 	add.w	r3, r7, #16
200012b4:	4610      	mov	r0, r2
200012b6:	4619      	mov	r1, r3
200012b8:	f000 fb52 	bl	20001960 <MSS_UART_polled_tx_string>
    							}
    	        			if(i==8)
200012bc:	69fb      	ldr	r3, [r7, #28]
200012be:	2b08      	cmp	r3, #8
200012c0:	d116      	bne.n	200012f0 <main+0x4e4>
    							{
    								name[0]='t';
200012c2:	f04f 0374 	mov.w	r3, #116	; 0x74
200012c6:	743b      	strb	r3, [r7, #16]
    								name[1]='0';
200012c8:	f04f 0330 	mov.w	r3, #48	; 0x30
200012cc:	747b      	strb	r3, [r7, #17]
    								name[2]='=';
200012ce:	f04f 033d 	mov.w	r3, #61	; 0x3d
200012d2:	74bb      	strb	r3, [r7, #18]
    								name[3]='\0';
200012d4:	f04f 0300 	mov.w	r3, #0
200012d8:	74fb      	strb	r3, [r7, #19]
    								MSS_UART_polled_tx_string(gp_my_uart, name);
200012da:	f243 0394 	movw	r3, #12436	; 0x3094
200012de:	f2c2 0300 	movt	r3, #8192	; 0x2000
200012e2:	681a      	ldr	r2, [r3, #0]
200012e4:	f107 0310 	add.w	r3, r7, #16
200012e8:	4610      	mov	r0, r2
200012ea:	4619      	mov	r1, r3
200012ec:	f000 fb38 	bl	20001960 <MSS_UART_polled_tx_string>
    							}
    	        			if(i==9)
200012f0:	69fb      	ldr	r3, [r7, #28]
200012f2:	2b09      	cmp	r3, #9
200012f4:	d116      	bne.n	20001324 <main+0x518>
    							{
    								name[0]='t';
200012f6:	f04f 0374 	mov.w	r3, #116	; 0x74
200012fa:	743b      	strb	r3, [r7, #16]
    								name[1]='1';
200012fc:	f04f 0331 	mov.w	r3, #49	; 0x31
20001300:	747b      	strb	r3, [r7, #17]
    								name[2]='=';
20001302:	f04f 033d 	mov.w	r3, #61	; 0x3d
20001306:	74bb      	strb	r3, [r7, #18]
    								name[3]='\0';
20001308:	f04f 0300 	mov.w	r3, #0
2000130c:	74fb      	strb	r3, [r7, #19]
    								MSS_UART_polled_tx_string(gp_my_uart, name);
2000130e:	f243 0394 	movw	r3, #12436	; 0x3094
20001312:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001316:	681a      	ldr	r2, [r3, #0]
20001318:	f107 0310 	add.w	r3, r7, #16
2000131c:	4610      	mov	r0, r2
2000131e:	4619      	mov	r1, r3
20001320:	f000 fb1e 	bl	20001960 <MSS_UART_polled_tx_string>
    							}
    	        			if(i==10)
20001324:	69fb      	ldr	r3, [r7, #28]
20001326:	2b0a      	cmp	r3, #10
20001328:	d116      	bne.n	20001358 <main+0x54c>
    							{
    								name[0]='t';
2000132a:	f04f 0374 	mov.w	r3, #116	; 0x74
2000132e:	743b      	strb	r3, [r7, #16]
    								name[1]='2';
20001330:	f04f 0332 	mov.w	r3, #50	; 0x32
20001334:	747b      	strb	r3, [r7, #17]
    								name[2]='=';
20001336:	f04f 033d 	mov.w	r3, #61	; 0x3d
2000133a:	74bb      	strb	r3, [r7, #18]
    								name[3]='\0';
2000133c:	f04f 0300 	mov.w	r3, #0
20001340:	74fb      	strb	r3, [r7, #19]
    								MSS_UART_polled_tx_string(gp_my_uart, name);
20001342:	f243 0394 	movw	r3, #12436	; 0x3094
20001346:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000134a:	681a      	ldr	r2, [r3, #0]
2000134c:	f107 0310 	add.w	r3, r7, #16
20001350:	4610      	mov	r0, r2
20001352:	4619      	mov	r1, r3
20001354:	f000 fb04 	bl	20001960 <MSS_UART_polled_tx_string>
    							}
    	        			if(i==11)
20001358:	69fb      	ldr	r3, [r7, #28]
2000135a:	2b0b      	cmp	r3, #11
2000135c:	d116      	bne.n	2000138c <main+0x580>
    							{
    								name[0]='t';
2000135e:	f04f 0374 	mov.w	r3, #116	; 0x74
20001362:	743b      	strb	r3, [r7, #16]
    								name[1]='3';
20001364:	f04f 0333 	mov.w	r3, #51	; 0x33
20001368:	747b      	strb	r3, [r7, #17]
    								name[2]='=';
2000136a:	f04f 033d 	mov.w	r3, #61	; 0x3d
2000136e:	74bb      	strb	r3, [r7, #18]
    								name[3]='\0';
20001370:	f04f 0300 	mov.w	r3, #0
20001374:	74fb      	strb	r3, [r7, #19]
    								MSS_UART_polled_tx_string(gp_my_uart, name);
20001376:	f243 0394 	movw	r3, #12436	; 0x3094
2000137a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000137e:	681a      	ldr	r2, [r3, #0]
20001380:	f107 0310 	add.w	r3, r7, #16
20001384:	4610      	mov	r0, r2
20001386:	4619      	mov	r1, r3
20001388:	f000 faea 	bl	20001960 <MSS_UART_polled_tx_string>
    							}
    	        			if(i==12)
2000138c:	69fb      	ldr	r3, [r7, #28]
2000138e:	2b0c      	cmp	r3, #12
20001390:	d116      	bne.n	200013c0 <main+0x5b4>
    							{
    								name[0]='t';
20001392:	f04f 0374 	mov.w	r3, #116	; 0x74
20001396:	743b      	strb	r3, [r7, #16]
    								name[1]='4';
20001398:	f04f 0334 	mov.w	r3, #52	; 0x34
2000139c:	747b      	strb	r3, [r7, #17]
    								name[2]='=';
2000139e:	f04f 033d 	mov.w	r3, #61	; 0x3d
200013a2:	74bb      	strb	r3, [r7, #18]
    								name[3]='\0';
200013a4:	f04f 0300 	mov.w	r3, #0
200013a8:	74fb      	strb	r3, [r7, #19]
    								MSS_UART_polled_tx_string(gp_my_uart, name);
200013aa:	f243 0394 	movw	r3, #12436	; 0x3094
200013ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
200013b2:	681a      	ldr	r2, [r3, #0]
200013b4:	f107 0310 	add.w	r3, r7, #16
200013b8:	4610      	mov	r0, r2
200013ba:	4619      	mov	r1, r3
200013bc:	f000 fad0 	bl	20001960 <MSS_UART_polled_tx_string>
    							}
    	        			if(i==13)
200013c0:	69fb      	ldr	r3, [r7, #28]
200013c2:	2b0d      	cmp	r3, #13
200013c4:	d116      	bne.n	200013f4 <main+0x5e8>
    							{
    								name[0]='t';
200013c6:	f04f 0374 	mov.w	r3, #116	; 0x74
200013ca:	743b      	strb	r3, [r7, #16]
    								name[1]='5';
200013cc:	f04f 0335 	mov.w	r3, #53	; 0x35
200013d0:	747b      	strb	r3, [r7, #17]
    								name[2]='=';
200013d2:	f04f 033d 	mov.w	r3, #61	; 0x3d
200013d6:	74bb      	strb	r3, [r7, #18]
    								name[3]='\0';
200013d8:	f04f 0300 	mov.w	r3, #0
200013dc:	74fb      	strb	r3, [r7, #19]
    								MSS_UART_polled_tx_string(gp_my_uart, name);
200013de:	f243 0394 	movw	r3, #12436	; 0x3094
200013e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200013e6:	681a      	ldr	r2, [r3, #0]
200013e8:	f107 0310 	add.w	r3, r7, #16
200013ec:	4610      	mov	r0, r2
200013ee:	4619      	mov	r1, r3
200013f0:	f000 fab6 	bl	20001960 <MSS_UART_polled_tx_string>
    							}
    	        			if(i==14)
200013f4:	69fb      	ldr	r3, [r7, #28]
200013f6:	2b0e      	cmp	r3, #14
200013f8:	d116      	bne.n	20001428 <main+0x61c>
    							{
    								name[0]='t';
200013fa:	f04f 0374 	mov.w	r3, #116	; 0x74
200013fe:	743b      	strb	r3, [r7, #16]
    								name[1]='6';
20001400:	f04f 0336 	mov.w	r3, #54	; 0x36
20001404:	747b      	strb	r3, [r7, #17]
    								name[2]='=';
20001406:	f04f 033d 	mov.w	r3, #61	; 0x3d
2000140a:	74bb      	strb	r3, [r7, #18]
    								name[3]='\0';
2000140c:	f04f 0300 	mov.w	r3, #0
20001410:	74fb      	strb	r3, [r7, #19]
    								MSS_UART_polled_tx_string(gp_my_uart, name);
20001412:	f243 0394 	movw	r3, #12436	; 0x3094
20001416:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000141a:	681a      	ldr	r2, [r3, #0]
2000141c:	f107 0310 	add.w	r3, r7, #16
20001420:	4610      	mov	r0, r2
20001422:	4619      	mov	r1, r3
20001424:	f000 fa9c 	bl	20001960 <MSS_UART_polled_tx_string>
    							}
    	        			if(i==15)
20001428:	69fb      	ldr	r3, [r7, #28]
2000142a:	2b0f      	cmp	r3, #15
2000142c:	d116      	bne.n	2000145c <main+0x650>
    							{
    								name[0]='t';
2000142e:	f04f 0374 	mov.w	r3, #116	; 0x74
20001432:	743b      	strb	r3, [r7, #16]
    								name[1]='7';
20001434:	f04f 0337 	mov.w	r3, #55	; 0x37
20001438:	747b      	strb	r3, [r7, #17]
    								name[2]='=';
2000143a:	f04f 033d 	mov.w	r3, #61	; 0x3d
2000143e:	74bb      	strb	r3, [r7, #18]
    								name[3]='\0';
20001440:	f04f 0300 	mov.w	r3, #0
20001444:	74fb      	strb	r3, [r7, #19]
    								MSS_UART_polled_tx_string(gp_my_uart, name);
20001446:	f243 0394 	movw	r3, #12436	; 0x3094
2000144a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000144e:	681a      	ldr	r2, [r3, #0]
20001450:	f107 0310 	add.w	r3, r7, #16
20001454:	4610      	mov	r0, r2
20001456:	4619      	mov	r1, r3
20001458:	f000 fa82 	bl	20001960 <MSS_UART_polled_tx_string>
    							}
    	        			if(i==16)
2000145c:	69fb      	ldr	r3, [r7, #28]
2000145e:	2b10      	cmp	r3, #16
20001460:	d116      	bne.n	20001490 <main+0x684>
    							{
    								name[0]='s';
20001462:	f04f 0373 	mov.w	r3, #115	; 0x73
20001466:	743b      	strb	r3, [r7, #16]
    								name[1]='0';
20001468:	f04f 0330 	mov.w	r3, #48	; 0x30
2000146c:	747b      	strb	r3, [r7, #17]
    								name[2]='=';
2000146e:	f04f 033d 	mov.w	r3, #61	; 0x3d
20001472:	74bb      	strb	r3, [r7, #18]
    								name[3]='\0';
20001474:	f04f 0300 	mov.w	r3, #0
20001478:	74fb      	strb	r3, [r7, #19]
    								MSS_UART_polled_tx_string(gp_my_uart, name);
2000147a:	f243 0394 	movw	r3, #12436	; 0x3094
2000147e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001482:	681a      	ldr	r2, [r3, #0]
20001484:	f107 0310 	add.w	r3, r7, #16
20001488:	4610      	mov	r0, r2
2000148a:	4619      	mov	r1, r3
2000148c:	f000 fa68 	bl	20001960 <MSS_UART_polled_tx_string>
    							}
    	        			if(i==17)
20001490:	69fb      	ldr	r3, [r7, #28]
20001492:	2b11      	cmp	r3, #17
20001494:	d116      	bne.n	200014c4 <main+0x6b8>
    							{
    								name[0]='s';
20001496:	f04f 0373 	mov.w	r3, #115	; 0x73
2000149a:	743b      	strb	r3, [r7, #16]
    								name[1]='1';
2000149c:	f04f 0331 	mov.w	r3, #49	; 0x31
200014a0:	747b      	strb	r3, [r7, #17]
    								name[2]='=';
200014a2:	f04f 033d 	mov.w	r3, #61	; 0x3d
200014a6:	74bb      	strb	r3, [r7, #18]
    								name[3]='\0';
200014a8:	f04f 0300 	mov.w	r3, #0
200014ac:	74fb      	strb	r3, [r7, #19]
    								MSS_UART_polled_tx_string(gp_my_uart, name);
200014ae:	f243 0394 	movw	r3, #12436	; 0x3094
200014b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200014b6:	681a      	ldr	r2, [r3, #0]
200014b8:	f107 0310 	add.w	r3, r7, #16
200014bc:	4610      	mov	r0, r2
200014be:	4619      	mov	r1, r3
200014c0:	f000 fa4e 	bl	20001960 <MSS_UART_polled_tx_string>
    							}
    	        			if(i==18)
200014c4:	69fb      	ldr	r3, [r7, #28]
200014c6:	2b12      	cmp	r3, #18
200014c8:	d116      	bne.n	200014f8 <main+0x6ec>
    							{
    								name[0]='s';
200014ca:	f04f 0373 	mov.w	r3, #115	; 0x73
200014ce:	743b      	strb	r3, [r7, #16]
    								name[1]='2';
200014d0:	f04f 0332 	mov.w	r3, #50	; 0x32
200014d4:	747b      	strb	r3, [r7, #17]
    								name[2]='=';
200014d6:	f04f 033d 	mov.w	r3, #61	; 0x3d
200014da:	74bb      	strb	r3, [r7, #18]
    								name[3]='\0';
200014dc:	f04f 0300 	mov.w	r3, #0
200014e0:	74fb      	strb	r3, [r7, #19]
    								MSS_UART_polled_tx_string(gp_my_uart, name);
200014e2:	f243 0394 	movw	r3, #12436	; 0x3094
200014e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200014ea:	681a      	ldr	r2, [r3, #0]
200014ec:	f107 0310 	add.w	r3, r7, #16
200014f0:	4610      	mov	r0, r2
200014f2:	4619      	mov	r1, r3
200014f4:	f000 fa34 	bl	20001960 <MSS_UART_polled_tx_string>
    							}
    	        			if(i==19)
200014f8:	69fb      	ldr	r3, [r7, #28]
200014fa:	2b13      	cmp	r3, #19
200014fc:	d116      	bne.n	2000152c <main+0x720>
    							{
    								name[0]='s';
200014fe:	f04f 0373 	mov.w	r3, #115	; 0x73
20001502:	743b      	strb	r3, [r7, #16]
    								name[1]='3';
20001504:	f04f 0333 	mov.w	r3, #51	; 0x33
20001508:	747b      	strb	r3, [r7, #17]
    								name[2]='=';
2000150a:	f04f 033d 	mov.w	r3, #61	; 0x3d
2000150e:	74bb      	strb	r3, [r7, #18]
    								name[3]='\0';
20001510:	f04f 0300 	mov.w	r3, #0
20001514:	74fb      	strb	r3, [r7, #19]
    								MSS_UART_polled_tx_string(gp_my_uart, name);
20001516:	f243 0394 	movw	r3, #12436	; 0x3094
2000151a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000151e:	681a      	ldr	r2, [r3, #0]
20001520:	f107 0310 	add.w	r3, r7, #16
20001524:	4610      	mov	r0, r2
20001526:	4619      	mov	r1, r3
20001528:	f000 fa1a 	bl	20001960 <MSS_UART_polled_tx_string>
    							}
    	        			if(i==20)
2000152c:	69fb      	ldr	r3, [r7, #28]
2000152e:	2b14      	cmp	r3, #20
20001530:	d116      	bne.n	20001560 <main+0x754>
    							{
    								name[0]='s';
20001532:	f04f 0373 	mov.w	r3, #115	; 0x73
20001536:	743b      	strb	r3, [r7, #16]
    								name[1]='4';
20001538:	f04f 0334 	mov.w	r3, #52	; 0x34
2000153c:	747b      	strb	r3, [r7, #17]
    								name[2]='=';
2000153e:	f04f 033d 	mov.w	r3, #61	; 0x3d
20001542:	74bb      	strb	r3, [r7, #18]
    								name[3]='\0';
20001544:	f04f 0300 	mov.w	r3, #0
20001548:	74fb      	strb	r3, [r7, #19]
    								MSS_UART_polled_tx_string(gp_my_uart, name);
2000154a:	f243 0394 	movw	r3, #12436	; 0x3094
2000154e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001552:	681a      	ldr	r2, [r3, #0]
20001554:	f107 0310 	add.w	r3, r7, #16
20001558:	4610      	mov	r0, r2
2000155a:	4619      	mov	r1, r3
2000155c:	f000 fa00 	bl	20001960 <MSS_UART_polled_tx_string>
    							}
    	        			if(i==21)
20001560:	69fb      	ldr	r3, [r7, #28]
20001562:	2b15      	cmp	r3, #21
20001564:	d116      	bne.n	20001594 <main+0x788>
    							{
    								name[0]='s';
20001566:	f04f 0373 	mov.w	r3, #115	; 0x73
2000156a:	743b      	strb	r3, [r7, #16]
    								name[1]='5';
2000156c:	f04f 0335 	mov.w	r3, #53	; 0x35
20001570:	747b      	strb	r3, [r7, #17]
    								name[2]='=';
20001572:	f04f 033d 	mov.w	r3, #61	; 0x3d
20001576:	74bb      	strb	r3, [r7, #18]
    								name[3]='\0';
20001578:	f04f 0300 	mov.w	r3, #0
2000157c:	74fb      	strb	r3, [r7, #19]
    								MSS_UART_polled_tx_string(gp_my_uart, name);
2000157e:	f243 0394 	movw	r3, #12436	; 0x3094
20001582:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001586:	681a      	ldr	r2, [r3, #0]
20001588:	f107 0310 	add.w	r3, r7, #16
2000158c:	4610      	mov	r0, r2
2000158e:	4619      	mov	r1, r3
20001590:	f000 f9e6 	bl	20001960 <MSS_UART_polled_tx_string>
    							}
    	        			if(i==22)
20001594:	69fb      	ldr	r3, [r7, #28]
20001596:	2b16      	cmp	r3, #22
20001598:	d116      	bne.n	200015c8 <main+0x7bc>
    							{
    								name[0]='s';
2000159a:	f04f 0373 	mov.w	r3, #115	; 0x73
2000159e:	743b      	strb	r3, [r7, #16]
    								name[1]='6';
200015a0:	f04f 0336 	mov.w	r3, #54	; 0x36
200015a4:	747b      	strb	r3, [r7, #17]
    								name[2]='=';
200015a6:	f04f 033d 	mov.w	r3, #61	; 0x3d
200015aa:	74bb      	strb	r3, [r7, #18]
    								name[3]='\0';
200015ac:	f04f 0300 	mov.w	r3, #0
200015b0:	74fb      	strb	r3, [r7, #19]
    								MSS_UART_polled_tx_string(gp_my_uart, name);
200015b2:	f243 0394 	movw	r3, #12436	; 0x3094
200015b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200015ba:	681a      	ldr	r2, [r3, #0]
200015bc:	f107 0310 	add.w	r3, r7, #16
200015c0:	4610      	mov	r0, r2
200015c2:	4619      	mov	r1, r3
200015c4:	f000 f9cc 	bl	20001960 <MSS_UART_polled_tx_string>
    							}
    	        			if(i==23)
200015c8:	69fb      	ldr	r3, [r7, #28]
200015ca:	2b17      	cmp	r3, #23
200015cc:	d116      	bne.n	200015fc <main+0x7f0>
    							{
    								name[0]='s';
200015ce:	f04f 0373 	mov.w	r3, #115	; 0x73
200015d2:	743b      	strb	r3, [r7, #16]
    								name[1]='7';
200015d4:	f04f 0337 	mov.w	r3, #55	; 0x37
200015d8:	747b      	strb	r3, [r7, #17]
    								name[2]='=';
200015da:	f04f 033d 	mov.w	r3, #61	; 0x3d
200015de:	74bb      	strb	r3, [r7, #18]
    								name[3]='\0';
200015e0:	f04f 0300 	mov.w	r3, #0
200015e4:	74fb      	strb	r3, [r7, #19]
    								MSS_UART_polled_tx_string(gp_my_uart, name);
200015e6:	f243 0394 	movw	r3, #12436	; 0x3094
200015ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
200015ee:	681a      	ldr	r2, [r3, #0]
200015f0:	f107 0310 	add.w	r3, r7, #16
200015f4:	4610      	mov	r0, r2
200015f6:	4619      	mov	r1, r3
200015f8:	f000 f9b2 	bl	20001960 <MSS_UART_polled_tx_string>
    							}
    	        			if(i==24)
200015fc:	69fb      	ldr	r3, [r7, #28]
200015fe:	2b18      	cmp	r3, #24
20001600:	d116      	bne.n	20001630 <main+0x824>
    							{
    								name[0]='t';
20001602:	f04f 0374 	mov.w	r3, #116	; 0x74
20001606:	743b      	strb	r3, [r7, #16]
    								name[1]='8';
20001608:	f04f 0338 	mov.w	r3, #56	; 0x38
2000160c:	747b      	strb	r3, [r7, #17]
    								name[2]='=';
2000160e:	f04f 033d 	mov.w	r3, #61	; 0x3d
20001612:	74bb      	strb	r3, [r7, #18]
    								name[3]='\0';
20001614:	f04f 0300 	mov.w	r3, #0
20001618:	74fb      	strb	r3, [r7, #19]
    								MSS_UART_polled_tx_string(gp_my_uart, name);
2000161a:	f243 0394 	movw	r3, #12436	; 0x3094
2000161e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001622:	681a      	ldr	r2, [r3, #0]
20001624:	f107 0310 	add.w	r3, r7, #16
20001628:	4610      	mov	r0, r2
2000162a:	4619      	mov	r1, r3
2000162c:	f000 f998 	bl	20001960 <MSS_UART_polled_tx_string>
    							}
    	        			if(i==25)
20001630:	69fb      	ldr	r3, [r7, #28]
20001632:	2b19      	cmp	r3, #25
20001634:	d116      	bne.n	20001664 <main+0x858>
    							{
    								name[0]='t';
20001636:	f04f 0374 	mov.w	r3, #116	; 0x74
2000163a:	743b      	strb	r3, [r7, #16]
    								name[1]='9';
2000163c:	f04f 0339 	mov.w	r3, #57	; 0x39
20001640:	747b      	strb	r3, [r7, #17]
    								name[2]='=';
20001642:	f04f 033d 	mov.w	r3, #61	; 0x3d
20001646:	74bb      	strb	r3, [r7, #18]
    								name[3]='\0';
20001648:	f04f 0300 	mov.w	r3, #0
2000164c:	74fb      	strb	r3, [r7, #19]
    								MSS_UART_polled_tx_string(gp_my_uart, name);
2000164e:	f243 0394 	movw	r3, #12436	; 0x3094
20001652:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001656:	681a      	ldr	r2, [r3, #0]
20001658:	f107 0310 	add.w	r3, r7, #16
2000165c:	4610      	mov	r0, r2
2000165e:	4619      	mov	r1, r3
20001660:	f000 f97e 	bl	20001960 <MSS_UART_polled_tx_string>
    							}
    	        			if(i==26)
20001664:	69fb      	ldr	r3, [r7, #28]
20001666:	2b1a      	cmp	r3, #26
20001668:	d116      	bne.n	20001698 <main+0x88c>
    							{
    								name[0]='k';
2000166a:	f04f 036b 	mov.w	r3, #107	; 0x6b
2000166e:	743b      	strb	r3, [r7, #16]
    								name[1]='0';
20001670:	f04f 0330 	mov.w	r3, #48	; 0x30
20001674:	747b      	strb	r3, [r7, #17]
    								name[2]='=';
20001676:	f04f 033d 	mov.w	r3, #61	; 0x3d
2000167a:	74bb      	strb	r3, [r7, #18]
    								name[3]='\0';
2000167c:	f04f 0300 	mov.w	r3, #0
20001680:	74fb      	strb	r3, [r7, #19]
    								MSS_UART_polled_tx_string(gp_my_uart, name);
20001682:	f243 0394 	movw	r3, #12436	; 0x3094
20001686:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000168a:	681a      	ldr	r2, [r3, #0]
2000168c:	f107 0310 	add.w	r3, r7, #16
20001690:	4610      	mov	r0, r2
20001692:	4619      	mov	r1, r3
20001694:	f000 f964 	bl	20001960 <MSS_UART_polled_tx_string>
    							}
    	        			if(i==27)
20001698:	69fb      	ldr	r3, [r7, #28]
2000169a:	2b1b      	cmp	r3, #27
2000169c:	d116      	bne.n	200016cc <main+0x8c0>
    							{
    								name[0]='k';
2000169e:	f04f 036b 	mov.w	r3, #107	; 0x6b
200016a2:	743b      	strb	r3, [r7, #16]
    								name[1]='1';
200016a4:	f04f 0331 	mov.w	r3, #49	; 0x31
200016a8:	747b      	strb	r3, [r7, #17]
    								name[2]='=';
200016aa:	f04f 033d 	mov.w	r3, #61	; 0x3d
200016ae:	74bb      	strb	r3, [r7, #18]
    								name[3]='\0';
200016b0:	f04f 0300 	mov.w	r3, #0
200016b4:	74fb      	strb	r3, [r7, #19]
    								MSS_UART_polled_tx_string(gp_my_uart, name);
200016b6:	f243 0394 	movw	r3, #12436	; 0x3094
200016ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
200016be:	681a      	ldr	r2, [r3, #0]
200016c0:	f107 0310 	add.w	r3, r7, #16
200016c4:	4610      	mov	r0, r2
200016c6:	4619      	mov	r1, r3
200016c8:	f000 f94a 	bl	20001960 <MSS_UART_polled_tx_string>
    							}
    	        			if(i==28)
200016cc:	69fb      	ldr	r3, [r7, #28]
200016ce:	2b1c      	cmp	r3, #28
200016d0:	d116      	bne.n	20001700 <main+0x8f4>
    							{
    								name[0]='g';
200016d2:	f04f 0367 	mov.w	r3, #103	; 0x67
200016d6:	743b      	strb	r3, [r7, #16]
    								name[1]='p';
200016d8:	f04f 0370 	mov.w	r3, #112	; 0x70
200016dc:	747b      	strb	r3, [r7, #17]
    								name[2]='=';
200016de:	f04f 033d 	mov.w	r3, #61	; 0x3d
200016e2:	74bb      	strb	r3, [r7, #18]
    								name[3]='\0';
200016e4:	f04f 0300 	mov.w	r3, #0
200016e8:	74fb      	strb	r3, [r7, #19]
    								MSS_UART_polled_tx_string(gp_my_uart, name);
200016ea:	f243 0394 	movw	r3, #12436	; 0x3094
200016ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
200016f2:	681a      	ldr	r2, [r3, #0]
200016f4:	f107 0310 	add.w	r3, r7, #16
200016f8:	4610      	mov	r0, r2
200016fa:	4619      	mov	r1, r3
200016fc:	f000 f930 	bl	20001960 <MSS_UART_polled_tx_string>
    							}
    	        			if(i==29)
20001700:	69fb      	ldr	r3, [r7, #28]
20001702:	2b1d      	cmp	r3, #29
20001704:	d116      	bne.n	20001734 <main+0x928>
    							{
    								name[0]='s';
20001706:	f04f 0373 	mov.w	r3, #115	; 0x73
2000170a:	743b      	strb	r3, [r7, #16]
    								name[1]='p';
2000170c:	f04f 0370 	mov.w	r3, #112	; 0x70
20001710:	747b      	strb	r3, [r7, #17]
    								name[2]='=';
20001712:	f04f 033d 	mov.w	r3, #61	; 0x3d
20001716:	74bb      	strb	r3, [r7, #18]
    								name[3]='\0';
20001718:	f04f 0300 	mov.w	r3, #0
2000171c:	74fb      	strb	r3, [r7, #19]
    								MSS_UART_polled_tx_string(gp_my_uart, name);
2000171e:	f243 0394 	movw	r3, #12436	; 0x3094
20001722:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001726:	681a      	ldr	r2, [r3, #0]
20001728:	f107 0310 	add.w	r3, r7, #16
2000172c:	4610      	mov	r0, r2
2000172e:	4619      	mov	r1, r3
20001730:	f000 f916 	bl	20001960 <MSS_UART_polled_tx_string>
    							}
    	        			if(i==30)
20001734:	69fb      	ldr	r3, [r7, #28]
20001736:	2b1e      	cmp	r3, #30
20001738:	d116      	bne.n	20001768 <main+0x95c>
    							{
    								name[0]='f';
2000173a:	f04f 0366 	mov.w	r3, #102	; 0x66
2000173e:	743b      	strb	r3, [r7, #16]
    								name[1]='p';
20001740:	f04f 0370 	mov.w	r3, #112	; 0x70
20001744:	747b      	strb	r3, [r7, #17]
    								name[2]='=';
20001746:	f04f 033d 	mov.w	r3, #61	; 0x3d
2000174a:	74bb      	strb	r3, [r7, #18]
    								name[3]='\0';
2000174c:	f04f 0300 	mov.w	r3, #0
20001750:	74fb      	strb	r3, [r7, #19]
    								MSS_UART_polled_tx_string(gp_my_uart, name);
20001752:	f243 0394 	movw	r3, #12436	; 0x3094
20001756:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000175a:	681a      	ldr	r2, [r3, #0]
2000175c:	f107 0310 	add.w	r3, r7, #16
20001760:	4610      	mov	r0, r2
20001762:	4619      	mov	r1, r3
20001764:	f000 f8fc 	bl	20001960 <MSS_UART_polled_tx_string>
    							}
    	        			if(i==31)
20001768:	69fb      	ldr	r3, [r7, #28]
2000176a:	2b1f      	cmp	r3, #31
2000176c:	d116      	bne.n	2000179c <main+0x990>
    							{
    								name[0]='r';
2000176e:	f04f 0372 	mov.w	r3, #114	; 0x72
20001772:	743b      	strb	r3, [r7, #16]
    								name[1]='a';
20001774:	f04f 0361 	mov.w	r3, #97	; 0x61
20001778:	747b      	strb	r3, [r7, #17]
    								name[2]='=';
2000177a:	f04f 033d 	mov.w	r3, #61	; 0x3d
2000177e:	74bb      	strb	r3, [r7, #18]
    								name[3]='\0';
20001780:	f04f 0300 	mov.w	r3, #0
20001784:	74fb      	strb	r3, [r7, #19]
    								MSS_UART_polled_tx_string(gp_my_uart, name);
20001786:	f243 0394 	movw	r3, #12436	; 0x3094
2000178a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000178e:	681a      	ldr	r2, [r3, #0]
20001790:	f107 0310 	add.w	r3, r7, #16
20001794:	4610      	mov	r0, r2
20001796:	4619      	mov	r1, r3
20001798:	f000 f8e2 	bl	20001960 <MSS_UART_polled_tx_string>
    							}
    	        			read_one_reg(i,reg_data);
2000179c:	69fb      	ldr	r3, [r7, #28]
2000179e:	b2da      	uxtb	r2, r3
200017a0:	f107 0318 	add.w	r3, r7, #24
200017a4:	4610      	mov	r0, r2
200017a6:	4619      	mov	r1, r3
200017a8:	f7ff fa6a 	bl	20000c80 <read_one_reg>
    	        			print_reg(reg_data);
200017ac:	f107 0318 	add.w	r3, r7, #24
200017b0:	4618      	mov	r0, r3
200017b2:	f7ff f843 	bl	2000083c <print_reg>
    clock;

    uint8_t reg_data[4];
    while (1)
    {
    	for(i=0;i<32;i++)
200017b6:	69fb      	ldr	r3, [r7, #28]
200017b8:	f103 0301 	add.w	r3, r3, #1
200017bc:	61fb      	str	r3, [r7, #28]
200017be:	69fb      	ldr	r3, [r7, #28]
200017c0:	2b1f      	cmp	r3, #31
200017c2:	f77f acab 	ble.w	2000111c <main+0x310>
    	        			print_reg(reg_data);
    	        			//show_reg(i);
    	        		}
    	//read_one_reg(0x02, reg_data);
    	//show_reg(reg_data);
    	clock_cpu;
200017c6:	f04f 000e 	mov.w	r0, #14
200017ca:	f04f 0101 	mov.w	r1, #1
200017ce:	f001 fa2b 	bl	20002c28 <MSS_GPIO_set_output>
200017d2:	f04f 000e 	mov.w	r0, #14
200017d6:	f04f 0100 	mov.w	r1, #0
200017da:	f001 fa25 	bl	20002c28 <MSS_GPIO_set_output>
    }
200017de:	e499      	b.n	20001114 <main+0x308>

200017e0 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
200017e0:	b480      	push	{r7}
200017e2:	b083      	sub	sp, #12
200017e4:	af00      	add	r7, sp, #0
200017e6:	4603      	mov	r3, r0
200017e8:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
200017ea:	f24e 1300 	movw	r3, #57600	; 0xe100
200017ee:	f2ce 0300 	movt	r3, #57344	; 0xe000
200017f2:	f997 2007 	ldrsb.w	r2, [r7, #7]
200017f6:	ea4f 1252 	mov.w	r2, r2, lsr #5
200017fa:	79f9      	ldrb	r1, [r7, #7]
200017fc:	f001 011f 	and.w	r1, r1, #31
20001800:	f04f 0001 	mov.w	r0, #1
20001804:	fa00 f101 	lsl.w	r1, r0, r1
20001808:	f102 0260 	add.w	r2, r2, #96	; 0x60
2000180c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20001810:	f107 070c 	add.w	r7, r7, #12
20001814:	46bd      	mov	sp, r7
20001816:	bc80      	pop	{r7}
20001818:	4770      	bx	lr
2000181a:	bf00      	nop

2000181c <set_bit_reg8>:
static __INLINE void set_bit_reg16(volatile uint16_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x1;
}
static __INLINE void set_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
2000181c:	b480      	push	{r7}
2000181e:	b083      	sub	sp, #12
20001820:	af00      	add	r7, sp, #0
20001822:	6078      	str	r0, [r7, #4]
20001824:	460b      	mov	r3, r1
20001826:	70fb      	strb	r3, [r7, #3]
    HW_REG_BIT(reg,bit) = 0x1;
20001828:	687b      	ldr	r3, [r7, #4]
2000182a:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
2000182e:	687b      	ldr	r3, [r7, #4]
20001830:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
20001834:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
20001838:	ea4f 1343 	mov.w	r3, r3, lsl #5
2000183c:	441a      	add	r2, r3
2000183e:	78fb      	ldrb	r3, [r7, #3]
20001840:	ea4f 0383 	mov.w	r3, r3, lsl #2
20001844:	4413      	add	r3, r2
20001846:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
2000184a:	f04f 0201 	mov.w	r2, #1
2000184e:	601a      	str	r2, [r3, #0]
}
20001850:	f107 070c 	add.w	r7, r7, #12
20001854:	46bd      	mov	sp, r7
20001856:	bc80      	pop	{r7}
20001858:	4770      	bx	lr
2000185a:	bf00      	nop

2000185c <clear_bit_reg8>:
static __INLINE void clear_bit_reg16(volatile uint16_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x0;
}
static __INLINE void clear_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
2000185c:	b480      	push	{r7}
2000185e:	b083      	sub	sp, #12
20001860:	af00      	add	r7, sp, #0
20001862:	6078      	str	r0, [r7, #4]
20001864:	460b      	mov	r3, r1
20001866:	70fb      	strb	r3, [r7, #3]
    HW_REG_BIT(reg,bit) = 0x0;
20001868:	687b      	ldr	r3, [r7, #4]
2000186a:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
2000186e:	687b      	ldr	r3, [r7, #4]
20001870:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
20001874:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
20001878:	ea4f 1343 	mov.w	r3, r3, lsl #5
2000187c:	441a      	add	r2, r3
2000187e:	78fb      	ldrb	r3, [r7, #3]
20001880:	ea4f 0383 	mov.w	r3, r3, lsl #2
20001884:	4413      	add	r3, r2
20001886:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
2000188a:	f04f 0200 	mov.w	r2, #0
2000188e:	601a      	str	r2, [r3, #0]
}
20001890:	f107 070c 	add.w	r7, r7, #12
20001894:	46bd      	mov	sp, r7
20001896:	bc80      	pop	{r7}
20001898:	4770      	bx	lr
2000189a:	bf00      	nop

2000189c <read_bit_reg8>:
static __INLINE uint8_t read_bit_reg16(volatile uint16_t * reg, uint8_t bit)
{
    return (HW_REG_BIT(reg,bit));
}
static __INLINE uint8_t read_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
2000189c:	b480      	push	{r7}
2000189e:	b083      	sub	sp, #12
200018a0:	af00      	add	r7, sp, #0
200018a2:	6078      	str	r0, [r7, #4]
200018a4:	460b      	mov	r3, r1
200018a6:	70fb      	strb	r3, [r7, #3]
    return (HW_REG_BIT(reg,bit));
200018a8:	687b      	ldr	r3, [r7, #4]
200018aa:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
200018ae:	687b      	ldr	r3, [r7, #4]
200018b0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
200018b4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
200018b8:	ea4f 1343 	mov.w	r3, r3, lsl #5
200018bc:	441a      	add	r2, r3
200018be:	78fb      	ldrb	r3, [r7, #3]
200018c0:	ea4f 0383 	mov.w	r3, r3, lsl #2
200018c4:	4413      	add	r3, r2
200018c6:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
200018ca:	681b      	ldr	r3, [r3, #0]
200018cc:	b2db      	uxtb	r3, r3
}
200018ce:	4618      	mov	r0, r3
200018d0:	f107 070c 	add.w	r7, r7, #12
200018d4:	46bd      	mov	sp, r7
200018d6:	bc80      	pop	{r7}
200018d8:	4770      	bx	lr
200018da:	bf00      	nop

200018dc <MSS_UART_init>:
(
    mss_uart_instance_t* this_uart, 
    uint32_t baud_rate,
    uint8_t line_config
)
{
200018dc:	b580      	push	{r7, lr}
200018de:	b084      	sub	sp, #16
200018e0:	af00      	add	r7, sp, #0
200018e2:	60f8      	str	r0, [r7, #12]
200018e4:	60b9      	str	r1, [r7, #8]
200018e6:	4613      	mov	r3, r2
200018e8:	71fb      	strb	r3, [r7, #7]
    /* The driver expects g_mss_uart0 and g_mss_uart1 to be the only
     * mss_uart_instance_t instances used to identify UART0 and UART1. */
    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
200018ea:	68fa      	ldr	r2, [r7, #12]
200018ec:	f243 13e4 	movw	r3, #12772	; 0x31e4
200018f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200018f4:	429a      	cmp	r2, r3
200018f6:	d007      	beq.n	20001908 <MSS_UART_init+0x2c>
200018f8:	68fa      	ldr	r2, [r7, #12]
200018fa:	f243 13a4 	movw	r3, #12708	; 0x31a4
200018fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001902:	429a      	cmp	r2, r3
20001904:	d000      	beq.n	20001908 <MSS_UART_init+0x2c>
20001906:	be00      	bkpt	0x0000

    /* Perform generic initialization */
    global_init(this_uart, baud_rate, line_config);
20001908:	79fb      	ldrb	r3, [r7, #7]
2000190a:	68f8      	ldr	r0, [r7, #12]
2000190c:	68b9      	ldr	r1, [r7, #8]
2000190e:	461a      	mov	r2, r3
20001910:	f000 f97c 	bl	20001c0c <global_init>

    /* Disable LIN mode */
    clear_bit_reg8(&this_uart->hw_reg->MM0, ELIN);
20001914:	68fb      	ldr	r3, [r7, #12]
20001916:	681b      	ldr	r3, [r3, #0]
20001918:	f103 0330 	add.w	r3, r3, #48	; 0x30
2000191c:	4618      	mov	r0, r3
2000191e:	f04f 0103 	mov.w	r1, #3
20001922:	f7ff ff9b 	bl	2000185c <clear_bit_reg8>

    /* Disable IrDA mode */
    clear_bit_reg8(&this_uart->hw_reg->MM1, EIRD);
20001926:	68fb      	ldr	r3, [r7, #12]
20001928:	681b      	ldr	r3, [r3, #0]
2000192a:	f103 0334 	add.w	r3, r3, #52	; 0x34
2000192e:	4618      	mov	r0, r3
20001930:	f04f 0102 	mov.w	r1, #2
20001934:	f7ff ff92 	bl	2000185c <clear_bit_reg8>

    /* Disable SmartCard Mode */
    clear_bit_reg8(&this_uart->hw_reg->MM2, EERR);
20001938:	68fb      	ldr	r3, [r7, #12]
2000193a:	681b      	ldr	r3, [r3, #0]
2000193c:	f103 0338 	add.w	r3, r3, #56	; 0x38
20001940:	4618      	mov	r0, r3
20001942:	f04f 0100 	mov.w	r1, #0
20001946:	f7ff ff89 	bl	2000185c <clear_bit_reg8>

    /* set default tx handler for automated TX using interrupt in USART mode */
    this_uart->tx_handler = default_tx_handler;
2000194a:	68fa      	ldr	r2, [r7, #12]
2000194c:	f242 03a5 	movw	r3, #8357	; 0x20a5
20001950:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001954:	6253      	str	r3, [r2, #36]	; 0x24
}
20001956:	f107 0710 	add.w	r7, r7, #16
2000195a:	46bd      	mov	sp, r7
2000195c:	bd80      	pop	{r7, pc}
2000195e:	bf00      	nop

20001960 <MSS_UART_polled_tx_string>:
MSS_UART_polled_tx_string
(
    mss_uart_instance_t * this_uart,
    const uint8_t * p_sz_string
)
{
20001960:	b480      	push	{r7}
20001962:	b087      	sub	sp, #28
20001964:	af00      	add	r7, sp, #0
20001966:	6078      	str	r0, [r7, #4]
20001968:	6039      	str	r1, [r7, #0]
    uint32_t char_idx = 0u;
2000196a:	f04f 0300 	mov.w	r3, #0
2000196e:	60fb      	str	r3, [r7, #12]
    uint32_t fill_size;
    uint8_t data_byte;
    uint8_t status;

    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
20001970:	687a      	ldr	r2, [r7, #4]
20001972:	f243 13e4 	movw	r3, #12772	; 0x31e4
20001976:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000197a:	429a      	cmp	r2, r3
2000197c:	d007      	beq.n	2000198e <MSS_UART_polled_tx_string+0x2e>
2000197e:	687a      	ldr	r2, [r7, #4]
20001980:	f243 13a4 	movw	r3, #12708	; 0x31a4
20001984:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001988:	429a      	cmp	r2, r3
2000198a:	d000      	beq.n	2000198e <MSS_UART_polled_tx_string+0x2e>
2000198c:	be00      	bkpt	0x0000
    ASSERT(p_sz_string != ((uint8_t *)0));
2000198e:	683b      	ldr	r3, [r7, #0]
20001990:	2b00      	cmp	r3, #0
20001992:	d100      	bne.n	20001996 <MSS_UART_polled_tx_string+0x36>
20001994:	be00      	bkpt	0x0000

    if(((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1)) &&
20001996:	687a      	ldr	r2, [r7, #4]
20001998:	f243 13e4 	movw	r3, #12772	; 0x31e4
2000199c:	f2c2 0300 	movt	r3, #8192	; 0x2000
200019a0:	429a      	cmp	r2, r3
200019a2:	d006      	beq.n	200019b2 <MSS_UART_polled_tx_string+0x52>
200019a4:	687a      	ldr	r2, [r7, #4]
200019a6:	f243 13a4 	movw	r3, #12708	; 0x31a4
200019aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
200019ae:	429a      	cmp	r2, r3
200019b0:	d137      	bne.n	20001a22 <MSS_UART_polled_tx_string+0xc2>
200019b2:	683b      	ldr	r3, [r7, #0]
200019b4:	2b00      	cmp	r3, #0
200019b6:	d034      	beq.n	20001a22 <MSS_UART_polled_tx_string+0xc2>
       (p_sz_string != ((uint8_t *)0)))
    {
        /* Get the first data byte from the input buffer */
        data_byte = p_sz_string[char_idx];
200019b8:	683a      	ldr	r2, [r7, #0]
200019ba:	68fb      	ldr	r3, [r7, #12]
200019bc:	4413      	add	r3, r2
200019be:	781b      	ldrb	r3, [r3, #0]
200019c0:	75bb      	strb	r3, [r7, #22]

        /* First check for the NULL terminator byte.
         * Then remain in this loop until the entire string in the input buffer
         * has been transferred to the UART.
         */
        while(0u != data_byte)
200019c2:	e02b      	b.n	20001a1c <MSS_UART_polled_tx_string+0xbc>
        {
            /* Wait until TX FIFO is empty. */
            do {
                status = this_uart->hw_reg->LSR;
200019c4:	687b      	ldr	r3, [r7, #4]
200019c6:	681b      	ldr	r3, [r3, #0]
200019c8:	7d1b      	ldrb	r3, [r3, #20]
200019ca:	75fb      	strb	r3, [r7, #23]
                this_uart->status |= status;
200019cc:	687b      	ldr	r3, [r7, #4]
200019ce:	7b5a      	ldrb	r2, [r3, #13]
200019d0:	7dfb      	ldrb	r3, [r7, #23]
200019d2:	ea42 0303 	orr.w	r3, r2, r3
200019d6:	b2da      	uxtb	r2, r3
200019d8:	687b      	ldr	r3, [r7, #4]
200019da:	735a      	strb	r2, [r3, #13]
            } while (0u == (status & MSS_UART_THRE));
200019dc:	7dfb      	ldrb	r3, [r7, #23]
200019de:	f003 0320 	and.w	r3, r3, #32
200019e2:	2b00      	cmp	r3, #0
200019e4:	d0ee      	beq.n	200019c4 <MSS_UART_polled_tx_string+0x64>

            /* Send bytes from the input buffer until the TX FIFO is full
             * or we reach the NULL terminator byte.
             */
            fill_size = 0u;
200019e6:	f04f 0300 	mov.w	r3, #0
200019ea:	613b      	str	r3, [r7, #16]
            while((0u != data_byte) && (fill_size < TX_FIFO_SIZE))
200019ec:	e010      	b.n	20001a10 <MSS_UART_polled_tx_string+0xb0>
            {
                /* Send the data byte */
                this_uart->hw_reg->THR = data_byte;
200019ee:	687b      	ldr	r3, [r7, #4]
200019f0:	681b      	ldr	r3, [r3, #0]
200019f2:	7dba      	ldrb	r2, [r7, #22]
200019f4:	701a      	strb	r2, [r3, #0]
                ++fill_size;
200019f6:	693b      	ldr	r3, [r7, #16]
200019f8:	f103 0301 	add.w	r3, r3, #1
200019fc:	613b      	str	r3, [r7, #16]
                char_idx++;
200019fe:	68fb      	ldr	r3, [r7, #12]
20001a00:	f103 0301 	add.w	r3, r3, #1
20001a04:	60fb      	str	r3, [r7, #12]
                /* Get the next data byte from the input buffer */
                data_byte = p_sz_string[char_idx];
20001a06:	683a      	ldr	r2, [r7, #0]
20001a08:	68fb      	ldr	r3, [r7, #12]
20001a0a:	4413      	add	r3, r2
20001a0c:	781b      	ldrb	r3, [r3, #0]
20001a0e:	75bb      	strb	r3, [r7, #22]

            /* Send bytes from the input buffer until the TX FIFO is full
             * or we reach the NULL terminator byte.
             */
            fill_size = 0u;
            while((0u != data_byte) && (fill_size < TX_FIFO_SIZE))
20001a10:	7dbb      	ldrb	r3, [r7, #22]
20001a12:	2b00      	cmp	r3, #0
20001a14:	d002      	beq.n	20001a1c <MSS_UART_polled_tx_string+0xbc>
20001a16:	693b      	ldr	r3, [r7, #16]
20001a18:	2b0f      	cmp	r3, #15
20001a1a:	d9e8      	bls.n	200019ee <MSS_UART_polled_tx_string+0x8e>

        /* First check for the NULL terminator byte.
         * Then remain in this loop until the entire string in the input buffer
         * has been transferred to the UART.
         */
        while(0u != data_byte)
20001a1c:	7dbb      	ldrb	r3, [r7, #22]
20001a1e:	2b00      	cmp	r3, #0
20001a20:	d1d0      	bne.n	200019c4 <MSS_UART_polled_tx_string+0x64>
                /* Get the next data byte from the input buffer */
                data_byte = p_sz_string[char_idx];
            }
        }
    }
}
20001a22:	f107 071c 	add.w	r7, r7, #28
20001a26:	46bd      	mov	sp, r7
20001a28:	bc80      	pop	{r7}
20001a2a:	4770      	bx	lr

20001a2c <UART0_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void UART0_IRQHandler(void)
#else
void UART0_IRQHandler(void)
#endif
{
20001a2c:	4668      	mov	r0, sp
20001a2e:	f020 0107 	bic.w	r1, r0, #7
20001a32:	468d      	mov	sp, r1
20001a34:	b589      	push	{r0, r3, r7, lr}
20001a36:	af00      	add	r7, sp, #0
    MSS_UART_isr(&g_mss_uart0);
20001a38:	f243 10e4 	movw	r0, #12772	; 0x31e4
20001a3c:	f2c2 0000 	movt	r0, #8192	; 0x2000
20001a40:	f000 fa1a 	bl	20001e78 <MSS_UART_isr>
}
20001a44:	46bd      	mov	sp, r7
20001a46:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20001a4a:	4685      	mov	sp, r0
20001a4c:	4770      	bx	lr
20001a4e:	bf00      	nop

20001a50 <UART1_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void UART1_IRQHandler(void)
#else
void UART1_IRQHandler(void)
#endif
{
20001a50:	4668      	mov	r0, sp
20001a52:	f020 0107 	bic.w	r1, r0, #7
20001a56:	468d      	mov	sp, r1
20001a58:	b589      	push	{r0, r3, r7, lr}
20001a5a:	af00      	add	r7, sp, #0
    MSS_UART_isr(&g_mss_uart1);
20001a5c:	f243 10a4 	movw	r0, #12708	; 0x31a4
20001a60:	f2c2 0000 	movt	r0, #8192	; 0x2000
20001a64:	f000 fa08 	bl	20001e78 <MSS_UART_isr>
}
20001a68:	46bd      	mov	sp, r7
20001a6a:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20001a6e:	4685      	mov	sp, r0
20001a70:	4770      	bx	lr
20001a72:	bf00      	nop

20001a74 <config_baud_divisors>:
config_baud_divisors
(
    mss_uart_instance_t * this_uart,
    uint32_t baudrate    
)
{
20001a74:	b580      	push	{r7, lr}
20001a76:	b088      	sub	sp, #32
20001a78:	af00      	add	r7, sp, #0
20001a7a:	6078      	str	r0, [r7, #4]
20001a7c:	6039      	str	r1, [r7, #0]
    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
20001a7e:	687a      	ldr	r2, [r7, #4]
20001a80:	f243 13e4 	movw	r3, #12772	; 0x31e4
20001a84:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001a88:	429a      	cmp	r2, r3
20001a8a:	d007      	beq.n	20001a9c <config_baud_divisors+0x28>
20001a8c:	687a      	ldr	r2, [r7, #4]
20001a8e:	f243 13a4 	movw	r3, #12708	; 0x31a4
20001a92:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001a96:	429a      	cmp	r2, r3
20001a98:	d000      	beq.n	20001a9c <config_baud_divisors+0x28>
20001a9a:	be00      	bkpt	0x0000
    
    if((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1))
20001a9c:	687a      	ldr	r2, [r7, #4]
20001a9e:	f243 13e4 	movw	r3, #12772	; 0x31e4
20001aa2:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001aa6:	429a      	cmp	r2, r3
20001aa8:	d007      	beq.n	20001aba <config_baud_divisors+0x46>
20001aaa:	687a      	ldr	r2, [r7, #4]
20001aac:	f243 13a4 	movw	r3, #12708	; 0x31a4
20001ab0:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001ab4:	429a      	cmp	r2, r3
20001ab6:	f040 80a4 	bne.w	20001c02 <config_baud_divisors+0x18e>
        uint32_t baud_value_by_64;
        uint32_t baud_value_by_128;
        uint32_t fractional_baud_value;
        uint32_t pclk_freq;

        this_uart->baudrate = baudrate;
20001aba:	687b      	ldr	r3, [r7, #4]
20001abc:	683a      	ldr	r2, [r7, #0]
20001abe:	609a      	str	r2, [r3, #8]

        /* Force the value of the CMSIS global variables holding the various system
          * clock frequencies to be updated. */
        SystemCoreClockUpdate();
20001ac0:	f001 f8fe 	bl	20002cc0 <SystemCoreClockUpdate>
        if(this_uart == &g_mss_uart0)
20001ac4:	687a      	ldr	r2, [r7, #4]
20001ac6:	f243 13e4 	movw	r3, #12772	; 0x31e4
20001aca:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001ace:	429a      	cmp	r2, r3
20001ad0:	d106      	bne.n	20001ae0 <config_baud_divisors+0x6c>
        {
            pclk_freq = g_FrequencyPCLK0;
20001ad2:	f243 137c 	movw	r3, #12668	; 0x317c
20001ad6:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001ada:	681b      	ldr	r3, [r3, #0]
20001adc:	61fb      	str	r3, [r7, #28]
20001ade:	e005      	b.n	20001aec <config_baud_divisors+0x78>
        }
        else
        {
            pclk_freq = g_FrequencyPCLK1;
20001ae0:	f243 1380 	movw	r3, #12672	; 0x3180
20001ae4:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001ae8:	681b      	ldr	r3, [r3, #0]
20001aea:	61fb      	str	r3, [r7, #28]
        /*
         * Compute baud value based on requested baud rate and PCLK frequency.
         * The baud value is computed using the following equation:
         *      baud_value = PCLK_Frequency / (baud_rate * 16)
         */
        baud_value_by_128 = (8u * pclk_freq) / baudrate;
20001aec:	69fb      	ldr	r3, [r7, #28]
20001aee:	ea4f 02c3 	mov.w	r2, r3, lsl #3
20001af2:	683b      	ldr	r3, [r7, #0]
20001af4:	fbb2 f3f3 	udiv	r3, r2, r3
20001af8:	617b      	str	r3, [r7, #20]
        baud_value_by_64 = baud_value_by_128 / 2u;
20001afa:	697b      	ldr	r3, [r7, #20]
20001afc:	ea4f 0353 	mov.w	r3, r3, lsr #1
20001b00:	613b      	str	r3, [r7, #16]
        baud_value = baud_value_by_64 / 64u;
20001b02:	693b      	ldr	r3, [r7, #16]
20001b04:	ea4f 1393 	mov.w	r3, r3, lsr #6
20001b08:	60fb      	str	r3, [r7, #12]
        fractional_baud_value = baud_value_by_64 - (baud_value * 64u);
20001b0a:	68fb      	ldr	r3, [r7, #12]
20001b0c:	ea4f 1383 	mov.w	r3, r3, lsl #6
20001b10:	693a      	ldr	r2, [r7, #16]
20001b12:	ebc3 0302 	rsb	r3, r3, r2
20001b16:	61bb      	str	r3, [r7, #24]
        fractional_baud_value += (baud_value_by_128 - (baud_value * 128u)) - (fractional_baud_value * 2u);
20001b18:	68fb      	ldr	r3, [r7, #12]
20001b1a:	ea4f 13c3 	mov.w	r3, r3, lsl #7
20001b1e:	697a      	ldr	r2, [r7, #20]
20001b20:	ebc3 0202 	rsb	r2, r3, r2
20001b24:	69bb      	ldr	r3, [r7, #24]
20001b26:	ea4f 0343 	mov.w	r3, r3, lsl #1
20001b2a:	ebc3 0302 	rsb	r3, r3, r2
20001b2e:	69ba      	ldr	r2, [r7, #24]
20001b30:	4413      	add	r3, r2
20001b32:	61bb      	str	r3, [r7, #24]
        
        /* Assert if integer baud value fits in 16-bit. */
        ASSERT(baud_value <= UINT16_MAX);
20001b34:	68fa      	ldr	r2, [r7, #12]
20001b36:	f64f 73ff 	movw	r3, #65535	; 0xffff
20001b3a:	429a      	cmp	r2, r3
20001b3c:	d900      	bls.n	20001b40 <config_baud_divisors+0xcc>
20001b3e:	be00      	bkpt	0x0000
    
        if(baud_value <= (uint32_t)UINT16_MAX)
20001b40:	68fa      	ldr	r2, [r7, #12]
20001b42:	f64f 73ff 	movw	r3, #65535	; 0xffff
20001b46:	429a      	cmp	r2, r3
20001b48:	d85b      	bhi.n	20001c02 <config_baud_divisors+0x18e>
        {
            if(baud_value > 1u)
20001b4a:	68fb      	ldr	r3, [r7, #12]
20001b4c:	2b01      	cmp	r3, #1
20001b4e:	d931      	bls.n	20001bb4 <config_baud_divisors+0x140>
            {
                /* 
                 * Use Frational baud rate divisors
                 */
                /* set divisor latch */
                set_bit_reg8(&this_uart->hw_reg->LCR,DLAB);
20001b50:	687b      	ldr	r3, [r7, #4]
20001b52:	681b      	ldr	r3, [r3, #0]
20001b54:	f103 030c 	add.w	r3, r3, #12
20001b58:	4618      	mov	r0, r3
20001b5a:	f04f 0107 	mov.w	r1, #7
20001b5e:	f7ff fe5d 	bl	2000181c <set_bit_reg8>
            
                /* msb of baud value */
                this_uart->hw_reg->DMR = (uint8_t)(baud_value >> 8);
20001b62:	687b      	ldr	r3, [r7, #4]
20001b64:	681b      	ldr	r3, [r3, #0]
20001b66:	68fa      	ldr	r2, [r7, #12]
20001b68:	ea4f 2212 	mov.w	r2, r2, lsr #8
20001b6c:	b2d2      	uxtb	r2, r2
20001b6e:	711a      	strb	r2, [r3, #4]
                /* lsb of baud value */
                this_uart->hw_reg->DLR = (uint8_t)baud_value;
20001b70:	687b      	ldr	r3, [r7, #4]
20001b72:	681b      	ldr	r3, [r3, #0]
20001b74:	68fa      	ldr	r2, [r7, #12]
20001b76:	b2d2      	uxtb	r2, r2
20001b78:	701a      	strb	r2, [r3, #0]
            
                /* reset divisor latch */
                clear_bit_reg8(&this_uart->hw_reg->LCR,DLAB);
20001b7a:	687b      	ldr	r3, [r7, #4]
20001b7c:	681b      	ldr	r3, [r3, #0]
20001b7e:	f103 030c 	add.w	r3, r3, #12
20001b82:	4618      	mov	r0, r3
20001b84:	f04f 0107 	mov.w	r1, #7
20001b88:	f7ff fe68 	bl	2000185c <clear_bit_reg8>
        
                /* Enable Fractional baud rate */
                set_bit_reg8(&this_uart->hw_reg->MM0,EFBR);
20001b8c:	687b      	ldr	r3, [r7, #4]
20001b8e:	681b      	ldr	r3, [r3, #0]
20001b90:	f103 0330 	add.w	r3, r3, #48	; 0x30
20001b94:	4618      	mov	r0, r3
20001b96:	f04f 0107 	mov.w	r1, #7
20001b9a:	f7ff fe3f 	bl	2000181c <set_bit_reg8>
        
                /* Load the fractional baud rate register */
                ASSERT(fractional_baud_value <= (uint32_t)UINT8_MAX);
20001b9e:	69bb      	ldr	r3, [r7, #24]
20001ba0:	2bff      	cmp	r3, #255	; 0xff
20001ba2:	d900      	bls.n	20001ba6 <config_baud_divisors+0x132>
20001ba4:	be00      	bkpt	0x0000
                this_uart->hw_reg->DFR = (uint8_t)fractional_baud_value;
20001ba6:	687b      	ldr	r3, [r7, #4]
20001ba8:	681b      	ldr	r3, [r3, #0]
20001baa:	69ba      	ldr	r2, [r7, #24]
20001bac:	b2d2      	uxtb	r2, r2
20001bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
20001bb2:	e026      	b.n	20001c02 <config_baud_divisors+0x18e>
            {
                /*
                 * Do NOT use Frational baud rate divisors.
                 */
                /* set divisor latch */
                set_bit_reg8(&this_uart->hw_reg->LCR,DLAB);
20001bb4:	687b      	ldr	r3, [r7, #4]
20001bb6:	681b      	ldr	r3, [r3, #0]
20001bb8:	f103 030c 	add.w	r3, r3, #12
20001bbc:	4618      	mov	r0, r3
20001bbe:	f04f 0107 	mov.w	r1, #7
20001bc2:	f7ff fe2b 	bl	2000181c <set_bit_reg8>
            
                /* msb of baud value */
                this_uart->hw_reg->DMR = (uint8_t)(baud_value >> 8u);
20001bc6:	687b      	ldr	r3, [r7, #4]
20001bc8:	681b      	ldr	r3, [r3, #0]
20001bca:	68fa      	ldr	r2, [r7, #12]
20001bcc:	ea4f 2212 	mov.w	r2, r2, lsr #8
20001bd0:	b2d2      	uxtb	r2, r2
20001bd2:	711a      	strb	r2, [r3, #4]
                /* lsb of baud value */
                this_uart->hw_reg->DLR = (uint8_t)baud_value;
20001bd4:	687b      	ldr	r3, [r7, #4]
20001bd6:	681b      	ldr	r3, [r3, #0]
20001bd8:	68fa      	ldr	r2, [r7, #12]
20001bda:	b2d2      	uxtb	r2, r2
20001bdc:	701a      	strb	r2, [r3, #0]
            
                /* reset divisor latch */
                clear_bit_reg8(&this_uart->hw_reg->LCR,DLAB);
20001bde:	687b      	ldr	r3, [r7, #4]
20001be0:	681b      	ldr	r3, [r3, #0]
20001be2:	f103 030c 	add.w	r3, r3, #12
20001be6:	4618      	mov	r0, r3
20001be8:	f04f 0107 	mov.w	r1, #7
20001bec:	f7ff fe36 	bl	2000185c <clear_bit_reg8>
                
                /* Disable Fractional baud rate */
                clear_bit_reg8(&this_uart->hw_reg->MM0,EFBR);
20001bf0:	687b      	ldr	r3, [r7, #4]
20001bf2:	681b      	ldr	r3, [r3, #0]
20001bf4:	f103 0330 	add.w	r3, r3, #48	; 0x30
20001bf8:	4618      	mov	r0, r3
20001bfa:	f04f 0107 	mov.w	r1, #7
20001bfe:	f7ff fe2d 	bl	2000185c <clear_bit_reg8>
            }
        }
    }
}
20001c02:	f107 0720 	add.w	r7, r7, #32
20001c06:	46bd      	mov	sp, r7
20001c08:	bd80      	pop	{r7, pc}
20001c0a:	bf00      	nop

20001c0c <global_init>:
(
    mss_uart_instance_t * this_uart,
    uint32_t baud_rate,
    uint8_t line_config
)
{
20001c0c:	b580      	push	{r7, lr}
20001c0e:	b084      	sub	sp, #16
20001c10:	af00      	add	r7, sp, #0
20001c12:	60f8      	str	r0, [r7, #12]
20001c14:	60b9      	str	r1, [r7, #8]
20001c16:	4613      	mov	r3, r2
20001c18:	71fb      	strb	r3, [r7, #7]
    /* The driver expects g_mss_uart0 and g_mss_uart1 to be the only
     * mss_uart_instance_t instances used to identify UART0 and UART1. */
    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
20001c1a:	68fa      	ldr	r2, [r7, #12]
20001c1c:	f243 13e4 	movw	r3, #12772	; 0x31e4
20001c20:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001c24:	429a      	cmp	r2, r3
20001c26:	d007      	beq.n	20001c38 <global_init+0x2c>
20001c28:	68fa      	ldr	r2, [r7, #12]
20001c2a:	f243 13a4 	movw	r3, #12708	; 0x31a4
20001c2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001c32:	429a      	cmp	r2, r3
20001c34:	d000      	beq.n	20001c38 <global_init+0x2c>
20001c36:	be00      	bkpt	0x0000

    if(this_uart == &g_mss_uart0)
20001c38:	68fa      	ldr	r2, [r7, #12]
20001c3a:	f243 13e4 	movw	r3, #12772	; 0x31e4
20001c3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001c42:	429a      	cmp	r2, r3
20001c44:	d124      	bne.n	20001c90 <global_init+0x84>
    {
        this_uart->hw_reg = UART0;
20001c46:	68fb      	ldr	r3, [r7, #12]
20001c48:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
20001c4c:	601a      	str	r2, [r3, #0]
        this_uart->irqn = UART0_IRQn;
20001c4e:	68fb      	ldr	r3, [r7, #12]
20001c50:	f04f 020a 	mov.w	r2, #10
20001c54:	711a      	strb	r2, [r3, #4]
        /* reset UART0 */
        SYSREG->SOFT_RST_CR |= SYSREG_MMUART0_SOFTRESET_MASK;
20001c56:	f248 0300 	movw	r3, #32768	; 0x8000
20001c5a:	f2c4 0303 	movt	r3, #16387	; 0x4003
20001c5e:	f248 0200 	movw	r2, #32768	; 0x8000
20001c62:	f2c4 0203 	movt	r2, #16387	; 0x4003
20001c66:	6c92      	ldr	r2, [r2, #72]	; 0x48
20001c68:	f042 0280 	orr.w	r2, r2, #128	; 0x80
20001c6c:	649a      	str	r2, [r3, #72]	; 0x48
        /* Clear any previously pended UART0 interrupt */
        NVIC_ClearPendingIRQ(UART0_IRQn);
20001c6e:	f04f 000a 	mov.w	r0, #10
20001c72:	f7ff fdb5 	bl	200017e0 <NVIC_ClearPendingIRQ>
        /* Take UART0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_MMUART0_SOFTRESET_MASK;
20001c76:	f248 0300 	movw	r3, #32768	; 0x8000
20001c7a:	f2c4 0303 	movt	r3, #16387	; 0x4003
20001c7e:	f248 0200 	movw	r2, #32768	; 0x8000
20001c82:	f2c4 0203 	movt	r2, #16387	; 0x4003
20001c86:	6c92      	ldr	r2, [r2, #72]	; 0x48
20001c88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
20001c8c:	649a      	str	r2, [r3, #72]	; 0x48
20001c8e:	e025      	b.n	20001cdc <global_init+0xd0>
    }
    else
    {
        this_uart->hw_reg = UART1;
20001c90:	68fa      	ldr	r2, [r7, #12]
20001c92:	f240 0300 	movw	r3, #0
20001c96:	f2c4 0301 	movt	r3, #16385	; 0x4001
20001c9a:	6013      	str	r3, [r2, #0]
        this_uart->irqn = UART1_IRQn;
20001c9c:	68fb      	ldr	r3, [r7, #12]
20001c9e:	f04f 020b 	mov.w	r2, #11
20001ca2:	711a      	strb	r2, [r3, #4]
        /* Reset UART1 */
        SYSREG->SOFT_RST_CR |= SYSREG_MMUART1_SOFTRESET_MASK;
20001ca4:	f248 0300 	movw	r3, #32768	; 0x8000
20001ca8:	f2c4 0303 	movt	r3, #16387	; 0x4003
20001cac:	f248 0200 	movw	r2, #32768	; 0x8000
20001cb0:	f2c4 0203 	movt	r2, #16387	; 0x4003
20001cb4:	6c92      	ldr	r2, [r2, #72]	; 0x48
20001cb6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
20001cba:	649a      	str	r2, [r3, #72]	; 0x48
        /* Clear any previously pended UART1 interrupt */
        NVIC_ClearPendingIRQ(UART1_IRQn);
20001cbc:	f04f 000b 	mov.w	r0, #11
20001cc0:	f7ff fd8e 	bl	200017e0 <NVIC_ClearPendingIRQ>
        /* Take UART1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_MMUART1_SOFTRESET_MASK;
20001cc4:	f248 0300 	movw	r3, #32768	; 0x8000
20001cc8:	f2c4 0303 	movt	r3, #16387	; 0x4003
20001ccc:	f248 0200 	movw	r2, #32768	; 0x8000
20001cd0:	f2c4 0203 	movt	r2, #16387	; 0x4003
20001cd4:	6c92      	ldr	r2, [r2, #72]	; 0x48
20001cd6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
20001cda:	649a      	str	r2, [r3, #72]	; 0x48
    }

    /* disable interrupts */
    this_uart->hw_reg->IER = 0u;
20001cdc:	68fb      	ldr	r3, [r7, #12]
20001cde:	681b      	ldr	r3, [r3, #0]
20001ce0:	f04f 0200 	mov.w	r2, #0
20001ce4:	711a      	strb	r2, [r3, #4]

    /* FIFO configuration */
    this_uart->hw_reg->FCR = (uint8_t)MSS_UART_FIFO_SINGLE_BYTE;
20001ce6:	68fb      	ldr	r3, [r7, #12]
20001ce8:	681b      	ldr	r3, [r3, #0]
20001cea:	f04f 0200 	mov.w	r2, #0
20001cee:	721a      	strb	r2, [r3, #8]
    /* clear receiver FIFO */
    set_bit_reg8(&this_uart->hw_reg->FCR,CLEAR_RX_FIFO);
20001cf0:	68fb      	ldr	r3, [r7, #12]
20001cf2:	681b      	ldr	r3, [r3, #0]
20001cf4:	f103 0308 	add.w	r3, r3, #8
20001cf8:	4618      	mov	r0, r3
20001cfa:	f04f 0101 	mov.w	r1, #1
20001cfe:	f7ff fd8d 	bl	2000181c <set_bit_reg8>
    /* clear transmitter FIFO */
    set_bit_reg8(&this_uart->hw_reg->FCR,CLEAR_TX_FIFO);
20001d02:	68fb      	ldr	r3, [r7, #12]
20001d04:	681b      	ldr	r3, [r3, #0]
20001d06:	f103 0308 	add.w	r3, r3, #8
20001d0a:	4618      	mov	r0, r3
20001d0c:	f04f 0102 	mov.w	r1, #2
20001d10:	f7ff fd84 	bl	2000181c <set_bit_reg8>

    /* set default READY mode : Mode 0*/
    /* enable RXRDYN and TXRDYN pins. The earlier FCR write to set the TX FIFO
     * trigger level inadvertently disabled the FCR_RXRDY_TXRDYN_EN bit. */
    set_bit_reg8(&this_uart->hw_reg->FCR,RXRDY_TXRDYN_EN);
20001d14:	68fb      	ldr	r3, [r7, #12]
20001d16:	681b      	ldr	r3, [r3, #0]
20001d18:	f103 0308 	add.w	r3, r3, #8
20001d1c:	4618      	mov	r0, r3
20001d1e:	f04f 0100 	mov.w	r1, #0
20001d22:	f7ff fd7b 	bl	2000181c <set_bit_reg8>

    /* disable loopback : local * remote */
    clear_bit_reg8(&this_uart->hw_reg->MCR,LOOP);
20001d26:	68fb      	ldr	r3, [r7, #12]
20001d28:	681b      	ldr	r3, [r3, #0]
20001d2a:	f103 0310 	add.w	r3, r3, #16
20001d2e:	4618      	mov	r0, r3
20001d30:	f04f 0104 	mov.w	r1, #4
20001d34:	f7ff fd92 	bl	2000185c <clear_bit_reg8>
    clear_bit_reg8(&this_uart->hw_reg->MCR,RLOOP);
20001d38:	68fb      	ldr	r3, [r7, #12]
20001d3a:	681b      	ldr	r3, [r3, #0]
20001d3c:	f103 0310 	add.w	r3, r3, #16
20001d40:	4618      	mov	r0, r3
20001d42:	f04f 0105 	mov.w	r1, #5
20001d46:	f7ff fd89 	bl	2000185c <clear_bit_reg8>

    /* set default TX endian */
    clear_bit_reg8(&this_uart->hw_reg->MM1,E_MSB_TX);
20001d4a:	68fb      	ldr	r3, [r7, #12]
20001d4c:	681b      	ldr	r3, [r3, #0]
20001d4e:	f103 0334 	add.w	r3, r3, #52	; 0x34
20001d52:	4618      	mov	r0, r3
20001d54:	f04f 0101 	mov.w	r1, #1
20001d58:	f7ff fd80 	bl	2000185c <clear_bit_reg8>
    /* set default RX endian */
    clear_bit_reg8(&this_uart->hw_reg->MM1,E_MSB_RX);
20001d5c:	68fb      	ldr	r3, [r7, #12]
20001d5e:	681b      	ldr	r3, [r3, #0]
20001d60:	f103 0334 	add.w	r3, r3, #52	; 0x34
20001d64:	4618      	mov	r0, r3
20001d66:	f04f 0100 	mov.w	r1, #0
20001d6a:	f7ff fd77 	bl	2000185c <clear_bit_reg8>

    /* default AFM : disabled */
    clear_bit_reg8(&this_uart->hw_reg->MM2,EAFM);
20001d6e:	68fb      	ldr	r3, [r7, #12]
20001d70:	681b      	ldr	r3, [r3, #0]
20001d72:	f103 0338 	add.w	r3, r3, #56	; 0x38
20001d76:	4618      	mov	r0, r3
20001d78:	f04f 0101 	mov.w	r1, #1
20001d7c:	f7ff fd6e 	bl	2000185c <clear_bit_reg8>

    /* disable TX time gaurd */
    clear_bit_reg8(&this_uart->hw_reg->MM0,ETTG); 
20001d80:	68fb      	ldr	r3, [r7, #12]
20001d82:	681b      	ldr	r3, [r3, #0]
20001d84:	f103 0330 	add.w	r3, r3, #48	; 0x30
20001d88:	4618      	mov	r0, r3
20001d8a:	f04f 0105 	mov.w	r1, #5
20001d8e:	f7ff fd65 	bl	2000185c <clear_bit_reg8>

    /* set default RX timeout */
    clear_bit_reg8(&this_uart->hw_reg->MM0,ERTO); 
20001d92:	68fb      	ldr	r3, [r7, #12]
20001d94:	681b      	ldr	r3, [r3, #0]
20001d96:	f103 0330 	add.w	r3, r3, #48	; 0x30
20001d9a:	4618      	mov	r0, r3
20001d9c:	f04f 0106 	mov.w	r1, #6
20001da0:	f7ff fd5c 	bl	2000185c <clear_bit_reg8>

    /* disable fractional baud-rate */
    clear_bit_reg8(&this_uart->hw_reg->MM0,EFBR); 
20001da4:	68fb      	ldr	r3, [r7, #12]
20001da6:	681b      	ldr	r3, [r3, #0]
20001da8:	f103 0330 	add.w	r3, r3, #48	; 0x30
20001dac:	4618      	mov	r0, r3
20001dae:	f04f 0107 	mov.w	r1, #7
20001db2:	f7ff fd53 	bl	2000185c <clear_bit_reg8>

    /* disable single wire mode */
    clear_bit_reg8(&this_uart->hw_reg->MM2,ESWM);
20001db6:	68fb      	ldr	r3, [r7, #12]
20001db8:	681b      	ldr	r3, [r3, #0]
20001dba:	f103 0338 	add.w	r3, r3, #56	; 0x38
20001dbe:	4618      	mov	r0, r3
20001dc0:	f04f 0103 	mov.w	r1, #3
20001dc4:	f7ff fd4a 	bl	2000185c <clear_bit_reg8>

    /* set filter to minimum value */
    this_uart->hw_reg->GFR = 0u;
20001dc8:	68fb      	ldr	r3, [r7, #12]
20001dca:	681b      	ldr	r3, [r3, #0]
20001dcc:	f04f 0200 	mov.w	r2, #0
20001dd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* set default TX time gaurd */
    this_uart->hw_reg->TTG = 0u;
20001dd4:	68fb      	ldr	r3, [r7, #12]
20001dd6:	681b      	ldr	r3, [r3, #0]
20001dd8:	f04f 0200 	mov.w	r2, #0
20001ddc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    /* set default RX timeout */
    this_uart->hw_reg->RTO = 0u;
20001de0:	68fb      	ldr	r3, [r7, #12]
20001de2:	681b      	ldr	r3, [r3, #0]
20001de4:	f04f 0200 	mov.w	r2, #0
20001de8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    
    /* 
     * Configure baud rate divisors. This uses the frational baud rate divisor
     * where possible to provide the most accurate baud rat possible.
     */
    config_baud_divisors(this_uart, baud_rate);
20001dec:	68f8      	ldr	r0, [r7, #12]
20001dee:	68b9      	ldr	r1, [r7, #8]
20001df0:	f7ff fe40 	bl	20001a74 <config_baud_divisors>

    /* set the line control register (bit length, stop bits, parity) */
    this_uart->hw_reg->LCR = line_config;
20001df4:	68fb      	ldr	r3, [r7, #12]
20001df6:	681b      	ldr	r3, [r3, #0]
20001df8:	79fa      	ldrb	r2, [r7, #7]
20001dfa:	731a      	strb	r2, [r3, #12]

    /* Instance setup */
    this_uart->baudrate = baud_rate;
20001dfc:	68fb      	ldr	r3, [r7, #12]
20001dfe:	68ba      	ldr	r2, [r7, #8]
20001e00:	609a      	str	r2, [r3, #8]
    this_uart->lineconfig = line_config;
20001e02:	68fb      	ldr	r3, [r7, #12]
20001e04:	79fa      	ldrb	r2, [r7, #7]
20001e06:	731a      	strb	r2, [r3, #12]
    this_uart->tx_buff_size = TX_COMPLETE;
20001e08:	68fb      	ldr	r3, [r7, #12]
20001e0a:	f04f 0200 	mov.w	r2, #0
20001e0e:	615a      	str	r2, [r3, #20]
    this_uart->tx_buffer = (const uint8_t *)0;
20001e10:	68fb      	ldr	r3, [r7, #12]
20001e12:	f04f 0200 	mov.w	r2, #0
20001e16:	611a      	str	r2, [r3, #16]
    this_uart->tx_idx = 0u;
20001e18:	68fb      	ldr	r3, [r7, #12]
20001e1a:	f04f 0200 	mov.w	r2, #0
20001e1e:	619a      	str	r2, [r3, #24]

    /* Default handlers for MSS UART interrupts */
    this_uart->rx_handler       = NULL_HANDLER;
20001e20:	68fb      	ldr	r3, [r7, #12]
20001e22:	f04f 0200 	mov.w	r2, #0
20001e26:	621a      	str	r2, [r3, #32]
    this_uart->tx_handler       = NULL_HANDLER;
20001e28:	68fb      	ldr	r3, [r7, #12]
20001e2a:	f04f 0200 	mov.w	r2, #0
20001e2e:	625a      	str	r2, [r3, #36]	; 0x24
    this_uart->linests_handler  = NULL_HANDLER;
20001e30:	68fb      	ldr	r3, [r7, #12]
20001e32:	f04f 0200 	mov.w	r2, #0
20001e36:	61da      	str	r2, [r3, #28]
    this_uart->modemsts_handler = NULL_HANDLER;
20001e38:	68fb      	ldr	r3, [r7, #12]
20001e3a:	f04f 0200 	mov.w	r2, #0
20001e3e:	629a      	str	r2, [r3, #40]	; 0x28
    this_uart->rto_handler      = NULL_HANDLER;    
20001e40:	68fb      	ldr	r3, [r7, #12]
20001e42:	f04f 0200 	mov.w	r2, #0
20001e46:	62da      	str	r2, [r3, #44]	; 0x2c
    this_uart->nack_handler     = NULL_HANDLER;   
20001e48:	68fb      	ldr	r3, [r7, #12]
20001e4a:	f04f 0200 	mov.w	r2, #0
20001e4e:	631a      	str	r2, [r3, #48]	; 0x30
    this_uart->pid_pei_handler  = NULL_HANDLER;
20001e50:	68fb      	ldr	r3, [r7, #12]
20001e52:	f04f 0200 	mov.w	r2, #0
20001e56:	635a      	str	r2, [r3, #52]	; 0x34
    this_uart->break_handler    = NULL_HANDLER;    
20001e58:	68fb      	ldr	r3, [r7, #12]
20001e5a:	f04f 0200 	mov.w	r2, #0
20001e5e:	639a      	str	r2, [r3, #56]	; 0x38
    this_uart->sync_handler     = NULL_HANDLER;   
20001e60:	68fb      	ldr	r3, [r7, #12]
20001e62:	f04f 0200 	mov.w	r2, #0
20001e66:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the sticky status */
    this_uart->status = 0u;
20001e68:	68fb      	ldr	r3, [r7, #12]
20001e6a:	f04f 0200 	mov.w	r2, #0
20001e6e:	735a      	strb	r2, [r3, #13]
}
20001e70:	f107 0710 	add.w	r7, r7, #16
20001e74:	46bd      	mov	sp, r7
20001e76:	bd80      	pop	{r7, pc}

20001e78 <MSS_UART_isr>:
static void
MSS_UART_isr
(
    mss_uart_instance_t * this_uart
)
{
20001e78:	b580      	push	{r7, lr}
20001e7a:	b084      	sub	sp, #16
20001e7c:	af00      	add	r7, sp, #0
20001e7e:	6078      	str	r0, [r7, #4]
    uint8_t iirf;

    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
20001e80:	687a      	ldr	r2, [r7, #4]
20001e82:	f243 13e4 	movw	r3, #12772	; 0x31e4
20001e86:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001e8a:	429a      	cmp	r2, r3
20001e8c:	d007      	beq.n	20001e9e <MSS_UART_isr+0x26>
20001e8e:	687a      	ldr	r2, [r7, #4]
20001e90:	f243 13a4 	movw	r3, #12708	; 0x31a4
20001e94:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001e98:	429a      	cmp	r2, r3
20001e9a:	d000      	beq.n	20001e9e <MSS_UART_isr+0x26>
20001e9c:	be00      	bkpt	0x0000

    if((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1))
20001e9e:	687a      	ldr	r2, [r7, #4]
20001ea0:	f243 13e4 	movw	r3, #12772	; 0x31e4
20001ea4:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001ea8:	429a      	cmp	r2, r3
20001eaa:	d007      	beq.n	20001ebc <MSS_UART_isr+0x44>
20001eac:	687a      	ldr	r2, [r7, #4]
20001eae:	f243 13a4 	movw	r3, #12708	; 0x31a4
20001eb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001eb6:	429a      	cmp	r2, r3
20001eb8:	f040 80ef 	bne.w	2000209a <MSS_UART_isr+0x222>
    {
        iirf = this_uart->hw_reg->IIR & IIRF_MASK;
20001ebc:	687b      	ldr	r3, [r7, #4]
20001ebe:	681b      	ldr	r3, [r3, #0]
20001ec0:	7a1b      	ldrb	r3, [r3, #8]
20001ec2:	b2db      	uxtb	r3, r3
20001ec4:	f003 030f 	and.w	r3, r3, #15
20001ec8:	73fb      	strb	r3, [r7, #15]

        switch (iirf)
20001eca:	7bfb      	ldrb	r3, [r7, #15]
20001ecc:	2b0c      	cmp	r3, #12
20001ece:	f200 80d7 	bhi.w	20002080 <MSS_UART_isr+0x208>
20001ed2:	a201      	add	r2, pc, #4	; (adr r2, 20001ed8 <MSS_UART_isr+0x60>)
20001ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20001ed8:	20001f0d 	.word	0x20001f0d
20001edc:	20002081 	.word	0x20002081
20001ee0:	20001f2b 	.word	0x20001f2b
20001ee4:	20001f85 	.word	0x20001f85
20001ee8:	20001f49 	.word	0x20001f49
20001eec:	20002081 	.word	0x20002081
20001ef0:	20001f67 	.word	0x20001f67
20001ef4:	20002081 	.word	0x20002081
20001ef8:	20002081 	.word	0x20002081
20001efc:	20002081 	.word	0x20002081
20001f00:	20002081 	.word	0x20002081
20001f04:	20002081 	.word	0x20002081
20001f08:	20001f49 	.word	0x20001f49
        {
            case IIRF_MODEM_STATUS:  /* Modem status interrupt */
            {
                ASSERT(NULL_HANDLER != this_uart->modemsts_handler);
20001f0c:	687b      	ldr	r3, [r7, #4]
20001f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
20001f10:	2b00      	cmp	r3, #0
20001f12:	d100      	bne.n	20001f16 <MSS_UART_isr+0x9e>
20001f14:	be00      	bkpt	0x0000
                if(NULL_HANDLER != this_uart->modemsts_handler)
20001f16:	687b      	ldr	r3, [r7, #4]
20001f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
20001f1a:	2b00      	cmp	r3, #0
20001f1c:	f000 80b2 	beq.w	20002084 <MSS_UART_isr+0x20c>
                {
                   (*(this_uart->modemsts_handler))(this_uart);
20001f20:	687b      	ldr	r3, [r7, #4]
20001f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
20001f24:	6878      	ldr	r0, [r7, #4]
20001f26:	4798      	blx	r3
                }
            }
            break;
20001f28:	e0b7      	b.n	2000209a <MSS_UART_isr+0x222>

            case IIRF_THRE: /* Transmitter Holding Register Empty */
            {
                ASSERT(NULL_HANDLER != this_uart->tx_handler);
20001f2a:	687b      	ldr	r3, [r7, #4]
20001f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20001f2e:	2b00      	cmp	r3, #0
20001f30:	d100      	bne.n	20001f34 <MSS_UART_isr+0xbc>
20001f32:	be00      	bkpt	0x0000
                if(NULL_HANDLER != this_uart->tx_handler)
20001f34:	687b      	ldr	r3, [r7, #4]
20001f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20001f38:	2b00      	cmp	r3, #0
20001f3a:	f000 80a5 	beq.w	20002088 <MSS_UART_isr+0x210>
                {
                    (*(this_uart->tx_handler))(this_uart);
20001f3e:	687b      	ldr	r3, [r7, #4]
20001f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20001f42:	6878      	ldr	r0, [r7, #4]
20001f44:	4798      	blx	r3
                }
            }
            break;
20001f46:	e0a8      	b.n	2000209a <MSS_UART_isr+0x222>

            case IIRF_RX_DATA:      /* Received Data Available */
            case IIRF_DATA_TIMEOUT: /* Received Data Timed-out */
            {
                ASSERT(NULL_HANDLER != this_uart->rx_handler);
20001f48:	687b      	ldr	r3, [r7, #4]
20001f4a:	6a1b      	ldr	r3, [r3, #32]
20001f4c:	2b00      	cmp	r3, #0
20001f4e:	d100      	bne.n	20001f52 <MSS_UART_isr+0xda>
20001f50:	be00      	bkpt	0x0000
                if(NULL_HANDLER != this_uart->rx_handler)
20001f52:	687b      	ldr	r3, [r7, #4]
20001f54:	6a1b      	ldr	r3, [r3, #32]
20001f56:	2b00      	cmp	r3, #0
20001f58:	f000 8098 	beq.w	2000208c <MSS_UART_isr+0x214>
                {
                    (*(this_uart->rx_handler))(this_uart);
20001f5c:	687b      	ldr	r3, [r7, #4]
20001f5e:	6a1b      	ldr	r3, [r3, #32]
20001f60:	6878      	ldr	r0, [r7, #4]
20001f62:	4798      	blx	r3
                }
            }
            break;
20001f64:	e099      	b.n	2000209a <MSS_UART_isr+0x222>

            case IIRF_RX_LINE_STATUS:  /* Line Status Interrupt */
            {
                ASSERT(NULL_HANDLER != this_uart->linests_handler);
20001f66:	687b      	ldr	r3, [r7, #4]
20001f68:	69db      	ldr	r3, [r3, #28]
20001f6a:	2b00      	cmp	r3, #0
20001f6c:	d100      	bne.n	20001f70 <MSS_UART_isr+0xf8>
20001f6e:	be00      	bkpt	0x0000
                if(NULL_HANDLER != this_uart->linests_handler)
20001f70:	687b      	ldr	r3, [r7, #4]
20001f72:	69db      	ldr	r3, [r3, #28]
20001f74:	2b00      	cmp	r3, #0
20001f76:	f000 808b 	beq.w	20002090 <MSS_UART_isr+0x218>
                {
                   (*(this_uart->linests_handler))(this_uart);
20001f7a:	687b      	ldr	r3, [r7, #4]
20001f7c:	69db      	ldr	r3, [r3, #28]
20001f7e:	6878      	ldr	r0, [r7, #4]
20001f80:	4798      	blx	r3
                }
            }
            break;
20001f82:	e08a      	b.n	2000209a <MSS_UART_isr+0x222>
            case IIRF_MMI:
            {
                /* Identify multimode interrupts and handle */

                /* Receiver time-out interrupt */
                if(read_bit_reg8(&this_uart->hw_reg->IIM,ERTOI))
20001f84:	687b      	ldr	r3, [r7, #4]
20001f86:	681b      	ldr	r3, [r3, #0]
20001f88:	f103 0328 	add.w	r3, r3, #40	; 0x28
20001f8c:	4618      	mov	r0, r3
20001f8e:	f04f 0100 	mov.w	r1, #0
20001f92:	f7ff fc83 	bl	2000189c <read_bit_reg8>
20001f96:	4603      	mov	r3, r0
20001f98:	2b00      	cmp	r3, #0
20001f9a:	d00c      	beq.n	20001fb6 <MSS_UART_isr+0x13e>
                {
                    ASSERT(NULL_HANDLER != this_uart->rto_handler);
20001f9c:	687b      	ldr	r3, [r7, #4]
20001f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20001fa0:	2b00      	cmp	r3, #0
20001fa2:	d100      	bne.n	20001fa6 <MSS_UART_isr+0x12e>
20001fa4:	be00      	bkpt	0x0000
                    if(NULL_HANDLER != this_uart->rto_handler)
20001fa6:	687b      	ldr	r3, [r7, #4]
20001fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20001faa:	2b00      	cmp	r3, #0
20001fac:	d003      	beq.n	20001fb6 <MSS_UART_isr+0x13e>
                    {
                        (*(this_uart->rto_handler))(this_uart);
20001fae:	687b      	ldr	r3, [r7, #4]
20001fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20001fb2:	6878      	ldr	r0, [r7, #4]
20001fb4:	4798      	blx	r3
                    }
                }
                /* NACK interrupt */
                if(read_bit_reg8(&this_uart->hw_reg->IIM,ENACKI))
20001fb6:	687b      	ldr	r3, [r7, #4]
20001fb8:	681b      	ldr	r3, [r3, #0]
20001fba:	f103 0328 	add.w	r3, r3, #40	; 0x28
20001fbe:	4618      	mov	r0, r3
20001fc0:	f04f 0101 	mov.w	r1, #1
20001fc4:	f7ff fc6a 	bl	2000189c <read_bit_reg8>
20001fc8:	4603      	mov	r3, r0
20001fca:	2b00      	cmp	r3, #0
20001fcc:	d00c      	beq.n	20001fe8 <MSS_UART_isr+0x170>
                {
                    ASSERT(NULL_HANDLER != this_uart->nack_handler);
20001fce:	687b      	ldr	r3, [r7, #4]
20001fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20001fd2:	2b00      	cmp	r3, #0
20001fd4:	d100      	bne.n	20001fd8 <MSS_UART_isr+0x160>
20001fd6:	be00      	bkpt	0x0000
                    if(NULL_HANDLER != this_uart->nack_handler)
20001fd8:	687b      	ldr	r3, [r7, #4]
20001fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20001fdc:	2b00      	cmp	r3, #0
20001fde:	d003      	beq.n	20001fe8 <MSS_UART_isr+0x170>
                    {
                        (*(this_uart->nack_handler))(this_uart);
20001fe0:	687b      	ldr	r3, [r7, #4]
20001fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20001fe4:	6878      	ldr	r0, [r7, #4]
20001fe6:	4798      	blx	r3
                    }
                }

                /* PID parity error interrupt */
                if(read_bit_reg8(&this_uart->hw_reg->IIM,EPID_PEI))
20001fe8:	687b      	ldr	r3, [r7, #4]
20001fea:	681b      	ldr	r3, [r3, #0]
20001fec:	f103 0328 	add.w	r3, r3, #40	; 0x28
20001ff0:	4618      	mov	r0, r3
20001ff2:	f04f 0102 	mov.w	r1, #2
20001ff6:	f7ff fc51 	bl	2000189c <read_bit_reg8>
20001ffa:	4603      	mov	r3, r0
20001ffc:	2b00      	cmp	r3, #0
20001ffe:	d00c      	beq.n	2000201a <MSS_UART_isr+0x1a2>
                {
                    ASSERT(NULL_HANDLER != this_uart->pid_pei_handler);
20002000:	687b      	ldr	r3, [r7, #4]
20002002:	6b5b      	ldr	r3, [r3, #52]	; 0x34
20002004:	2b00      	cmp	r3, #0
20002006:	d100      	bne.n	2000200a <MSS_UART_isr+0x192>
20002008:	be00      	bkpt	0x0000
                    if(NULL_HANDLER != this_uart->pid_pei_handler)
2000200a:	687b      	ldr	r3, [r7, #4]
2000200c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2000200e:	2b00      	cmp	r3, #0
20002010:	d003      	beq.n	2000201a <MSS_UART_isr+0x1a2>
                    {
                        (*(this_uart->pid_pei_handler))(this_uart);
20002012:	687b      	ldr	r3, [r7, #4]
20002014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
20002016:	6878      	ldr	r0, [r7, #4]
20002018:	4798      	blx	r3
                    }
                }

                /* LIN break detection interrupt */
                if(read_bit_reg8(&this_uart->hw_reg->IIM,ELINBI))
2000201a:	687b      	ldr	r3, [r7, #4]
2000201c:	681b      	ldr	r3, [r3, #0]
2000201e:	f103 0328 	add.w	r3, r3, #40	; 0x28
20002022:	4618      	mov	r0, r3
20002024:	f04f 0103 	mov.w	r1, #3
20002028:	f7ff fc38 	bl	2000189c <read_bit_reg8>
2000202c:	4603      	mov	r3, r0
2000202e:	2b00      	cmp	r3, #0
20002030:	d00c      	beq.n	2000204c <MSS_UART_isr+0x1d4>
                {
                    ASSERT(NULL_HANDLER != this_uart->break_handler);
20002032:	687b      	ldr	r3, [r7, #4]
20002034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20002036:	2b00      	cmp	r3, #0
20002038:	d100      	bne.n	2000203c <MSS_UART_isr+0x1c4>
2000203a:	be00      	bkpt	0x0000
                    if(NULL_HANDLER != this_uart->break_handler)
2000203c:	687b      	ldr	r3, [r7, #4]
2000203e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20002040:	2b00      	cmp	r3, #0
20002042:	d003      	beq.n	2000204c <MSS_UART_isr+0x1d4>
                    {
                        (*(this_uart->break_handler))(this_uart);
20002044:	687b      	ldr	r3, [r7, #4]
20002046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20002048:	6878      	ldr	r0, [r7, #4]
2000204a:	4798      	blx	r3
                    }
                }

                /* LIN Sync detection interrupt */
                if(read_bit_reg8(&this_uart->hw_reg->IIM,ELINSI))
2000204c:	687b      	ldr	r3, [r7, #4]
2000204e:	681b      	ldr	r3, [r3, #0]
20002050:	f103 0328 	add.w	r3, r3, #40	; 0x28
20002054:	4618      	mov	r0, r3
20002056:	f04f 0104 	mov.w	r1, #4
2000205a:	f7ff fc1f 	bl	2000189c <read_bit_reg8>
2000205e:	4603      	mov	r3, r0
20002060:	2b00      	cmp	r3, #0
20002062:	d017      	beq.n	20002094 <MSS_UART_isr+0x21c>
                {
                    ASSERT(NULL_HANDLER != this_uart->sync_handler);
20002064:	687b      	ldr	r3, [r7, #4]
20002066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20002068:	2b00      	cmp	r3, #0
2000206a:	d100      	bne.n	2000206e <MSS_UART_isr+0x1f6>
2000206c:	be00      	bkpt	0x0000
                    if(NULL_HANDLER != this_uart->sync_handler)
2000206e:	687b      	ldr	r3, [r7, #4]
20002070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20002072:	2b00      	cmp	r3, #0
20002074:	d010      	beq.n	20002098 <MSS_UART_isr+0x220>
                    {
                        (*(this_uart->sync_handler))(this_uart);
20002076:	687b      	ldr	r3, [r7, #4]
20002078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2000207a:	6878      	ldr	r0, [r7, #4]
2000207c:	4798      	blx	r3
                    }
                }
                break;
2000207e:	e00c      	b.n	2000209a <MSS_UART_isr+0x222>
            }

            default:
            {
                ASSERT(INVALID_INTERRUPT);
20002080:	be00      	bkpt	0x0000
20002082:	e00a      	b.n	2000209a <MSS_UART_isr+0x222>
                if(NULL_HANDLER != this_uart->modemsts_handler)
                {
                   (*(this_uart->modemsts_handler))(this_uart);
                }
            }
            break;
20002084:	bf00      	nop
20002086:	e008      	b.n	2000209a <MSS_UART_isr+0x222>
                if(NULL_HANDLER != this_uart->tx_handler)
                {
                    (*(this_uart->tx_handler))(this_uart);
                }
            }
            break;
20002088:	bf00      	nop
2000208a:	e006      	b.n	2000209a <MSS_UART_isr+0x222>
                if(NULL_HANDLER != this_uart->rx_handler)
                {
                    (*(this_uart->rx_handler))(this_uart);
                }
            }
            break;
2000208c:	bf00      	nop
2000208e:	e004      	b.n	2000209a <MSS_UART_isr+0x222>
                if(NULL_HANDLER != this_uart->linests_handler)
                {
                   (*(this_uart->linests_handler))(this_uart);
                }
            }
            break;
20002090:	bf00      	nop
20002092:	e002      	b.n	2000209a <MSS_UART_isr+0x222>
                    if(NULL_HANDLER != this_uart->sync_handler)
                    {
                        (*(this_uart->sync_handler))(this_uart);
                    }
                }
                break;
20002094:	bf00      	nop
20002096:	e000      	b.n	2000209a <MSS_UART_isr+0x222>
20002098:	bf00      	nop
                ASSERT(INVALID_INTERRUPT);
            }
            break;
        }
    }
}
2000209a:	f107 0710 	add.w	r7, r7, #16
2000209e:	46bd      	mov	sp, r7
200020a0:	bd80      	pop	{r7, pc}
200020a2:	bf00      	nop

200020a4 <default_tx_handler>:
static void
default_tx_handler
(
    mss_uart_instance_t * this_uart
)
{
200020a4:	b580      	push	{r7, lr}
200020a6:	b086      	sub	sp, #24
200020a8:	af00      	add	r7, sp, #0
200020aa:	6078      	str	r0, [r7, #4]
    uint8_t status;

    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
200020ac:	687a      	ldr	r2, [r7, #4]
200020ae:	f243 13e4 	movw	r3, #12772	; 0x31e4
200020b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200020b6:	429a      	cmp	r2, r3
200020b8:	d007      	beq.n	200020ca <default_tx_handler+0x26>
200020ba:	687a      	ldr	r2, [r7, #4]
200020bc:	f243 13a4 	movw	r3, #12708	; 0x31a4
200020c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200020c4:	429a      	cmp	r2, r3
200020c6:	d000      	beq.n	200020ca <default_tx_handler+0x26>
200020c8:	be00      	bkpt	0x0000
    ASSERT(( (uint8_t *)0 ) != this_uart->tx_buffer);
200020ca:	687b      	ldr	r3, [r7, #4]
200020cc:	691b      	ldr	r3, [r3, #16]
200020ce:	2b00      	cmp	r3, #0
200020d0:	d100      	bne.n	200020d4 <default_tx_handler+0x30>
200020d2:	be00      	bkpt	0x0000
    ASSERT(0u < this_uart->tx_buff_size);
200020d4:	687b      	ldr	r3, [r7, #4]
200020d6:	695b      	ldr	r3, [r3, #20]
200020d8:	2b00      	cmp	r3, #0
200020da:	d100      	bne.n	200020de <default_tx_handler+0x3a>
200020dc:	be00      	bkpt	0x0000

    if(((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1)) &&
200020de:	687a      	ldr	r2, [r7, #4]
200020e0:	f243 13e4 	movw	r3, #12772	; 0x31e4
200020e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200020e8:	429a      	cmp	r2, r3
200020ea:	d006      	beq.n	200020fa <default_tx_handler+0x56>
200020ec:	687a      	ldr	r2, [r7, #4]
200020ee:	f243 13a4 	movw	r3, #12708	; 0x31a4
200020f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200020f6:	429a      	cmp	r2, r3
200020f8:	d155      	bne.n	200021a6 <default_tx_handler+0x102>
       (((uint8_t *)0 ) != this_uart->tx_buffer) &&
200020fa:	687b      	ldr	r3, [r7, #4]
200020fc:	691b      	ldr	r3, [r3, #16]

    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
    ASSERT(( (uint8_t *)0 ) != this_uart->tx_buffer);
    ASSERT(0u < this_uart->tx_buff_size);

    if(((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1)) &&
200020fe:	2b00      	cmp	r3, #0
20002100:	d051      	beq.n	200021a6 <default_tx_handler+0x102>
       (((uint8_t *)0 ) != this_uart->tx_buffer) &&
       (0u < this_uart->tx_buff_size))
20002102:	687b      	ldr	r3, [r7, #4]
20002104:	695b      	ldr	r3, [r3, #20]

    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
    ASSERT(( (uint8_t *)0 ) != this_uart->tx_buffer);
    ASSERT(0u < this_uart->tx_buff_size);

    if(((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1)) &&
20002106:	2b00      	cmp	r3, #0
20002108:	d04d      	beq.n	200021a6 <default_tx_handler+0x102>
       (((uint8_t *)0 ) != this_uart->tx_buffer) &&
       (0u < this_uart->tx_buff_size))
    {
        /* Read the Line Status Register and update the sticky record. */
        status = this_uart->hw_reg->LSR;
2000210a:	687b      	ldr	r3, [r7, #4]
2000210c:	681b      	ldr	r3, [r3, #0]
2000210e:	7d1b      	ldrb	r3, [r3, #20]
20002110:	72fb      	strb	r3, [r7, #11]
        this_uart->status |= status;
20002112:	687b      	ldr	r3, [r7, #4]
20002114:	7b5a      	ldrb	r2, [r3, #13]
20002116:	7afb      	ldrb	r3, [r7, #11]
20002118:	ea42 0303 	orr.w	r3, r2, r3
2000211c:	b2da      	uxtb	r2, r3
2000211e:	687b      	ldr	r3, [r7, #4]
20002120:	735a      	strb	r2, [r3, #13]

        /*
         * This function should only be called as a result of a THRE interrupt.
         * Verify that this is true before proceeding to transmit data.
         */
        if(status & MSS_UART_THRE)
20002122:	7afb      	ldrb	r3, [r7, #11]
20002124:	f003 0320 	and.w	r3, r3, #32
20002128:	2b00      	cmp	r3, #0
2000212a:	d029      	beq.n	20002180 <default_tx_handler+0xdc>
        {
            uint32_t i;
            uint32_t fill_size = TX_FIFO_SIZE;
2000212c:	f04f 0310 	mov.w	r3, #16
20002130:	613b      	str	r3, [r7, #16]
            uint32_t tx_remain = this_uart->tx_buff_size - this_uart->tx_idx;
20002132:	687b      	ldr	r3, [r7, #4]
20002134:	695a      	ldr	r2, [r3, #20]
20002136:	687b      	ldr	r3, [r7, #4]
20002138:	699b      	ldr	r3, [r3, #24]
2000213a:	ebc3 0302 	rsb	r3, r3, r2
2000213e:	617b      	str	r3, [r7, #20]

            /* Calculate the number of bytes to transmit. */
            if(tx_remain < TX_FIFO_SIZE)
20002140:	697b      	ldr	r3, [r7, #20]
20002142:	2b0f      	cmp	r3, #15
20002144:	d801      	bhi.n	2000214a <default_tx_handler+0xa6>
            {
                fill_size = tx_remain;
20002146:	697b      	ldr	r3, [r7, #20]
20002148:	613b      	str	r3, [r7, #16]
            }

            /* Fill the TX FIFO with the calculated the number of bytes. */
            for(i = 0u; i < fill_size; ++i)
2000214a:	f04f 0300 	mov.w	r3, #0
2000214e:	60fb      	str	r3, [r7, #12]
20002150:	e012      	b.n	20002178 <default_tx_handler+0xd4>
            {
                /* Send next character in the buffer. */
                this_uart->hw_reg->THR = this_uart->tx_buffer[this_uart->tx_idx];
20002152:	687b      	ldr	r3, [r7, #4]
20002154:	681b      	ldr	r3, [r3, #0]
20002156:	687a      	ldr	r2, [r7, #4]
20002158:	6911      	ldr	r1, [r2, #16]
2000215a:	687a      	ldr	r2, [r7, #4]
2000215c:	6992      	ldr	r2, [r2, #24]
2000215e:	440a      	add	r2, r1
20002160:	7812      	ldrb	r2, [r2, #0]
20002162:	701a      	strb	r2, [r3, #0]
                ++this_uart->tx_idx;
20002164:	687b      	ldr	r3, [r7, #4]
20002166:	699b      	ldr	r3, [r3, #24]
20002168:	f103 0201 	add.w	r2, r3, #1
2000216c:	687b      	ldr	r3, [r7, #4]
2000216e:	619a      	str	r2, [r3, #24]
            {
                fill_size = tx_remain;
            }

            /* Fill the TX FIFO with the calculated the number of bytes. */
            for(i = 0u; i < fill_size; ++i)
20002170:	68fb      	ldr	r3, [r7, #12]
20002172:	f103 0301 	add.w	r3, r3, #1
20002176:	60fb      	str	r3, [r7, #12]
20002178:	68fa      	ldr	r2, [r7, #12]
2000217a:	693b      	ldr	r3, [r7, #16]
2000217c:	429a      	cmp	r2, r3
2000217e:	d3e8      	bcc.n	20002152 <default_tx_handler+0xae>
                ++this_uart->tx_idx;
            }
        }

        /* Flag Tx as complete if all data has been pushed into the Tx FIFO. */
        if(this_uart->tx_idx == this_uart->tx_buff_size)
20002180:	687b      	ldr	r3, [r7, #4]
20002182:	699a      	ldr	r2, [r3, #24]
20002184:	687b      	ldr	r3, [r7, #4]
20002186:	695b      	ldr	r3, [r3, #20]
20002188:	429a      	cmp	r2, r3
2000218a:	d10c      	bne.n	200021a6 <default_tx_handler+0x102>
        {
            this_uart->tx_buff_size = TX_COMPLETE;
2000218c:	687b      	ldr	r3, [r7, #4]
2000218e:	f04f 0200 	mov.w	r2, #0
20002192:	615a      	str	r2, [r3, #20]
            /* disables TX interrupt */
            clear_bit_reg8(&this_uart->hw_reg->IER,ETBEI);
20002194:	687b      	ldr	r3, [r7, #4]
20002196:	681b      	ldr	r3, [r3, #0]
20002198:	f103 0304 	add.w	r3, r3, #4
2000219c:	4618      	mov	r0, r3
2000219e:	f04f 0101 	mov.w	r1, #1
200021a2:	f7ff fb5b 	bl	2000185c <clear_bit_reg8>
        }
    }
}
200021a6:	f107 0718 	add.w	r7, r7, #24
200021aa:	46bd      	mov	sp, r7
200021ac:	bd80      	pop	{r7, pc}
200021ae:	bf00      	nop

200021b0 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
200021b0:	b480      	push	{r7}
200021b2:	b083      	sub	sp, #12
200021b4:	af00      	add	r7, sp, #0
200021b6:	4603      	mov	r3, r0
200021b8:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
200021ba:	f24e 1300 	movw	r3, #57600	; 0xe100
200021be:	f2ce 0300 	movt	r3, #57344	; 0xe000
200021c2:	f997 2007 	ldrsb.w	r2, [r7, #7]
200021c6:	ea4f 1252 	mov.w	r2, r2, lsr #5
200021ca:	79f9      	ldrb	r1, [r7, #7]
200021cc:	f001 011f 	and.w	r1, r1, #31
200021d0:	f04f 0001 	mov.w	r0, #1
200021d4:	fa00 f101 	lsl.w	r1, r0, r1
200021d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
200021dc:	f107 070c 	add.w	r7, r7, #12
200021e0:	46bd      	mov	sp, r7
200021e2:	bc80      	pop	{r7}
200021e4:	4770      	bx	lr
200021e6:	bf00      	nop

200021e8 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
200021e8:	b480      	push	{r7}
200021ea:	b083      	sub	sp, #12
200021ec:	af00      	add	r7, sp, #0
200021ee:	4603      	mov	r3, r0
200021f0:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
200021f2:	f24e 1300 	movw	r3, #57600	; 0xe100
200021f6:	f2ce 0300 	movt	r3, #57344	; 0xe000
200021fa:	f997 2007 	ldrsb.w	r2, [r7, #7]
200021fe:	ea4f 1252 	mov.w	r2, r2, lsr #5
20002202:	79f9      	ldrb	r1, [r7, #7]
20002204:	f001 011f 	and.w	r1, r1, #31
20002208:	f04f 0001 	mov.w	r0, #1
2000220c:	fa00 f101 	lsl.w	r1, r0, r1
20002210:	f102 0220 	add.w	r2, r2, #32
20002214:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20002218:	f107 070c 	add.w	r7, r7, #12
2000221c:	46bd      	mov	sp, r7
2000221e:	bc80      	pop	{r7}
20002220:	4770      	bx	lr
20002222:	bf00      	nop

20002224 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
20002224:	b480      	push	{r7}
20002226:	b083      	sub	sp, #12
20002228:	af00      	add	r7, sp, #0
2000222a:	4603      	mov	r3, r0
2000222c:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
2000222e:	f24e 1300 	movw	r3, #57600	; 0xe100
20002232:	f2ce 0300 	movt	r3, #57344	; 0xe000
20002236:	f997 2007 	ldrsb.w	r2, [r7, #7]
2000223a:	ea4f 1252 	mov.w	r2, r2, lsr #5
2000223e:	79f9      	ldrb	r1, [r7, #7]
20002240:	f001 011f 	and.w	r1, r1, #31
20002244:	f04f 0001 	mov.w	r0, #1
20002248:	fa00 f101 	lsl.w	r1, r0, r1
2000224c:	f102 0260 	add.w	r2, r2, #96	; 0x60
20002250:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20002254:	f107 070c 	add.w	r7, r7, #12
20002258:	46bd      	mov	sp, r7
2000225a:	bc80      	pop	{r7}
2000225c:	4770      	bx	lr
2000225e:	bf00      	nop

20002260 <MSS_SPI_init>:
 */
void MSS_SPI_init
(
    mss_spi_instance_t * this_spi
)
{
20002260:	b580      	push	{r7, lr}
20002262:	b084      	sub	sp, #16
20002264:	af00      	add	r7, sp, #0
20002266:	6078      	str	r0, [r7, #4]
    uint16_t slave;
    
    ASSERT((this_spi == &g_mss_spi0) || (this_spi == &g_mss_spi1));
20002268:	687a      	ldr	r2, [r7, #4]
2000226a:	f243 23a8 	movw	r3, #12968	; 0x32a8
2000226e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002272:	429a      	cmp	r2, r3
20002274:	d007      	beq.n	20002286 <MSS_SPI_init+0x26>
20002276:	687a      	ldr	r2, [r7, #4]
20002278:	f243 2324 	movw	r3, #12836	; 0x3224
2000227c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002280:	429a      	cmp	r2, r3
20002282:	d000      	beq.n	20002286 <MSS_SPI_init+0x26>
20002284:	be00      	bkpt	0x0000
     * Initialize SPI driver instance data. Relies on the majority
     * of data requiring 0 for initial state so we just need to fill
     * with 0s and finish off with a small number of non zero values.
     */
    /* Shut down interrupts from the MSS SPI while we do this */
    NVIC_DisableIRQ( this_spi->irqn );
20002286:	687b      	ldr	r3, [r7, #4]
20002288:	791b      	ldrb	r3, [r3, #4]
2000228a:	b25b      	sxtb	r3, r3
2000228c:	4618      	mov	r0, r3
2000228e:	f7ff ffab 	bl	200021e8 <NVIC_DisableIRQ>

    memset(this_spi, 0, sizeof(mss_spi_instance_t));
20002292:	6878      	ldr	r0, [r7, #4]
20002294:	f04f 0100 	mov.w	r1, #0
20002298:	f04f 0284 	mov.w	r2, #132	; 0x84
2000229c:	f000 fe90 	bl	20002fc0 <memset>
    
    this_spi->cmd_done = 1u;
200022a0:	687b      	ldr	r3, [r7, #4]
200022a2:	f04f 0201 	mov.w	r2, #1
200022a6:	625a      	str	r2, [r3, #36]	; 0x24

    for(slave = 0u; slave < (uint16_t)MSS_SPI_MAX_NB_OF_SLAVES; ++slave)
200022a8:	f04f 0300 	mov.w	r3, #0
200022ac:	81fb      	strh	r3, [r7, #14]
200022ae:	e00d      	b.n	200022cc <MSS_SPI_init+0x6c>
    {
        this_spi->slaves_cfg[slave].ctrl_reg = NOT_CONFIGURED;
200022b0:	89fb      	ldrh	r3, [r7, #14]
200022b2:	687a      	ldr	r2, [r7, #4]
200022b4:	f103 0306 	add.w	r3, r3, #6
200022b8:	ea4f 03c3 	mov.w	r3, r3, lsl #3
200022bc:	4413      	add	r3, r2
200022be:	f04f 32ff 	mov.w	r2, #4294967295
200022c2:	605a      	str	r2, [r3, #4]

    memset(this_spi, 0, sizeof(mss_spi_instance_t));
    
    this_spi->cmd_done = 1u;

    for(slave = 0u; slave < (uint16_t)MSS_SPI_MAX_NB_OF_SLAVES; ++slave)
200022c4:	89fb      	ldrh	r3, [r7, #14]
200022c6:	f103 0301 	add.w	r3, r3, #1
200022ca:	81fb      	strh	r3, [r7, #14]
200022cc:	89fb      	ldrh	r3, [r7, #14]
200022ce:	2b07      	cmp	r3, #7
200022d0:	d9ee      	bls.n	200022b0 <MSS_SPI_init+0x50>
    {
        this_spi->slaves_cfg[slave].ctrl_reg = NOT_CONFIGURED;
    }

    if(this_spi == &g_mss_spi0)
200022d2:	687a      	ldr	r2, [r7, #4]
200022d4:	f243 23a8 	movw	r3, #12968	; 0x32a8
200022d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200022dc:	429a      	cmp	r2, r3
200022de:	d126      	bne.n	2000232e <MSS_SPI_init+0xce>
    {
        this_spi->hw_reg = ((SPI_TypeDef *) SPI0_BASE);
200022e0:	687a      	ldr	r2, [r7, #4]
200022e2:	f241 0300 	movw	r3, #4096	; 0x1000
200022e6:	f2c4 0300 	movt	r3, #16384	; 0x4000
200022ea:	6013      	str	r3, [r2, #0]
        this_spi->irqn = SPI0_IRQn;
200022ec:	687b      	ldr	r3, [r7, #4]
200022ee:	f04f 0202 	mov.w	r2, #2
200022f2:	711a      	strb	r2, [r3, #4]

        /* reset SPI0 */
        SYSREG->SOFT_RST_CR |= SYSREG_SPI0_SOFTRESET_MASK;
200022f4:	f248 0300 	movw	r3, #32768	; 0x8000
200022f8:	f2c4 0303 	movt	r3, #16387	; 0x4003
200022fc:	f248 0200 	movw	r2, #32768	; 0x8000
20002300:	f2c4 0203 	movt	r2, #16387	; 0x4003
20002304:	6c92      	ldr	r2, [r2, #72]	; 0x48
20002306:	f442 7200 	orr.w	r2, r2, #512	; 0x200
2000230a:	649a      	str	r2, [r3, #72]	; 0x48
        /* Clear any previously pended SPI0 interrupt */
        NVIC_ClearPendingIRQ(SPI0_IRQn);
2000230c:	f04f 0002 	mov.w	r0, #2
20002310:	f7ff ff88 	bl	20002224 <NVIC_ClearPendingIRQ>
        /* Take SPI0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_SPI0_SOFTRESET_MASK;
20002314:	f248 0300 	movw	r3, #32768	; 0x8000
20002318:	f2c4 0303 	movt	r3, #16387	; 0x4003
2000231c:	f248 0200 	movw	r2, #32768	; 0x8000
20002320:	f2c4 0203 	movt	r2, #16387	; 0x4003
20002324:	6c92      	ldr	r2, [r2, #72]	; 0x48
20002326:	f422 7200 	bic.w	r2, r2, #512	; 0x200
2000232a:	649a      	str	r2, [r3, #72]	; 0x48
2000232c:	e025      	b.n	2000237a <MSS_SPI_init+0x11a>
    }
    else
    {
        this_spi->hw_reg = ((SPI_TypeDef *) SPI1_BASE);
2000232e:	687a      	ldr	r2, [r7, #4]
20002330:	f241 0300 	movw	r3, #4096	; 0x1000
20002334:	f2c4 0301 	movt	r3, #16385	; 0x4001
20002338:	6013      	str	r3, [r2, #0]
        this_spi->irqn = SPI1_IRQn;
2000233a:	687b      	ldr	r3, [r7, #4]
2000233c:	f04f 0203 	mov.w	r2, #3
20002340:	711a      	strb	r2, [r3, #4]
        
        /* reset SPI1 */
        SYSREG->SOFT_RST_CR |= SYSREG_SPI1_SOFTRESET_MASK;
20002342:	f248 0300 	movw	r3, #32768	; 0x8000
20002346:	f2c4 0303 	movt	r3, #16387	; 0x4003
2000234a:	f248 0200 	movw	r2, #32768	; 0x8000
2000234e:	f2c4 0203 	movt	r2, #16387	; 0x4003
20002352:	6c92      	ldr	r2, [r2, #72]	; 0x48
20002354:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
20002358:	649a      	str	r2, [r3, #72]	; 0x48
        /* Clear any previously pended SPI1 interrupt */
        NVIC_ClearPendingIRQ(SPI1_IRQn);
2000235a:	f04f 0003 	mov.w	r0, #3
2000235e:	f7ff ff61 	bl	20002224 <NVIC_ClearPendingIRQ>
        /* Take SPI1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_SPI1_SOFTRESET_MASK;
20002362:	f248 0300 	movw	r3, #32768	; 0x8000
20002366:	f2c4 0303 	movt	r3, #16387	; 0x4003
2000236a:	f248 0200 	movw	r2, #32768	; 0x8000
2000236e:	f2c4 0203 	movt	r2, #16387	; 0x4003
20002372:	6c92      	ldr	r2, [r2, #72]	; 0x48
20002374:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
20002378:	649a      	str	r2, [r3, #72]	; 0x48
    }
    
    /* De-assert reset bit. */
    this_spi->hw_reg->CONTROL &= ~CTRL_REG_RESET_MASK;
2000237a:	687b      	ldr	r3, [r7, #4]
2000237c:	681b      	ldr	r3, [r3, #0]
2000237e:	687a      	ldr	r2, [r7, #4]
20002380:	6812      	ldr	r2, [r2, #0]
20002382:	6812      	ldr	r2, [r2, #0]
20002384:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
20002388:	601a      	str	r2, [r3, #0]
}
2000238a:	f107 0710 	add.w	r7, r7, #16
2000238e:	46bd      	mov	sp, r7
20002390:	bd80      	pop	{r7, pc}
20002392:	bf00      	nop

20002394 <recover_from_rx_overflow>:
 */
static void recover_from_rx_overflow
(
    mss_spi_instance_t * this_spi
)
{
20002394:	b580      	push	{r7, lr}
20002396:	b08a      	sub	sp, #40	; 0x28
20002398:	af00      	add	r7, sp, #0
2000239a:	6078      	str	r0, [r7, #4]
    uint32_t slave_select;
    
    /*
     * Read current SPI hardware block configuration.
     */
    control_reg = this_spi->hw_reg->CONTROL;
2000239c:	687b      	ldr	r3, [r7, #4]
2000239e:	681b      	ldr	r3, [r3, #0]
200023a0:	681b      	ldr	r3, [r3, #0]
200023a2:	60fb      	str	r3, [r7, #12]
    clk_gen = this_spi->hw_reg->CLK_GEN;
200023a4:	687b      	ldr	r3, [r7, #4]
200023a6:	681b      	ldr	r3, [r3, #0]
200023a8:	699b      	ldr	r3, [r3, #24]
200023aa:	613b      	str	r3, [r7, #16]
    frame_size = this_spi->hw_reg->TXRXDF_SIZE;
200023ac:	687b      	ldr	r3, [r7, #4]
200023ae:	681b      	ldr	r3, [r3, #0]
200023b0:	685b      	ldr	r3, [r3, #4]
200023b2:	617b      	str	r3, [r7, #20]
    control2 = this_spi->hw_reg->CONTROL2;
200023b4:	687b      	ldr	r3, [r7, #4]
200023b6:	681b      	ldr	r3, [r3, #0]
200023b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
200023ba:	61bb      	str	r3, [r7, #24]
    packet_size = this_spi->hw_reg->PKTSIZE;
200023bc:	687b      	ldr	r3, [r7, #4]
200023be:	681b      	ldr	r3, [r3, #0]
200023c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
200023c2:	61fb      	str	r3, [r7, #28]
    cmd_size = this_spi->hw_reg->CMDSIZE;
200023c4:	687b      	ldr	r3, [r7, #4]
200023c6:	681b      	ldr	r3, [r3, #0]
200023c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
200023ca:	623b      	str	r3, [r7, #32]
    slave_select = this_spi->hw_reg->SLAVE_SELECT;
200023cc:	687b      	ldr	r3, [r7, #4]
200023ce:	681b      	ldr	r3, [r3, #0]
200023d0:	69db      	ldr	r3, [r3, #28]
200023d2:	627b      	str	r3, [r7, #36]	; 0x24
     
    /*
     * Reset the SPI hardware block.
     */
    if(this_spi == &g_mss_spi0)
200023d4:	687a      	ldr	r2, [r7, #4]
200023d6:	f243 23a8 	movw	r3, #12968	; 0x32a8
200023da:	f2c2 0300 	movt	r3, #8192	; 0x2000
200023de:	429a      	cmp	r2, r3
200023e0:	d12e      	bne.n	20002440 <recover_from_rx_overflow+0xac>
    {
        this_spi->hw_reg = ((SPI_TypeDef *) SPI0_BASE);
200023e2:	687a      	ldr	r2, [r7, #4]
200023e4:	f241 0300 	movw	r3, #4096	; 0x1000
200023e8:	f2c4 0300 	movt	r3, #16384	; 0x4000
200023ec:	6013      	str	r3, [r2, #0]
        this_spi->irqn = SPI0_IRQn;
200023ee:	687b      	ldr	r3, [r7, #4]
200023f0:	f04f 0202 	mov.w	r2, #2
200023f4:	711a      	strb	r2, [r3, #4]

        /* reset SPI0 */
        SYSREG->SOFT_RST_CR |= SYSREG_SPI0_SOFTRESET_MASK;
200023f6:	f248 0300 	movw	r3, #32768	; 0x8000
200023fa:	f2c4 0303 	movt	r3, #16387	; 0x4003
200023fe:	f248 0200 	movw	r2, #32768	; 0x8000
20002402:	f2c4 0203 	movt	r2, #16387	; 0x4003
20002406:	6c92      	ldr	r2, [r2, #72]	; 0x48
20002408:	f442 7200 	orr.w	r2, r2, #512	; 0x200
2000240c:	649a      	str	r2, [r3, #72]	; 0x48
        /* Clear any previously pended SPI0 interrupt */
        NVIC_ClearPendingIRQ(SPI0_IRQn);
2000240e:	f04f 0002 	mov.w	r0, #2
20002412:	f7ff ff07 	bl	20002224 <NVIC_ClearPendingIRQ>
        /* Take SPI0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_SPI0_SOFTRESET_MASK;
20002416:	f248 0300 	movw	r3, #32768	; 0x8000
2000241a:	f2c4 0303 	movt	r3, #16387	; 0x4003
2000241e:	f248 0200 	movw	r2, #32768	; 0x8000
20002422:	f2c4 0203 	movt	r2, #16387	; 0x4003
20002426:	6c92      	ldr	r2, [r2, #72]	; 0x48
20002428:	f422 7200 	bic.w	r2, r2, #512	; 0x200
2000242c:	649a      	str	r2, [r3, #72]	; 0x48

        this_spi->hw_reg->CONTROL &= ~CTRL_REG_RESET_MASK;
2000242e:	687b      	ldr	r3, [r7, #4]
20002430:	681b      	ldr	r3, [r3, #0]
20002432:	687a      	ldr	r2, [r7, #4]
20002434:	6812      	ldr	r2, [r2, #0]
20002436:	6812      	ldr	r2, [r2, #0]
20002438:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
2000243c:	601a      	str	r2, [r3, #0]
2000243e:	e02d      	b.n	2000249c <recover_from_rx_overflow+0x108>
    }
    else
    {
        this_spi->hw_reg = ((SPI_TypeDef *) SPI1_BASE);
20002440:	687a      	ldr	r2, [r7, #4]
20002442:	f241 0300 	movw	r3, #4096	; 0x1000
20002446:	f2c4 0301 	movt	r3, #16385	; 0x4001
2000244a:	6013      	str	r3, [r2, #0]
        this_spi->irqn = SPI1_IRQn;
2000244c:	687b      	ldr	r3, [r7, #4]
2000244e:	f04f 0203 	mov.w	r2, #3
20002452:	711a      	strb	r2, [r3, #4]
        
        /* reset SPI1 */
        SYSREG->SOFT_RST_CR |= SYSREG_SPI1_SOFTRESET_MASK;
20002454:	f248 0300 	movw	r3, #32768	; 0x8000
20002458:	f2c4 0303 	movt	r3, #16387	; 0x4003
2000245c:	f248 0200 	movw	r2, #32768	; 0x8000
20002460:	f2c4 0203 	movt	r2, #16387	; 0x4003
20002464:	6c92      	ldr	r2, [r2, #72]	; 0x48
20002466:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
2000246a:	649a      	str	r2, [r3, #72]	; 0x48
        /* Clear any previously pended SPI1 interrupt */
        NVIC_ClearPendingIRQ(SPI1_IRQn);
2000246c:	f04f 0003 	mov.w	r0, #3
20002470:	f7ff fed8 	bl	20002224 <NVIC_ClearPendingIRQ>
        /* Take SPI1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_SPI1_SOFTRESET_MASK;
20002474:	f248 0300 	movw	r3, #32768	; 0x8000
20002478:	f2c4 0303 	movt	r3, #16387	; 0x4003
2000247c:	f248 0200 	movw	r2, #32768	; 0x8000
20002480:	f2c4 0203 	movt	r2, #16387	; 0x4003
20002484:	6c92      	ldr	r2, [r2, #72]	; 0x48
20002486:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
2000248a:	649a      	str	r2, [r3, #72]	; 0x48
        
        this_spi->hw_reg->CONTROL &= ~CTRL_REG_RESET_MASK;
2000248c:	687b      	ldr	r3, [r7, #4]
2000248e:	681b      	ldr	r3, [r3, #0]
20002490:	687a      	ldr	r2, [r7, #4]
20002492:	6812      	ldr	r2, [r2, #0]
20002494:	6812      	ldr	r2, [r2, #0]
20002496:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
2000249a:	601a      	str	r2, [r3, #0]
    }
    
    /*
     * Restore SPI hardware block configuration.
     */
    control_reg &= ~(uint32_t)CTRL_ENABLE_MASK;
2000249c:	68fb      	ldr	r3, [r7, #12]
2000249e:	f023 0301 	bic.w	r3, r3, #1
200024a2:	60fb      	str	r3, [r7, #12]
    this_spi->hw_reg->CONTROL = control_reg;
200024a4:	687b      	ldr	r3, [r7, #4]
200024a6:	681b      	ldr	r3, [r3, #0]
200024a8:	68fa      	ldr	r2, [r7, #12]
200024aa:	601a      	str	r2, [r3, #0]
    this_spi->hw_reg->CLK_GEN = clk_gen;
200024ac:	687b      	ldr	r3, [r7, #4]
200024ae:	681b      	ldr	r3, [r3, #0]
200024b0:	693a      	ldr	r2, [r7, #16]
200024b2:	619a      	str	r2, [r3, #24]
    this_spi->hw_reg->TXRXDF_SIZE = frame_size;
200024b4:	687b      	ldr	r3, [r7, #4]
200024b6:	681b      	ldr	r3, [r3, #0]
200024b8:	697a      	ldr	r2, [r7, #20]
200024ba:	605a      	str	r2, [r3, #4]
    this_spi->hw_reg->CONTROL |= CTRL_ENABLE_MASK;
200024bc:	687b      	ldr	r3, [r7, #4]
200024be:	681b      	ldr	r3, [r3, #0]
200024c0:	687a      	ldr	r2, [r7, #4]
200024c2:	6812      	ldr	r2, [r2, #0]
200024c4:	6812      	ldr	r2, [r2, #0]
200024c6:	f042 0201 	orr.w	r2, r2, #1
200024ca:	601a      	str	r2, [r3, #0]
    this_spi->hw_reg->CONTROL2 = control2;
200024cc:	687b      	ldr	r3, [r7, #4]
200024ce:	681b      	ldr	r3, [r3, #0]
200024d0:	69ba      	ldr	r2, [r7, #24]
200024d2:	629a      	str	r2, [r3, #40]	; 0x28
    this_spi->hw_reg->PKTSIZE = packet_size;
200024d4:	687b      	ldr	r3, [r7, #4]
200024d6:	681b      	ldr	r3, [r3, #0]
200024d8:	69fa      	ldr	r2, [r7, #28]
200024da:	631a      	str	r2, [r3, #48]	; 0x30
    this_spi->hw_reg->CMDSIZE = cmd_size;
200024dc:	687b      	ldr	r3, [r7, #4]
200024de:	681b      	ldr	r3, [r3, #0]
200024e0:	6a3a      	ldr	r2, [r7, #32]
200024e2:	635a      	str	r2, [r3, #52]	; 0x34
    this_spi->hw_reg->SLAVE_SELECT = slave_select;
200024e4:	687b      	ldr	r3, [r7, #4]
200024e6:	681b      	ldr	r3, [r3, #0]
200024e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
200024ea:	61da      	str	r2, [r3, #28]
}
200024ec:	f107 0728 	add.w	r7, r7, #40	; 0x28
200024f0:	46bd      	mov	sp, r7
200024f2:	bd80      	pop	{r7, pc}

200024f4 <MSS_SPI_configure_master_mode>:
    mss_spi_slave_t         slave,
    mss_spi_protocol_mode_t protocol_mode,
    uint32_t                clk_div,
    uint8_t                 frame_bit_length
)
{
200024f4:	b580      	push	{r7, lr}
200024f6:	b086      	sub	sp, #24
200024f8:	af00      	add	r7, sp, #0
200024fa:	60f8      	str	r0, [r7, #12]
200024fc:	607a      	str	r2, [r7, #4]
200024fe:	603b      	str	r3, [r7, #0]
20002500:	460b      	mov	r3, r1
20002502:	72fb      	strb	r3, [r7, #11]
    ASSERT((this_spi == &g_mss_spi0) || (this_spi == &g_mss_spi1));
20002504:	68fa      	ldr	r2, [r7, #12]
20002506:	f243 23a8 	movw	r3, #12968	; 0x32a8
2000250a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000250e:	429a      	cmp	r2, r3
20002510:	d007      	beq.n	20002522 <MSS_SPI_configure_master_mode+0x2e>
20002512:	68fa      	ldr	r2, [r7, #12]
20002514:	f243 2324 	movw	r3, #12836	; 0x3224
20002518:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000251c:	429a      	cmp	r2, r3
2000251e:	d000      	beq.n	20002522 <MSS_SPI_configure_master_mode+0x2e>
20002520:	be00      	bkpt	0x0000
    ASSERT(slave < MSS_SPI_MAX_NB_OF_SLAVES);
20002522:	7afb      	ldrb	r3, [r7, #11]
20002524:	2b07      	cmp	r3, #7
20002526:	d900      	bls.n	2000252a <MSS_SPI_configure_master_mode+0x36>
20002528:	be00      	bkpt	0x0000
    ASSERT(frame_bit_length <= MAX_FRAME_LENGTH);
2000252a:	f897 3020 	ldrb.w	r3, [r7, #32]
2000252e:	2b20      	cmp	r3, #32
20002530:	d900      	bls.n	20002534 <MSS_SPI_configure_master_mode+0x40>
20002532:	be00      	bkpt	0x0000
     /* Check that the requested clock divider is within range and an even number. */
    ASSERT(clk_div >= 2u);
20002534:	683b      	ldr	r3, [r7, #0]
20002536:	2b01      	cmp	r3, #1
20002538:	d800      	bhi.n	2000253c <MSS_SPI_configure_master_mode+0x48>
2000253a:	be00      	bkpt	0x0000
    ASSERT(clk_div <= 512u);
2000253c:	683b      	ldr	r3, [r7, #0]
2000253e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
20002542:	d900      	bls.n	20002546 <MSS_SPI_configure_master_mode+0x52>
20002544:	be00      	bkpt	0x0000
    ASSERT(0u == (clk_div & 0x00000001));
20002546:	683b      	ldr	r3, [r7, #0]
20002548:	f003 0301 	and.w	r3, r3, #1
2000254c:	2b00      	cmp	r3, #0
2000254e:	d000      	beq.n	20002552 <MSS_SPI_configure_master_mode+0x5e>
20002550:	be00      	bkpt	0x0000
   
    /* Shut down interrupts from the MSS SPI while we do this */
    NVIC_DisableIRQ( this_spi->irqn );
20002552:	68fb      	ldr	r3, [r7, #12]
20002554:	791b      	ldrb	r3, [r3, #4]
20002556:	b25b      	sxtb	r3, r3
20002558:	4618      	mov	r0, r3
2000255a:	f7ff fe45 	bl	200021e8 <NVIC_DisableIRQ>

    /* Reset slave transfer mode to unknown to wipe slate clean */
    this_spi->slave_xfer_mode = MSS_SPI_SLAVE_XFER_NONE;
2000255e:	68fb      	ldr	r3, [r7, #12]
20002560:	f04f 0200 	mov.w	r2, #0
20002564:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set the mode. */
    this_spi->hw_reg->CONTROL &= ~(uint32_t)CTRL_ENABLE_MASK;
20002568:	68fb      	ldr	r3, [r7, #12]
2000256a:	681b      	ldr	r3, [r3, #0]
2000256c:	68fa      	ldr	r2, [r7, #12]
2000256e:	6812      	ldr	r2, [r2, #0]
20002570:	6812      	ldr	r2, [r2, #0]
20002572:	f022 0201 	bic.w	r2, r2, #1
20002576:	601a      	str	r2, [r3, #0]
    this_spi->hw_reg->CONTROL |= CTRL_MASTER_MASK;
20002578:	68fb      	ldr	r3, [r7, #12]
2000257a:	681b      	ldr	r3, [r3, #0]
2000257c:	68fa      	ldr	r2, [r7, #12]
2000257e:	6812      	ldr	r2, [r2, #0]
20002580:	6812      	ldr	r2, [r2, #0]
20002582:	f042 0202 	orr.w	r2, r2, #2
20002586:	601a      	str	r2, [r3, #0]
    this_spi->hw_reg->CONTROL |= CTRL_ENABLE_MASK;
20002588:	68fb      	ldr	r3, [r7, #12]
2000258a:	681b      	ldr	r3, [r3, #0]
2000258c:	68fa      	ldr	r2, [r7, #12]
2000258e:	6812      	ldr	r2, [r2, #0]
20002590:	6812      	ldr	r2, [r2, #0]
20002592:	f042 0201 	orr.w	r2, r2, #1
20002596:	601a      	str	r2, [r3, #0]
    /*
     * Keep track of the required register configuration for this slave. These
     * values will be used by the MSS_SPI_set_slave_select() function to configure
     * the master to match the slave being selected.
     */
    if(slave < MSS_SPI_MAX_NB_OF_SLAVES)     
20002598:	7afb      	ldrb	r3, [r7, #11]
2000259a:	2b07      	cmp	r3, #7
2000259c:	d847      	bhi.n	2000262e <MSS_SPI_configure_master_mode+0x13a>
        * Setting the SPS bit ensures the slave select remains asserted even
        * if we don't keep the TX FIFO filled in block mode. We only do it for
        * Motorola modes and if you need the slave selected deselected between
        * frames in modes 0 or 2 then remove SPS_MASK from below.
        */
        if((MSS_SPI_MODE0 == protocol_mode) || (MSS_SPI_MODE1 == protocol_mode) ||
2000259e:	687b      	ldr	r3, [r7, #4]
200025a0:	2b00      	cmp	r3, #0
200025a2:	d00b      	beq.n	200025bc <MSS_SPI_configure_master_mode+0xc8>
200025a4:	687b      	ldr	r3, [r7, #4]
200025a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
200025aa:	d007      	beq.n	200025bc <MSS_SPI_configure_master_mode+0xc8>
200025ac:	687b      	ldr	r3, [r7, #4]
200025ae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
200025b2:	d003      	beq.n	200025bc <MSS_SPI_configure_master_mode+0xc8>
200025b4:	687b      	ldr	r3, [r7, #4]
200025b6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
200025ba:	d10f      	bne.n	200025dc <MSS_SPI_configure_master_mode+0xe8>
           (MSS_SPI_MODE2 == protocol_mode) || (MSS_SPI_MODE3 == protocol_mode))
        {
            this_spi->slaves_cfg[slave].ctrl_reg = MASTER_MODE_MASK | SPS_MASK |
200025bc:	7afa      	ldrb	r2, [r7, #11]
200025be:	6879      	ldr	r1, [r7, #4]
200025c0:	f240 1302 	movw	r3, #258	; 0x102
200025c4:	f2c3 4300 	movt	r3, #13312	; 0x3400
200025c8:	ea41 0303 	orr.w	r3, r1, r3
200025cc:	68f9      	ldr	r1, [r7, #12]
200025ce:	f102 0206 	add.w	r2, r2, #6
200025d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
200025d6:	440a      	add	r2, r1
200025d8:	6053      	str	r3, [r2, #4]
        * Setting the SPS bit ensures the slave select remains asserted even
        * if we don't keep the TX FIFO filled in block mode. We only do it for
        * Motorola modes and if you need the slave selected deselected between
        * frames in modes 0 or 2 then remove SPS_MASK from below.
        */
        if((MSS_SPI_MODE0 == protocol_mode) || (MSS_SPI_MODE1 == protocol_mode) ||
200025da:	e00e      	b.n	200025fa <MSS_SPI_configure_master_mode+0x106>
                                                   (uint32_t)protocol_mode | 
                                                   ((uint32_t)1 << TXRXDFCOUNT_SHIFT);
        }
        else
        {
            this_spi->slaves_cfg[slave].ctrl_reg = MASTER_MODE_MASK |
200025dc:	7afa      	ldrb	r2, [r7, #11]
200025de:	6879      	ldr	r1, [r7, #4]
200025e0:	f240 1302 	movw	r3, #258	; 0x102
200025e4:	f2c3 0300 	movt	r3, #12288	; 0x3000
200025e8:	ea41 0303 	orr.w	r3, r1, r3
200025ec:	68f9      	ldr	r1, [r7, #12]
200025ee:	f102 0206 	add.w	r2, r2, #6
200025f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
200025f6:	440a      	add	r2, r1
200025f8:	6053      	str	r3, [r2, #4]
                                                   BIGFIFO_MASK | CTRL_CLKMODE_MASK |
                                                   (uint32_t)protocol_mode | 
                                                   ((uint32_t)1 << TXRXDFCOUNT_SHIFT);
        }
        this_spi->slaves_cfg[slave].txrxdf_size_reg = frame_bit_length;
200025fa:	7afb      	ldrb	r3, [r7, #11]
200025fc:	68fa      	ldr	r2, [r7, #12]
200025fe:	f103 0306 	add.w	r3, r3, #6
20002602:	ea4f 03c3 	mov.w	r3, r3, lsl #3
20002606:	4413      	add	r3, r2
20002608:	f897 2020 	ldrb.w	r2, [r7, #32]
2000260c:	721a      	strb	r2, [r3, #8]

        clk_gen = (clk_div / 2u) - 1u;
2000260e:	683b      	ldr	r3, [r7, #0]
20002610:	ea4f 0353 	mov.w	r3, r3, lsr #1
20002614:	f103 33ff 	add.w	r3, r3, #4294967295
20002618:	617b      	str	r3, [r7, #20]
        this_spi->slaves_cfg[slave].clk_gen = (uint8_t)clk_gen;
2000261a:	7afb      	ldrb	r3, [r7, #11]
2000261c:	697a      	ldr	r2, [r7, #20]
2000261e:	b2d2      	uxtb	r2, r2
20002620:	68f9      	ldr	r1, [r7, #12]
20002622:	f103 0306 	add.w	r3, r3, #6
20002626:	ea4f 03c3 	mov.w	r3, r3, lsl #3
2000262a:	440b      	add	r3, r1
2000262c:	725a      	strb	r2, [r3, #9]
    }
    /* Reenable interrupts */
    NVIC_EnableIRQ( this_spi->irqn );
2000262e:	68fb      	ldr	r3, [r7, #12]
20002630:	791b      	ldrb	r3, [r3, #4]
20002632:	b25b      	sxtb	r3, r3
20002634:	4618      	mov	r0, r3
20002636:	f7ff fdbb 	bl	200021b0 <NVIC_EnableIRQ>
}
2000263a:	f107 0718 	add.w	r7, r7, #24
2000263e:	46bd      	mov	sp, r7
20002640:	bd80      	pop	{r7, pc}
20002642:	bf00      	nop

20002644 <fill_slave_tx_fifo>:
 */
static void fill_slave_tx_fifo
(
    mss_spi_instance_t * this_spi
)
{
20002644:	b480      	push	{r7}
20002646:	b085      	sub	sp, #20
20002648:	af00      	add	r7, sp, #0
2000264a:	6078      	str	r0, [r7, #4]
    uint32_t guard = 0u;
2000264c:	f04f 0300 	mov.w	r3, #0
20002650:	60fb      	str	r3, [r7, #12]

    while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
20002652:	e00e      	b.n	20002672 <fill_slave_tx_fifo+0x2e>
          (this_spi->slave_tx_idx < this_spi->slave_tx_size))
    {
        /* Sending from primary slave transmit buffer */
        this_spi->hw_reg->TX_DATA = this_spi->slave_tx_buffer[this_spi->slave_tx_idx];
20002654:	687b      	ldr	r3, [r7, #4]
20002656:	681b      	ldr	r3, [r3, #0]
20002658:	687a      	ldr	r2, [r7, #4]
2000265a:	6891      	ldr	r1, [r2, #8]
2000265c:	687a      	ldr	r2, [r7, #4]
2000265e:	6912      	ldr	r2, [r2, #16]
20002660:	440a      	add	r2, r1
20002662:	7812      	ldrb	r2, [r2, #0]
20002664:	615a      	str	r2, [r3, #20]
        ++this_spi->slave_tx_idx;
20002666:	687b      	ldr	r3, [r7, #4]
20002668:	691b      	ldr	r3, [r3, #16]
2000266a:	f103 0201 	add.w	r2, r3, #1
2000266e:	687b      	ldr	r3, [r7, #4]
20002670:	611a      	str	r2, [r3, #16]
    mss_spi_instance_t * this_spi
)
{
    uint32_t guard = 0u;

    while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
20002672:	687b      	ldr	r3, [r7, #4]
20002674:	681b      	ldr	r3, [r3, #0]
20002676:	689b      	ldr	r3, [r3, #8]
20002678:	f403 7380 	and.w	r3, r3, #256	; 0x100
2000267c:	2b00      	cmp	r3, #0
2000267e:	d105      	bne.n	2000268c <fill_slave_tx_fifo+0x48>
          (this_spi->slave_tx_idx < this_spi->slave_tx_size))
20002680:	687b      	ldr	r3, [r7, #4]
20002682:	691a      	ldr	r2, [r3, #16]
20002684:	687b      	ldr	r3, [r7, #4]
20002686:	68db      	ldr	r3, [r3, #12]
    mss_spi_instance_t * this_spi
)
{
    uint32_t guard = 0u;

    while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
20002688:	429a      	cmp	r2, r3
2000268a:	d3e3      	bcc.n	20002654 <fill_slave_tx_fifo+0x10>
        /* Sending from primary slave transmit buffer */
        this_spi->hw_reg->TX_DATA = this_spi->slave_tx_buffer[this_spi->slave_tx_idx];
        ++this_spi->slave_tx_idx;
    }

    if(this_spi->slave_tx_idx >= this_spi->slave_tx_size)
2000268c:	687b      	ldr	r3, [r7, #4]
2000268e:	691a      	ldr	r2, [r3, #16]
20002690:	687b      	ldr	r3, [r7, #4]
20002692:	68db      	ldr	r3, [r3, #12]
20002694:	429a      	cmp	r2, r3
20002696:	d31c      	bcc.n	200026d2 <fill_slave_tx_fifo+0x8e>
    {
        while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
20002698:	e00e      	b.n	200026b8 <fill_slave_tx_fifo+0x74>
              (this_spi->resp_buff_tx_idx < this_spi->resp_buff_size))
        {
            /* Sending from command response buffer */
            this_spi->hw_reg->TX_DATA = this_spi->resp_tx_buffer[this_spi->resp_buff_tx_idx];
2000269a:	687b      	ldr	r3, [r7, #4]
2000269c:	681b      	ldr	r3, [r3, #0]
2000269e:	687a      	ldr	r2, [r7, #4]
200026a0:	6951      	ldr	r1, [r2, #20]
200026a2:	687a      	ldr	r2, [r7, #4]
200026a4:	69d2      	ldr	r2, [r2, #28]
200026a6:	440a      	add	r2, r1
200026a8:	7812      	ldrb	r2, [r2, #0]
200026aa:	615a      	str	r2, [r3, #20]
            ++this_spi->resp_buff_tx_idx;
200026ac:	687b      	ldr	r3, [r7, #4]
200026ae:	69db      	ldr	r3, [r3, #28]
200026b0:	f103 0201 	add.w	r2, r3, #1
200026b4:	687b      	ldr	r3, [r7, #4]
200026b6:	61da      	str	r2, [r3, #28]
        ++this_spi->slave_tx_idx;
    }

    if(this_spi->slave_tx_idx >= this_spi->slave_tx_size)
    {
        while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
200026b8:	687b      	ldr	r3, [r7, #4]
200026ba:	681b      	ldr	r3, [r3, #0]
200026bc:	689b      	ldr	r3, [r3, #8]
200026be:	f403 7380 	and.w	r3, r3, #256	; 0x100
200026c2:	2b00      	cmp	r3, #0
200026c4:	d105      	bne.n	200026d2 <fill_slave_tx_fifo+0x8e>
              (this_spi->resp_buff_tx_idx < this_spi->resp_buff_size))
200026c6:	687b      	ldr	r3, [r7, #4]
200026c8:	69da      	ldr	r2, [r3, #28]
200026ca:	687b      	ldr	r3, [r7, #4]
200026cc:	699b      	ldr	r3, [r3, #24]
        ++this_spi->slave_tx_idx;
    }

    if(this_spi->slave_tx_idx >= this_spi->slave_tx_size)
    {
        while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
200026ce:	429a      	cmp	r2, r3
200026d0:	d3e3      	bcc.n	2000269a <fill_slave_tx_fifo+0x56>
            this_spi->hw_reg->TX_DATA = this_spi->resp_tx_buffer[this_spi->resp_buff_tx_idx];
            ++this_spi->resp_buff_tx_idx;
        }
    }

    if((0u != this_spi->cmd_done) && (this_spi->slave_tx_idx >= this_spi->slave_tx_size) &&
200026d2:	687b      	ldr	r3, [r7, #4]
200026d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
200026d6:	2b00      	cmp	r3, #0
200026d8:	d01f      	beq.n	2000271a <fill_slave_tx_fifo+0xd6>
200026da:	687b      	ldr	r3, [r7, #4]
200026dc:	691a      	ldr	r2, [r3, #16]
200026de:	687b      	ldr	r3, [r7, #4]
200026e0:	68db      	ldr	r3, [r3, #12]
200026e2:	429a      	cmp	r2, r3
200026e4:	d319      	bcc.n	2000271a <fill_slave_tx_fifo+0xd6>
       (this_spi->resp_buff_tx_idx >= this_spi->resp_buff_size))
200026e6:	687b      	ldr	r3, [r7, #4]
200026e8:	69da      	ldr	r2, [r3, #28]
200026ea:	687b      	ldr	r3, [r7, #4]
200026ec:	699b      	ldr	r3, [r3, #24]
            this_spi->hw_reg->TX_DATA = this_spi->resp_tx_buffer[this_spi->resp_buff_tx_idx];
            ++this_spi->resp_buff_tx_idx;
        }
    }

    if((0u != this_spi->cmd_done) && (this_spi->slave_tx_idx >= this_spi->slave_tx_size) &&
200026ee:	429a      	cmp	r2, r3
200026f0:	d313      	bcc.n	2000271a <fill_slave_tx_fifo+0xd6>
       (this_spi->resp_buff_tx_idx >= this_spi->resp_buff_size))
    {
        while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
200026f2:	e008      	b.n	20002706 <fill_slave_tx_fifo+0xc2>
              (guard < BIG_FIFO_SIZE))
        {
            /* Nothing left so pad with 0s for consistency */
            this_spi->hw_reg->TX_DATA = 0x00u;
200026f4:	687b      	ldr	r3, [r7, #4]
200026f6:	681b      	ldr	r3, [r3, #0]
200026f8:	f04f 0200 	mov.w	r2, #0
200026fc:	615a      	str	r2, [r3, #20]
             * We use the guard count to cover the unlikely event that we are
             * never seeing the TX FIFO full because the data is being pulled
             * out as fast as we can stuff it in. In this event we never spend
             * more than a full FIFOs worth of time spinning here.
             */
            guard++;
200026fe:	68fb      	ldr	r3, [r7, #12]
20002700:	f103 0301 	add.w	r3, r3, #1
20002704:	60fb      	str	r3, [r7, #12]
    }

    if((0u != this_spi->cmd_done) && (this_spi->slave_tx_idx >= this_spi->slave_tx_size) &&
       (this_spi->resp_buff_tx_idx >= this_spi->resp_buff_size))
    {
        while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
20002706:	687b      	ldr	r3, [r7, #4]
20002708:	681b      	ldr	r3, [r3, #0]
2000270a:	689b      	ldr	r3, [r3, #8]
2000270c:	f403 7380 	and.w	r3, r3, #256	; 0x100
20002710:	2b00      	cmp	r3, #0
20002712:	d102      	bne.n	2000271a <fill_slave_tx_fifo+0xd6>
20002714:	68fb      	ldr	r3, [r7, #12]
20002716:	2b1f      	cmp	r3, #31
20002718:	d9ec      	bls.n	200026f4 <fill_slave_tx_fifo+0xb0>
             */
            guard++;
        }
    }

}
2000271a:	f107 0714 	add.w	r7, r7, #20
2000271e:	46bd      	mov	sp, r7
20002720:	bc80      	pop	{r7}
20002722:	4770      	bx	lr

20002724 <read_slave_rx_fifo>:
 */
static void read_slave_rx_fifo
(
    mss_spi_instance_t * this_spi
)
{
20002724:	b580      	push	{r7, lr}
20002726:	b084      	sub	sp, #16
20002728:	af00      	add	r7, sp, #0
2000272a:	6078      	str	r0, [r7, #4]
    volatile uint32_t rx_frame;
    
    if(MSS_SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode)
2000272c:	687b      	ldr	r3, [r7, #4]
2000272e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
20002732:	2b02      	cmp	r3, #2
20002734:	d115      	bne.n	20002762 <read_slave_rx_fifo+0x3e>
    {
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
20002736:	e00c      	b.n	20002752 <read_slave_rx_fifo+0x2e>
        {
            /* Single frame handling mode. */
            rx_frame = this_spi->hw_reg->RX_DATA;
20002738:	687b      	ldr	r3, [r7, #4]
2000273a:	681b      	ldr	r3, [r3, #0]
2000273c:	691b      	ldr	r3, [r3, #16]
2000273e:	60fb      	str	r3, [r7, #12]
            if(0u != this_spi->frame_rx_handler)
20002740:	687b      	ldr	r3, [r7, #4]
20002742:	6f5b      	ldr	r3, [r3, #116]	; 0x74
20002744:	2b00      	cmp	r3, #0
20002746:	d004      	beq.n	20002752 <read_slave_rx_fifo+0x2e>
            {
                this_spi->frame_rx_handler( rx_frame );
20002748:	687b      	ldr	r3, [r7, #4]
2000274a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
2000274c:	68fa      	ldr	r2, [r7, #12]
2000274e:	4610      	mov	r0, r2
20002750:	4798      	blx	r3
{
    volatile uint32_t rx_frame;
    
    if(MSS_SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode)
    {
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
20002752:	687b      	ldr	r3, [r7, #4]
20002754:	681b      	ldr	r3, [r3, #0]
20002756:	689b      	ldr	r3, [r3, #8]
20002758:	f003 0340 	and.w	r3, r3, #64	; 0x40
2000275c:	2b00      	cmp	r3, #0
2000275e:	d0eb      	beq.n	20002738 <read_slave_rx_fifo+0x14>
20002760:	e032      	b.n	200027c8 <read_slave_rx_fifo+0xa4>
            {
                this_spi->frame_rx_handler( rx_frame );
            }
        }
    }
    else if(MSS_SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode)
20002762:	687b      	ldr	r3, [r7, #4]
20002764:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
20002768:	2b01      	cmp	r3, #1
2000276a:	d125      	bne.n	200027b8 <read_slave_rx_fifo+0x94>
    {
        /* Block handling mode. */
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK)) /* Something needs to be read from FIFO */
2000276c:	e017      	b.n	2000279e <read_slave_rx_fifo+0x7a>
        {
            rx_frame = this_spi->hw_reg->RX_DATA;
2000276e:	687b      	ldr	r3, [r7, #4]
20002770:	681b      	ldr	r3, [r3, #0]
20002772:	691b      	ldr	r3, [r3, #16]
20002774:	60fb      	str	r3, [r7, #12]
            if(this_spi->slave_rx_idx < this_spi->slave_rx_size)
20002776:	687b      	ldr	r3, [r7, #4]
20002778:	6b1a      	ldr	r2, [r3, #48]	; 0x30
2000277a:	687b      	ldr	r3, [r7, #4]
2000277c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2000277e:	429a      	cmp	r2, r3
20002780:	d207      	bcs.n	20002792 <read_slave_rx_fifo+0x6e>
            {
                this_spi->slave_rx_buffer[this_spi->slave_rx_idx] = (uint8_t)rx_frame;
20002782:	687b      	ldr	r3, [r7, #4]
20002784:	6a9a      	ldr	r2, [r3, #40]	; 0x28
20002786:	687b      	ldr	r3, [r7, #4]
20002788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000278a:	4413      	add	r3, r2
2000278c:	68fa      	ldr	r2, [r7, #12]
2000278e:	b2d2      	uxtb	r2, r2
20002790:	701a      	strb	r2, [r3, #0]
            }

            ++this_spi->slave_rx_idx;
20002792:	687b      	ldr	r3, [r7, #4]
20002794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20002796:	f103 0201 	add.w	r2, r3, #1
2000279a:	687b      	ldr	r3, [r7, #4]
2000279c:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
    else if(MSS_SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode)
    {
        /* Block handling mode. */
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK)) /* Something needs to be read from FIFO */
2000279e:	687b      	ldr	r3, [r7, #4]
200027a0:	681b      	ldr	r3, [r3, #0]
200027a2:	689b      	ldr	r3, [r3, #8]
200027a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
200027a8:	2b00      	cmp	r3, #0
200027aa:	d0e0      	beq.n	2000276e <read_slave_rx_fifo+0x4a>
200027ac:	e00c      	b.n	200027c8 <read_slave_rx_fifo+0xa4>
    else
    {
        /* Should not happen... Just purge FIFO */
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
        {
            rx_frame = this_spi->hw_reg->RX_DATA;
200027ae:	687b      	ldr	r3, [r7, #4]
200027b0:	681b      	ldr	r3, [r3, #0]
200027b2:	691b      	ldr	r3, [r3, #16]
200027b4:	60fb      	str	r3, [r7, #12]
200027b6:	e000      	b.n	200027ba <read_slave_rx_fifo+0x96>
        }
    }
    else
    {
        /* Should not happen... Just purge FIFO */
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
200027b8:	bf00      	nop
200027ba:	687b      	ldr	r3, [r7, #4]
200027bc:	681b      	ldr	r3, [r3, #0]
200027be:	689b      	ldr	r3, [r3, #8]
200027c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
200027c4:	2b00      	cmp	r3, #0
200027c6:	d0f2      	beq.n	200027ae <read_slave_rx_fifo+0x8a>
        {
            rx_frame = this_spi->hw_reg->RX_DATA;
        }
    }
}
200027c8:	f107 0710 	add.w	r7, r7, #16
200027cc:	46bd      	mov	sp, r7
200027ce:	bd80      	pop	{r7, pc}

200027d0 <mss_spi_isr>:
 */
static void mss_spi_isr
(
    mss_spi_instance_t * this_spi
)
{    
200027d0:	b580      	push	{r7, lr}
200027d2:	b086      	sub	sp, #24
200027d4:	af00      	add	r7, sp, #0
200027d6:	6078      	str	r0, [r7, #4]
    volatile uint32_t rx_frame;
    __I  uint32_t *this_mis = &this_spi->hw_reg->MIS;
200027d8:	687b      	ldr	r3, [r7, #4]
200027da:	681b      	ldr	r3, [r3, #0]
200027dc:	f103 0320 	add.w	r3, r3, #32
200027e0:	613b      	str	r3, [r7, #16]

    ASSERT((this_spi == &g_mss_spi0) || (this_spi == &g_mss_spi1));
200027e2:	687a      	ldr	r2, [r7, #4]
200027e4:	f243 23a8 	movw	r3, #12968	; 0x32a8
200027e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200027ec:	429a      	cmp	r2, r3
200027ee:	d007      	beq.n	20002800 <mss_spi_isr+0x30>
200027f0:	687a      	ldr	r2, [r7, #4]
200027f2:	f243 2324 	movw	r3, #12836	; 0x3224
200027f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200027fa:	429a      	cmp	r2, r3
200027fc:	d000      	beq.n	20002800 <mss_spi_isr+0x30>
200027fe:	be00      	bkpt	0x0000
  
    if(0u != (*this_mis & RXDONE_IRQ_MASK))
20002800:	693b      	ldr	r3, [r7, #16]
20002802:	681b      	ldr	r3, [r3, #0]
20002804:	f003 0302 	and.w	r3, r3, #2
20002808:	2b00      	cmp	r3, #0
2000280a:	d052      	beq.n	200028b2 <mss_spi_isr+0xe2>
    {
        if(MSS_SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode)
2000280c:	687b      	ldr	r3, [r7, #4]
2000280e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
20002812:	2b02      	cmp	r3, #2
20002814:	d115      	bne.n	20002842 <mss_spi_isr+0x72>
        {
            /* Single frame handling mode. */
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
20002816:	e00c      	b.n	20002832 <mss_spi_isr+0x62>
            {
                rx_frame = this_spi->hw_reg->RX_DATA;
20002818:	687b      	ldr	r3, [r7, #4]
2000281a:	681b      	ldr	r3, [r3, #0]
2000281c:	691b      	ldr	r3, [r3, #16]
2000281e:	60fb      	str	r3, [r7, #12]
                if(0u != this_spi->frame_rx_handler)
20002820:	687b      	ldr	r3, [r7, #4]
20002822:	6f5b      	ldr	r3, [r3, #116]	; 0x74
20002824:	2b00      	cmp	r3, #0
20002826:	d004      	beq.n	20002832 <mss_spi_isr+0x62>
                {
                    this_spi->frame_rx_handler( rx_frame );
20002828:	687b      	ldr	r3, [r7, #4]
2000282a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
2000282c:	68fa      	ldr	r2, [r7, #12]
2000282e:	4610      	mov	r0, r2
20002830:	4798      	blx	r3
    if(0u != (*this_mis & RXDONE_IRQ_MASK))
    {
        if(MSS_SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode)
        {
            /* Single frame handling mode. */
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
20002832:	687b      	ldr	r3, [r7, #4]
20002834:	681b      	ldr	r3, [r3, #0]
20002836:	689b      	ldr	r3, [r3, #8]
20002838:	f003 0340 	and.w	r3, r3, #64	; 0x40
2000283c:	2b00      	cmp	r3, #0
2000283e:	d0eb      	beq.n	20002818 <mss_spi_isr+0x48>
20002840:	e032      	b.n	200028a8 <mss_spi_isr+0xd8>
                {
                    this_spi->frame_rx_handler( rx_frame );
                }
            }
        }
        else if(MSS_SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode)
20002842:	687b      	ldr	r3, [r7, #4]
20002844:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
20002848:	2b01      	cmp	r3, #1
2000284a:	d125      	bne.n	20002898 <mss_spi_isr+0xc8>
        {
            /* Block handling mode. */
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK)) /* Something needs to be read from FIFO */
2000284c:	e017      	b.n	2000287e <mss_spi_isr+0xae>
            {
                rx_frame = this_spi->hw_reg->RX_DATA;                /* Read from FIFO irrespective */
2000284e:	687b      	ldr	r3, [r7, #4]
20002850:	681b      	ldr	r3, [r3, #0]
20002852:	691b      	ldr	r3, [r3, #16]
20002854:	60fb      	str	r3, [r7, #12]
                if(this_spi->slave_rx_idx < this_spi->slave_rx_size) /* Write to array if required */
20002856:	687b      	ldr	r3, [r7, #4]
20002858:	6b1a      	ldr	r2, [r3, #48]	; 0x30
2000285a:	687b      	ldr	r3, [r7, #4]
2000285c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2000285e:	429a      	cmp	r2, r3
20002860:	d207      	bcs.n	20002872 <mss_spi_isr+0xa2>
                {
                    this_spi->slave_rx_buffer[this_spi->slave_rx_idx] = (uint8_t)rx_frame;
20002862:	687b      	ldr	r3, [r7, #4]
20002864:	6a9a      	ldr	r2, [r3, #40]	; 0x28
20002866:	687b      	ldr	r3, [r7, #4]
20002868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000286a:	4413      	add	r3, r2
2000286c:	68fa      	ldr	r2, [r7, #12]
2000286e:	b2d2      	uxtb	r2, r2
20002870:	701a      	strb	r2, [r3, #0]
                }

                ++this_spi->slave_rx_idx;            
20002872:	687b      	ldr	r3, [r7, #4]
20002874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20002876:	f103 0201 	add.w	r2, r3, #1
2000287a:	687b      	ldr	r3, [r7, #4]
2000287c:	631a      	str	r2, [r3, #48]	; 0x30
            }
        }
        else if(MSS_SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode)
        {
            /* Block handling mode. */
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK)) /* Something needs to be read from FIFO */
2000287e:	687b      	ldr	r3, [r7, #4]
20002880:	681b      	ldr	r3, [r3, #0]
20002882:	689b      	ldr	r3, [r3, #8]
20002884:	f003 0340 	and.w	r3, r3, #64	; 0x40
20002888:	2b00      	cmp	r3, #0
2000288a:	d0e0      	beq.n	2000284e <mss_spi_isr+0x7e>
2000288c:	e00c      	b.n	200028a8 <mss_spi_isr+0xd8>
        else
        {
            /* No slave handling in place so just purge FIFO */
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
            {
                rx_frame = this_spi->hw_reg->RX_DATA;
2000288e:	687b      	ldr	r3, [r7, #4]
20002890:	681b      	ldr	r3, [r3, #0]
20002892:	691b      	ldr	r3, [r3, #16]
20002894:	60fb      	str	r3, [r7, #12]
20002896:	e000      	b.n	2000289a <mss_spi_isr+0xca>
            }
        }
        else
        {
            /* No slave handling in place so just purge FIFO */
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
20002898:	bf00      	nop
2000289a:	687b      	ldr	r3, [r7, #4]
2000289c:	681b      	ldr	r3, [r3, #0]
2000289e:	689b      	ldr	r3, [r3, #8]
200028a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
200028a4:	2b00      	cmp	r3, #0
200028a6:	d0f2      	beq.n	2000288e <mss_spi_isr+0xbe>
            {
                rx_frame = this_spi->hw_reg->RX_DATA;
            }
        }

        this_spi->hw_reg->INT_CLEAR = RXDONE_IRQ_MASK;
200028a8:	687b      	ldr	r3, [r7, #4]
200028aa:	681b      	ldr	r3, [r3, #0]
200028ac:	f04f 0202 	mov.w	r2, #2
200028b0:	60da      	str	r2, [r3, #12]
    }

   /* Handle transmit. */
    if(0u != (*this_mis & TXDONE_IRQ_MASK))
200028b2:	693b      	ldr	r3, [r7, #16]
200028b4:	681b      	ldr	r3, [r3, #0]
200028b6:	f003 0301 	and.w	r3, r3, #1
200028ba:	b2db      	uxtb	r3, r3
200028bc:	2b00      	cmp	r3, #0
200028be:	d012      	beq.n	200028e6 <mss_spi_isr+0x116>
    {
        if( MSS_SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode )
200028c0:	687b      	ldr	r3, [r7, #4]
200028c2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
200028c6:	2b02      	cmp	r3, #2
200028c8:	d105      	bne.n	200028d6 <mss_spi_isr+0x106>
        {
           /* Reload slave tx frame into Tx data register. */
            this_spi->hw_reg->TX_DATA = this_spi->slave_tx_frame;
200028ca:	687b      	ldr	r3, [r7, #4]
200028cc:	681b      	ldr	r3, [r3, #0]
200028ce:	687a      	ldr	r2, [r7, #4]
200028d0:	6f92      	ldr	r2, [r2, #120]	; 0x78
200028d2:	615a      	str	r2, [r3, #20]
200028d4:	e002      	b.n	200028dc <mss_spi_isr+0x10c>
        }
        else /* Must be block mode so load FIFO to the max */
        {
            fill_slave_tx_fifo(this_spi);
200028d6:	6878      	ldr	r0, [r7, #4]
200028d8:	f7ff feb4 	bl	20002644 <fill_slave_tx_fifo>
        }

        this_spi->hw_reg->INT_CLEAR = TXDONE_IRQ_MASK;
200028dc:	687b      	ldr	r3, [r7, #4]
200028de:	681b      	ldr	r3, [r3, #0]
200028e0:	f04f 0201 	mov.w	r2, #1
200028e4:	60da      	str	r2, [r3, #12]
    }
    
    /* Handle command interrupt. */
    if(0u != (*this_mis & CMD_IRQ_MASK))
200028e6:	693b      	ldr	r3, [r7, #16]
200028e8:	681b      	ldr	r3, [r3, #0]
200028ea:	f003 0310 	and.w	r3, r3, #16
200028ee:	2b00      	cmp	r3, #0
200028f0:	d023      	beq.n	2000293a <mss_spi_isr+0x16a>
    {
        read_slave_rx_fifo(this_spi);
200028f2:	6878      	ldr	r0, [r7, #4]
200028f4:	f7ff ff16 	bl	20002724 <read_slave_rx_fifo>
        
        /*
         * Call the command handler if one exists.
         */
        if(0u != this_spi->cmd_handler)
200028f8:	687b      	ldr	r3, [r7, #4]
200028fa:	6a1b      	ldr	r3, [r3, #32]
200028fc:	2b00      	cmp	r3, #0
200028fe:	d00b      	beq.n	20002918 <mss_spi_isr+0x148>
        {
            (*this_spi->cmd_handler)(this_spi->slave_rx_buffer, this_spi->slave_rx_idx);
20002900:	687b      	ldr	r3, [r7, #4]
20002902:	6a1b      	ldr	r3, [r3, #32]
20002904:	687a      	ldr	r2, [r7, #4]
20002906:	6a91      	ldr	r1, [r2, #40]	; 0x28
20002908:	687a      	ldr	r2, [r7, #4]
2000290a:	6b12      	ldr	r2, [r2, #48]	; 0x30
2000290c:	4608      	mov	r0, r1
2000290e:	4611      	mov	r1, r2
20002910:	4798      	blx	r3
            fill_slave_tx_fifo(this_spi);
20002912:	6878      	ldr	r0, [r7, #4]
20002914:	f7ff fe96 	bl	20002644 <fill_slave_tx_fifo>
        }
        /* Set cmd_done to indicate it is now safe to 0 fill TX FIFO */
        this_spi->cmd_done = 1u;
20002918:	687b      	ldr	r3, [r7, #4]
2000291a:	f04f 0201 	mov.w	r2, #1
2000291e:	625a      	str	r2, [r3, #36]	; 0x24
        /* Disable command interrupt until slave select becomes de-asserted to avoid retriggering. */
        this_spi->hw_reg->CONTROL2 &= ~(uint32_t)C2_ENABLE_CMD_IRQ_MASK;
20002920:	687b      	ldr	r3, [r7, #4]
20002922:	681b      	ldr	r3, [r3, #0]
20002924:	687a      	ldr	r2, [r7, #4]
20002926:	6812      	ldr	r2, [r2, #0]
20002928:	6a92      	ldr	r2, [r2, #40]	; 0x28
2000292a:	f022 0210 	bic.w	r2, r2, #16
2000292e:	629a      	str	r2, [r3, #40]	; 0x28
        this_spi->hw_reg->INT_CLEAR = CMD_IRQ_MASK;
20002930:	687b      	ldr	r3, [r7, #4]
20002932:	681b      	ldr	r3, [r3, #0]
20002934:	f04f 0210 	mov.w	r2, #16
20002938:	60da      	str	r2, [r3, #12]
    }

    if(0u != (*this_mis & RXOVFLOW_IRQ_MASK))
2000293a:	693b      	ldr	r3, [r7, #16]
2000293c:	681b      	ldr	r3, [r3, #0]
2000293e:	f003 0304 	and.w	r3, r3, #4
20002942:	2b00      	cmp	r3, #0
20002944:	d00f      	beq.n	20002966 <mss_spi_isr+0x196>
    {
        /*
         * Receive overflow, not a lot we can do for this. Reset the receive
         *  FIFO, clear the interrupt and hope it doesn't happen again...
         */
        this_spi->hw_reg->COMMAND |= RX_FIFO_RESET_MASK;
20002946:	687b      	ldr	r3, [r7, #4]
20002948:	681b      	ldr	r3, [r3, #0]
2000294a:	687a      	ldr	r2, [r7, #4]
2000294c:	6812      	ldr	r2, [r2, #0]
2000294e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
20002950:	f042 0204 	orr.w	r2, r2, #4
20002954:	62da      	str	r2, [r3, #44]	; 0x2c
        recover_from_rx_overflow(this_spi);
20002956:	6878      	ldr	r0, [r7, #4]
20002958:	f7ff fd1c 	bl	20002394 <recover_from_rx_overflow>
        this_spi->hw_reg->INT_CLEAR = RXOVFLOW_IRQ_MASK;
2000295c:	687b      	ldr	r3, [r7, #4]
2000295e:	681b      	ldr	r3, [r3, #0]
20002960:	f04f 0204 	mov.w	r2, #4
20002964:	60da      	str	r2, [r3, #12]
     * slave TX FIFO data setup (if there is one).
     * In block mode this will probably not be very successful as we will
     * be out of synch with the master but the reset on SSEND will hopefully
     * take care of that for the next transfer.
     */
    if(0u != (*this_mis & TXURUN_IRQ_MASK))
20002966:	693b      	ldr	r3, [r7, #16]
20002968:	681b      	ldr	r3, [r3, #0]
2000296a:	f003 0308 	and.w	r3, r3, #8
2000296e:	2b00      	cmp	r3, #0
20002970:	d031      	beq.n	200029d6 <mss_spi_isr+0x206>
    {
        this_spi->hw_reg->COMMAND |= TX_FIFO_RESET_MASK;
20002972:	687b      	ldr	r3, [r7, #4]
20002974:	681b      	ldr	r3, [r3, #0]
20002976:	687a      	ldr	r2, [r7, #4]
20002978:	6812      	ldr	r2, [r2, #0]
2000297a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
2000297c:	f042 0208 	orr.w	r2, r2, #8
20002980:	62da      	str	r2, [r3, #44]	; 0x2c
        if( MSS_SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode )
20002982:	687b      	ldr	r3, [r7, #4]
20002984:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
20002988:	2b02      	cmp	r3, #2
2000298a:	d113      	bne.n	200029b4 <mss_spi_isr+0x1e4>
        {
            this_spi->hw_reg->CONTROL = (this_spi->hw_reg->CONTROL & ~TXRXDFCOUNT_MASK)
2000298c:	687b      	ldr	r3, [r7, #4]
2000298e:	681a      	ldr	r2, [r3, #0]
20002990:	687b      	ldr	r3, [r7, #4]
20002992:	681b      	ldr	r3, [r3, #0]
20002994:	6819      	ldr	r1, [r3, #0]
20002996:	f240 03ff 	movw	r3, #255	; 0xff
2000299a:	f6cf 7300 	movt	r3, #65280	; 0xff00
2000299e:	ea01 0303 	and.w	r3, r1, r3
200029a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
200029a6:	6013      	str	r3, [r2, #0]
                                        | ((uint32_t)1u << TXRXDFCOUNT_SHIFT);
           /* Reload slave tx frame into Tx data register. */
            this_spi->hw_reg->TX_DATA = this_spi->slave_tx_frame;
200029a8:	687b      	ldr	r3, [r7, #4]
200029aa:	681b      	ldr	r3, [r3, #0]
200029ac:	687a      	ldr	r2, [r7, #4]
200029ae:	6f92      	ldr	r2, [r2, #120]	; 0x78
200029b0:	615a      	str	r2, [r3, #20]
200029b2:	e00b      	b.n	200029cc <mss_spi_isr+0x1fc>
        }
        else if( MSS_SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode )
200029b4:	687b      	ldr	r3, [r7, #4]
200029b6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
200029ba:	2b01      	cmp	r3, #1
200029bc:	d106      	bne.n	200029cc <mss_spi_isr+0x1fc>
        {
            /* Block mode so reload FIFO to the max */
            this_spi->slave_tx_idx = 0u;
200029be:	687b      	ldr	r3, [r7, #4]
200029c0:	f04f 0200 	mov.w	r2, #0
200029c4:	611a      	str	r2, [r3, #16]
            fill_slave_tx_fifo(this_spi);
200029c6:	6878      	ldr	r0, [r7, #4]
200029c8:	f7ff fe3c 	bl	20002644 <fill_slave_tx_fifo>
        else
        {
            /* Not frame or block mode? Can't do anything here... */
        }

        this_spi->hw_reg->INT_CLEAR = TXURUN_IRQ_MASK;
200029cc:	687b      	ldr	r3, [r7, #4]
200029ce:	681b      	ldr	r3, [r3, #0]
200029d0:	f04f 0208 	mov.w	r2, #8
200029d4:	60da      	str	r2, [r3, #12]
    /*
     * Handle slave select becoming de-asserted. Only enables if
     * we are operating in block mode, in frame mode we do everything
     * in the receive and transmit interrupt handlers.
     */
    if(0u != (*this_mis & SSEND_IRQ_MASK))
200029d6:	693b      	ldr	r3, [r7, #16]
200029d8:	681b      	ldr	r3, [r3, #0]
200029da:	f003 0320 	and.w	r3, r3, #32
200029de:	2b00      	cmp	r3, #0
200029e0:	d049      	beq.n	20002a76 <mss_spi_isr+0x2a6>
    {
        uint32_t rx_size;
        
        read_slave_rx_fifo(this_spi);
200029e2:	6878      	ldr	r0, [r7, #4]
200029e4:	f7ff fe9e 	bl	20002724 <read_slave_rx_fifo>
        rx_size = this_spi->slave_rx_idx;
200029e8:	687b      	ldr	r3, [r7, #4]
200029ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
200029ec:	617b      	str	r3, [r7, #20]
        /*
         * Re-enable command interrupt if required and clear all the response
         * buffer state in readiness for next response. This must be done
         * before reloading the TX FIFO.
         */
        if(0 != this_spi->cmd_handler)
200029ee:	687b      	ldr	r3, [r7, #4]
200029f0:	6a1b      	ldr	r3, [r3, #32]
200029f2:	2b00      	cmp	r3, #0
200029f4:	d01c      	beq.n	20002a30 <mss_spi_isr+0x260>
        {
            this_spi->cmd_done = 0u;
200029f6:	687b      	ldr	r3, [r7, #4]
200029f8:	f04f 0200 	mov.w	r2, #0
200029fc:	625a      	str	r2, [r3, #36]	; 0x24
            this_spi->resp_tx_buffer = 0u;
200029fe:	687b      	ldr	r3, [r7, #4]
20002a00:	f04f 0200 	mov.w	r2, #0
20002a04:	615a      	str	r2, [r3, #20]
            this_spi->resp_buff_size = 0u;
20002a06:	687b      	ldr	r3, [r7, #4]
20002a08:	f04f 0200 	mov.w	r2, #0
20002a0c:	619a      	str	r2, [r3, #24]
            this_spi->resp_buff_tx_idx = 0u;
20002a0e:	687b      	ldr	r3, [r7, #4]
20002a10:	f04f 0200 	mov.w	r2, #0
20002a14:	61da      	str	r2, [r3, #28]
            this_spi->hw_reg->INT_CLEAR = CMD_IRQ_MASK;
20002a16:	687b      	ldr	r3, [r7, #4]
20002a18:	681b      	ldr	r3, [r3, #0]
20002a1a:	f04f 0210 	mov.w	r2, #16
20002a1e:	60da      	str	r2, [r3, #12]
            this_spi->hw_reg->CONTROL2 |= C2_ENABLE_CMD_IRQ_MASK;
20002a20:	687b      	ldr	r3, [r7, #4]
20002a22:	681b      	ldr	r3, [r3, #0]
20002a24:	687a      	ldr	r2, [r7, #4]
20002a26:	6812      	ldr	r2, [r2, #0]
20002a28:	6a92      	ldr	r2, [r2, #40]	; 0x28
20002a2a:	f042 0210 	orr.w	r2, r2, #16
20002a2e:	629a      	str	r2, [r3, #40]	; 0x28
        /* 
         * Reset the transmit index to 0 to restart transmit at the start of the
         * transmit buffer in the next transaction. This also requires flushing
         * the Tx FIFO and refilling it with the start of Tx data buffer.
         */
        this_spi->slave_tx_idx = 0u;
20002a30:	687b      	ldr	r3, [r7, #4]
20002a32:	f04f 0200 	mov.w	r2, #0
20002a36:	611a      	str	r2, [r3, #16]
        this_spi->hw_reg->COMMAND |= (TX_FIFO_RESET_MASK | RX_FIFO_RESET_MASK);
20002a38:	687b      	ldr	r3, [r7, #4]
20002a3a:	681b      	ldr	r3, [r3, #0]
20002a3c:	687a      	ldr	r2, [r7, #4]
20002a3e:	6812      	ldr	r2, [r2, #0]
20002a40:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
20002a42:	f042 020c 	orr.w	r2, r2, #12
20002a46:	62da      	str	r2, [r3, #44]	; 0x2c
        fill_slave_tx_fifo(this_spi);
20002a48:	6878      	ldr	r0, [r7, #4]
20002a4a:	f7ff fdfb 	bl	20002644 <fill_slave_tx_fifo>
        
        /* Prepare to receive next packet. */
        this_spi->slave_rx_idx = 0u;
20002a4e:	687b      	ldr	r3, [r7, #4]
20002a50:	f04f 0200 	mov.w	r2, #0
20002a54:	631a      	str	r2, [r3, #48]	; 0x30
        /*
         * Call the receive handler if one exists.
         */
        if(0u != this_spi->block_rx_handler)
20002a56:	687b      	ldr	r3, [r7, #4]
20002a58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
20002a5a:	2b00      	cmp	r3, #0
20002a5c:	d006      	beq.n	20002a6c <mss_spi_isr+0x29c>
        {
            (*this_spi->block_rx_handler)(this_spi->slave_rx_buffer, rx_size);
20002a5e:	687b      	ldr	r3, [r7, #4]
20002a60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
20002a62:	687a      	ldr	r2, [r7, #4]
20002a64:	6a92      	ldr	r2, [r2, #40]	; 0x28
20002a66:	4610      	mov	r0, r2
20002a68:	6979      	ldr	r1, [r7, #20]
20002a6a:	4798      	blx	r3
        }
        
        this_spi->hw_reg->INT_CLEAR = SSEND_IRQ_MASK;
20002a6c:	687b      	ldr	r3, [r7, #4]
20002a6e:	681b      	ldr	r3, [r3, #0]
20002a70:	f04f 0220 	mov.w	r2, #32
20002a74:	60da      	str	r2, [r3, #12]
    }
}
20002a76:	f107 0718 	add.w	r7, r7, #24
20002a7a:	46bd      	mov	sp, r7
20002a7c:	bd80      	pop	{r7, pc}
20002a7e:	bf00      	nop

20002a80 <SPI0_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void SPI0_IRQHandler(void)
#else
void SPI0_IRQHandler( void )
#endif
{
20002a80:	4668      	mov	r0, sp
20002a82:	f020 0107 	bic.w	r1, r0, #7
20002a86:	468d      	mov	sp, r1
20002a88:	b589      	push	{r0, r3, r7, lr}
20002a8a:	af00      	add	r7, sp, #0
    mss_spi_isr(&g_mss_spi0);
20002a8c:	f243 20a8 	movw	r0, #12968	; 0x32a8
20002a90:	f2c2 0000 	movt	r0, #8192	; 0x2000
20002a94:	f7ff fe9c 	bl	200027d0 <mss_spi_isr>
}
20002a98:	46bd      	mov	sp, r7
20002a9a:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002a9e:	4685      	mov	sp, r0
20002aa0:	4770      	bx	lr
20002aa2:	bf00      	nop

20002aa4 <SPI1_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void SPI1_IRQHandler(void)
#else
void SPI1_IRQHandler(void)
#endif
{
20002aa4:	4668      	mov	r0, sp
20002aa6:	f020 0107 	bic.w	r1, r0, #7
20002aaa:	468d      	mov	sp, r1
20002aac:	b589      	push	{r0, r3, r7, lr}
20002aae:	af00      	add	r7, sp, #0
    mss_spi_isr(&g_mss_spi1);
20002ab0:	f243 2024 	movw	r0, #12836	; 0x3224
20002ab4:	f2c2 0000 	movt	r0, #8192	; 0x2000
20002ab8:	f7ff fe8a 	bl	200027d0 <mss_spi_isr>
}
20002abc:	46bd      	mov	sp, r7
20002abe:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002ac2:	4685      	mov	sp, r0
20002ac4:	4770      	bx	lr
20002ac6:	bf00      	nop

20002ac8 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
20002ac8:	b480      	push	{r7}
20002aca:	b083      	sub	sp, #12
20002acc:	af00      	add	r7, sp, #0
20002ace:	4603      	mov	r3, r0
20002ad0:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
20002ad2:	f24e 1300 	movw	r3, #57600	; 0xe100
20002ad6:	f2ce 0300 	movt	r3, #57344	; 0xe000
20002ada:	f997 2007 	ldrsb.w	r2, [r7, #7]
20002ade:	ea4f 1252 	mov.w	r2, r2, lsr #5
20002ae2:	79f9      	ldrb	r1, [r7, #7]
20002ae4:	f001 011f 	and.w	r1, r1, #31
20002ae8:	f04f 0001 	mov.w	r0, #1
20002aec:	fa00 f101 	lsl.w	r1, r0, r1
20002af0:	f102 0220 	add.w	r2, r2, #32
20002af4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20002af8:	f107 070c 	add.w	r7, r7, #12
20002afc:	46bd      	mov	sp, r7
20002afe:	bc80      	pop	{r7}
20002b00:	4770      	bx	lr
20002b02:	bf00      	nop

20002b04 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
20002b04:	b480      	push	{r7}
20002b06:	b083      	sub	sp, #12
20002b08:	af00      	add	r7, sp, #0
20002b0a:	4603      	mov	r3, r0
20002b0c:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
20002b0e:	f24e 1300 	movw	r3, #57600	; 0xe100
20002b12:	f2ce 0300 	movt	r3, #57344	; 0xe000
20002b16:	f997 2007 	ldrsb.w	r2, [r7, #7]
20002b1a:	ea4f 1252 	mov.w	r2, r2, lsr #5
20002b1e:	79f9      	ldrb	r1, [r7, #7]
20002b20:	f001 011f 	and.w	r1, r1, #31
20002b24:	f04f 0001 	mov.w	r0, #1
20002b28:	fa00 f101 	lsl.w	r1, r0, r1
20002b2c:	f102 0260 	add.w	r2, r2, #96	; 0x60
20002b30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20002b34:	f107 070c 	add.w	r7, r7, #12
20002b38:	46bd      	mov	sp, r7
20002b3a:	bc80      	pop	{r7}
20002b3c:	4770      	bx	lr
20002b3e:	bf00      	nop

20002b40 <MSS_GPIO_init>:
/*-------------------------------------------------------------------------*//**
 * MSS_GPIO_init
 * See "mss_gpio.h" for details of how to use this function.
 */
void MSS_GPIO_init( void )
{
20002b40:	b580      	push	{r7, lr}
20002b42:	b082      	sub	sp, #8
20002b44:	af00      	add	r7, sp, #0
    uint32_t inc;
    
    /* reset MSS GPIO hardware */
    SYSREG->SOFT_RST_CR |= SYSREG_GPIO_SOFTRESET_MASK;
20002b46:	f248 0300 	movw	r3, #32768	; 0x8000
20002b4a:	f2c4 0303 	movt	r3, #16387	; 0x4003
20002b4e:	f248 0200 	movw	r2, #32768	; 0x8000
20002b52:	f2c4 0203 	movt	r2, #16387	; 0x4003
20002b56:	6c92      	ldr	r2, [r2, #72]	; 0x48
20002b58:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
20002b5c:	649a      	str	r2, [r3, #72]	; 0x48
    SYSREG->SOFT_RST_CR |= (SYSREG_GPIO_7_0_SOFTRESET_MASK |
20002b5e:	f248 0300 	movw	r3, #32768	; 0x8000
20002b62:	f2c4 0303 	movt	r3, #16387	; 0x4003
20002b66:	f248 0200 	movw	r2, #32768	; 0x8000
20002b6a:	f2c4 0203 	movt	r2, #16387	; 0x4003
20002b6e:	6c92      	ldr	r2, [r2, #72]	; 0x48
20002b70:	f042 72f0 	orr.w	r2, r2, #31457280	; 0x1e00000
20002b74:	649a      	str	r2, [r3, #72]	; 0x48
                            SYSREG_GPIO_15_8_SOFTRESET_MASK |
                            SYSREG_GPIO_23_16_SOFTRESET_MASK |
                            SYSREG_GPIO_31_24_SOFTRESET_MASK);
                            
    /* Clear any previously pended MSS GPIO interrupt */
    for(inc = 0U; inc < NB_OF_GPIO; ++inc)
20002b76:	f04f 0300 	mov.w	r3, #0
20002b7a:	607b      	str	r3, [r7, #4]
20002b7c:	e017      	b.n	20002bae <MSS_GPIO_init+0x6e>
    {
        NVIC_DisableIRQ(g_gpio_irqn_lut[inc]);
20002b7e:	687a      	ldr	r2, [r7, #4]
20002b80:	f243 1318 	movw	r3, #12568	; 0x3118
20002b84:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002b88:	5c9b      	ldrb	r3, [r3, r2]
20002b8a:	b25b      	sxtb	r3, r3
20002b8c:	4618      	mov	r0, r3
20002b8e:	f7ff ff9b 	bl	20002ac8 <NVIC_DisableIRQ>
        NVIC_ClearPendingIRQ(g_gpio_irqn_lut[inc]);
20002b92:	687a      	ldr	r2, [r7, #4]
20002b94:	f243 1318 	movw	r3, #12568	; 0x3118
20002b98:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002b9c:	5c9b      	ldrb	r3, [r3, r2]
20002b9e:	b25b      	sxtb	r3, r3
20002ba0:	4618      	mov	r0, r3
20002ba2:	f7ff ffaf 	bl	20002b04 <NVIC_ClearPendingIRQ>
                            SYSREG_GPIO_15_8_SOFTRESET_MASK |
                            SYSREG_GPIO_23_16_SOFTRESET_MASK |
                            SYSREG_GPIO_31_24_SOFTRESET_MASK);
                            
    /* Clear any previously pended MSS GPIO interrupt */
    for(inc = 0U; inc < NB_OF_GPIO; ++inc)
20002ba6:	687b      	ldr	r3, [r7, #4]
20002ba8:	f103 0301 	add.w	r3, r3, #1
20002bac:	607b      	str	r3, [r7, #4]
20002bae:	687b      	ldr	r3, [r7, #4]
20002bb0:	2b1f      	cmp	r3, #31
20002bb2:	d9e4      	bls.n	20002b7e <MSS_GPIO_init+0x3e>
    {
        NVIC_DisableIRQ(g_gpio_irqn_lut[inc]);
        NVIC_ClearPendingIRQ(g_gpio_irqn_lut[inc]);
    }
    /* Take MSS GPIO hardware out of reset. */
    SYSREG->SOFT_RST_CR &= ~(SYSREG_GPIO_7_0_SOFTRESET_MASK |
20002bb4:	f248 0300 	movw	r3, #32768	; 0x8000
20002bb8:	f2c4 0303 	movt	r3, #16387	; 0x4003
20002bbc:	f248 0200 	movw	r2, #32768	; 0x8000
20002bc0:	f2c4 0203 	movt	r2, #16387	; 0x4003
20002bc4:	6c92      	ldr	r2, [r2, #72]	; 0x48
20002bc6:	f022 72f0 	bic.w	r2, r2, #31457280	; 0x1e00000
20002bca:	649a      	str	r2, [r3, #72]	; 0x48
                             SYSREG_GPIO_15_8_SOFTRESET_MASK |
                             SYSREG_GPIO_23_16_SOFTRESET_MASK |
                             SYSREG_GPIO_31_24_SOFTRESET_MASK);
    SYSREG->SOFT_RST_CR &= ~SYSREG_GPIO_SOFTRESET_MASK;
20002bcc:	f248 0300 	movw	r3, #32768	; 0x8000
20002bd0:	f2c4 0303 	movt	r3, #16387	; 0x4003
20002bd4:	f248 0200 	movw	r2, #32768	; 0x8000
20002bd8:	f2c4 0203 	movt	r2, #16387	; 0x4003
20002bdc:	6c92      	ldr	r2, [r2, #72]	; 0x48
20002bde:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
20002be2:	649a      	str	r2, [r3, #72]	; 0x48
}
20002be4:	f107 0708 	add.w	r7, r7, #8
20002be8:	46bd      	mov	sp, r7
20002bea:	bd80      	pop	{r7, pc}

20002bec <MSS_GPIO_config>:
void MSS_GPIO_config
(
    mss_gpio_id_t port_id,
    uint32_t config
)
{
20002bec:	b480      	push	{r7}
20002bee:	b085      	sub	sp, #20
20002bf0:	af00      	add	r7, sp, #0
20002bf2:	4603      	mov	r3, r0
20002bf4:	6039      	str	r1, [r7, #0]
20002bf6:	71fb      	strb	r3, [r7, #7]
    uint32_t gpio_idx = (uint32_t)port_id;
20002bf8:	79fb      	ldrb	r3, [r7, #7]
20002bfa:	60fb      	str	r3, [r7, #12]
    
    ASSERT(gpio_idx < NB_OF_GPIO);
20002bfc:	68fb      	ldr	r3, [r7, #12]
20002bfe:	2b1f      	cmp	r3, #31
20002c00:	d900      	bls.n	20002c04 <MSS_GPIO_config+0x18>
20002c02:	be00      	bkpt	0x0000

    if(gpio_idx < NB_OF_GPIO)
20002c04:	68fb      	ldr	r3, [r7, #12]
20002c06:	2b1f      	cmp	r3, #31
20002c08:	d808      	bhi.n	20002c1c <MSS_GPIO_config+0x30>
    {
        *(g_config_reg_lut[gpio_idx]) = config;
20002c0a:	68fa      	ldr	r2, [r7, #12]
20002c0c:	f243 0398 	movw	r3, #12440	; 0x3098
20002c10:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002c14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
20002c18:	683a      	ldr	r2, [r7, #0]
20002c1a:	601a      	str	r2, [r3, #0]
    }
}
20002c1c:	f107 0714 	add.w	r7, r7, #20
20002c20:	46bd      	mov	sp, r7
20002c22:	bc80      	pop	{r7}
20002c24:	4770      	bx	lr
20002c26:	bf00      	nop

20002c28 <MSS_GPIO_set_output>:
void MSS_GPIO_set_output
(
    mss_gpio_id_t port_id,
    uint8_t value
)
{
20002c28:	b480      	push	{r7}
20002c2a:	b085      	sub	sp, #20
20002c2c:	af00      	add	r7, sp, #0
20002c2e:	4602      	mov	r2, r0
20002c30:	460b      	mov	r3, r1
20002c32:	71fa      	strb	r2, [r7, #7]
20002c34:	71bb      	strb	r3, [r7, #6]
    uint32_t gpio_setting;
    uint32_t gpio_idx = (uint32_t)port_id;
20002c36:	79fb      	ldrb	r3, [r7, #7]
20002c38:	60fb      	str	r3, [r7, #12]
    
    ASSERT(gpio_idx < NB_OF_GPIO);
20002c3a:	68fb      	ldr	r3, [r7, #12]
20002c3c:	2b1f      	cmp	r3, #31
20002c3e:	d900      	bls.n	20002c42 <MSS_GPIO_set_output+0x1a>
20002c40:	be00      	bkpt	0x0000
    
    if(gpio_idx < NB_OF_GPIO)
20002c42:	68fb      	ldr	r3, [r7, #12]
20002c44:	2b1f      	cmp	r3, #31
20002c46:	d822      	bhi.n	20002c8e <MSS_GPIO_set_output+0x66>
    {
        gpio_setting = GPIO->GPIO_OUT;
20002c48:	f243 0300 	movw	r3, #12288	; 0x3000
20002c4c:	f2c4 0301 	movt	r3, #16385	; 0x4001
20002c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
20002c54:	60bb      	str	r3, [r7, #8]
        gpio_setting &= ~((uint32_t)0x01u << gpio_idx);
20002c56:	68fb      	ldr	r3, [r7, #12]
20002c58:	f04f 0201 	mov.w	r2, #1
20002c5c:	fa02 f303 	lsl.w	r3, r2, r3
20002c60:	ea6f 0303 	mvn.w	r3, r3
20002c64:	68ba      	ldr	r2, [r7, #8]
20002c66:	ea02 0303 	and.w	r3, r2, r3
20002c6a:	60bb      	str	r3, [r7, #8]
        gpio_setting |= ((uint32_t)value & 0x01u) << gpio_idx;
20002c6c:	79bb      	ldrb	r3, [r7, #6]
20002c6e:	f003 0201 	and.w	r2, r3, #1
20002c72:	68fb      	ldr	r3, [r7, #12]
20002c74:	fa02 f303 	lsl.w	r3, r2, r3
20002c78:	68ba      	ldr	r2, [r7, #8]
20002c7a:	ea42 0303 	orr.w	r3, r2, r3
20002c7e:	60bb      	str	r3, [r7, #8]
        GPIO->GPIO_OUT = gpio_setting;
20002c80:	f243 0300 	movw	r3, #12288	; 0x3000
20002c84:	f2c4 0301 	movt	r3, #16385	; 0x4001
20002c88:	68ba      	ldr	r2, [r7, #8]
20002c8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }
}
20002c8e:	f107 0714 	add.w	r7, r7, #20
20002c92:	46bd      	mov	sp, r7
20002c94:	bc80      	pop	{r7}
20002c96:	4770      	bx	lr

20002c98 <SystemInit>:

/***************************************************************************//**
 * See system_m2sxxx.h for details.
 */
void SystemInit(void)
{
20002c98:	b580      	push	{r7, lr}
20002c9a:	af00      	add	r7, sp, #0
     */
#if (MSS_SYS_FACC_INIT_BY_CORTEX == 1)
    complete_clock_config();
#endif

    silicon_workarounds();
20002c9c:	f000 f936 	bl	20002f0c <silicon_workarounds>
    /*--------------------------------------------------------------------------
     * Set STKALIGN to ensure exception stacking starts on 8 bytes address
     * boundary. This ensures compliance with the "Procedure Call Standards for
     * the ARM Architecture" (AAPCS).
     */
    SCB->CCR |= SCB_CCR_STKALIGN_Msk;
20002ca0:	f64e 5300 	movw	r3, #60672	; 0xed00
20002ca4:	f2ce 0300 	movt	r3, #57344	; 0xe000
20002ca8:	f64e 5200 	movw	r2, #60672	; 0xed00
20002cac:	f2ce 0200 	movt	r2, #57344	; 0xe000
20002cb0:	6952      	ldr	r2, [r2, #20]
20002cb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
20002cb6:	615a      	str	r2, [r3, #20]
#endif

    /*--------------------------------------------------------------------------
     * Call user defined configuration function.
     */
    mscc_post_hw_cfg_init();
20002cb8:	f7fd fbbc 	bl	20000434 <mscc_post_hw_cfg_init>
    do
    {
        init_done = CORE_SF2_CFG->INIT_DONE & INIT_DONE_MASK;
    } while (0u == init_done);
#endif
}
20002cbc:	bd80      	pop	{r7, pc}
20002cbe:	bf00      	nop

20002cc0 <SystemCoreClockUpdate>:
#define FREQ_1MHZ    1000000u
#define FREQ_25MHZ   25000000u
#define FREQ_50MHZ   50000000u

void SystemCoreClockUpdate(void)
{
20002cc0:	b580      	push	{r7, lr}
20002cc2:	b088      	sub	sp, #32
20002cc4:	af00      	add	r7, sp, #0
    uint32_t controller_pll_init;
    uint32_t clk_src;

    controller_pll_init = SYSREG->MSSDDR_FACC1_CR & CONTROLLER_PLL_INIT_MASK;
20002cc6:	f248 0300 	movw	r3, #32768	; 0x8000
20002cca:	f2c4 0303 	movt	r3, #16387	; 0x4003
20002cce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
20002cd2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
20002cd6:	60fb      	str	r3, [r7, #12]

    if(0u == controller_pll_init)
20002cd8:	68fb      	ldr	r3, [r7, #12]
20002cda:	2b00      	cmp	r3, #0
20002cdc:	f040 808b 	bne.w	20002df6 <SystemCoreClockUpdate+0x136>
    {
        /* Normal operations. */
        uint32_t global_mux_sel;

        global_mux_sel = SYSREG->MSSDDR_FACC1_CR & FACC_GLMUX_SEL_MASK;
20002ce0:	f248 0300 	movw	r3, #32768	; 0x8000
20002ce4:	f2c4 0303 	movt	r3, #16387	; 0x4003
20002ce8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
20002cec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
20002cf0:	617b      	str	r3, [r7, #20]
        if(0u == global_mux_sel)
20002cf2:	697b      	ldr	r3, [r7, #20]
20002cf4:	2b00      	cmp	r3, #0
20002cf6:	d13f      	bne.n	20002d78 <SystemCoreClockUpdate+0xb8>
        {
            /* MSS clocked from MSS PLL. Use Libero flow defines. */
            SystemCoreClock = MSS_SYS_M3_CLK_FREQ;
20002cf8:	f243 1378 	movw	r3, #12664	; 0x3178
20002cfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002d00:	f24e 1200 	movw	r2, #57600	; 0xe100
20002d04:	f2c0 52f5 	movt	r2, #1525	; 0x5f5
20002d08:	601a      	str	r2, [r3, #0]
            g_FrequencyPCLK0 = MSS_SYS_APB_0_CLK_FREQ;
20002d0a:	f243 137c 	movw	r3, #12668	; 0x317c
20002d0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002d12:	f24e 1200 	movw	r2, #57600	; 0xe100
20002d16:	f2c0 52f5 	movt	r2, #1525	; 0x5f5
20002d1a:	601a      	str	r2, [r3, #0]
            g_FrequencyPCLK1 = MSS_SYS_APB_1_CLK_FREQ;
20002d1c:	f243 1380 	movw	r3, #12672	; 0x3180
20002d20:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002d24:	f24e 1200 	movw	r2, #57600	; 0xe100
20002d28:	f2c0 52f5 	movt	r2, #1525	; 0x5f5
20002d2c:	601a      	str	r2, [r3, #0]
            g_FrequencyPCLK2 = MSS_SYS_APB_2_CLK_FREQ;
20002d2e:	f243 1384 	movw	r3, #12676	; 0x3184
20002d32:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002d36:	f647 0240 	movw	r2, #30784	; 0x7840
20002d3a:	f2c0 127d 	movt	r2, #381	; 0x17d
20002d3e:	601a      	str	r2, [r3, #0]
            g_FrequencyFIC0 = MSS_SYS_FIC_0_CLK_FREQ;
20002d40:	f243 1388 	movw	r3, #12680	; 0x3188
20002d44:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002d48:	f24e 1200 	movw	r2, #57600	; 0xe100
20002d4c:	f2c0 52f5 	movt	r2, #1525	; 0x5f5
20002d50:	601a      	str	r2, [r3, #0]
            g_FrequencyFIC1 = MSS_SYS_FIC_1_CLK_FREQ;
20002d52:	f243 138c 	movw	r3, #12684	; 0x318c
20002d56:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002d5a:	f24e 1200 	movw	r2, #57600	; 0xe100
20002d5e:	f2c0 52f5 	movt	r2, #1525	; 0x5f5
20002d62:	601a      	str	r2, [r3, #0]
            g_FrequencyFIC64 = MSS_SYS_FIC64_CLK_FREQ;
20002d64:	f243 1390 	movw	r3, #12688	; 0x3190
20002d68:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002d6c:	f24e 1200 	movw	r2, #57600	; 0xe100
20002d70:	f2c0 52f5 	movt	r2, #1525	; 0x5f5
20002d74:	601a      	str	r2, [r3, #0]
                break;

                case CCC2ASCI_CLK_SRC:
                    /* Fall through. */
                default:
                    set_clock_frequency_globals(FREQ_1MHZ);
20002d76:	e045      	b.n	20002e04 <SystemCoreClockUpdate+0x144>
                                                   RCOSC_25_50MHZ_CLK_SRC,
                                                   CLK_XTAL_CLK_SRC,
                                                   RCOSC_1_MHZ_CLK_SRC,
                                                   RCOSC_1_MHZ_CLK_SRC,
                                                   CCC2ASCI_CLK_SRC,
                                                   CCC2ASCI_CLK_SRC };
20002d78:	f243 1338 	movw	r3, #12600	; 0x3138
20002d7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002d80:	f107 0204 	add.w	r2, r7, #4
20002d84:	e893 0003 	ldmia.w	r3, {r0, r1}
20002d88:	e882 0003 	stmia.w	r2, {r0, r1}

            uint32_t standby_sel;
            uint8_t clock_source;

            standby_sel = (SYSREG->MSSDDR_FACC2_CR >> FACC_STANDBY_SHIFT) & FACC_STANDBY_SEL_MASK;
20002d8c:	f248 0300 	movw	r3, #32768	; 0x8000
20002d90:	f2c4 0303 	movt	r3, #16387	; 0x4003
20002d94:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
20002d98:	ea4f 1393 	mov.w	r3, r3, lsr #6
20002d9c:	f003 0307 	and.w	r3, r3, #7
20002da0:	61bb      	str	r3, [r7, #24]
            clock_source = standby_clock_lut[standby_sel];
20002da2:	69bb      	ldr	r3, [r7, #24]
20002da4:	f107 0220 	add.w	r2, r7, #32
20002da8:	4413      	add	r3, r2
20002daa:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
20002dae:	77fb      	strb	r3, [r7, #31]
            switch(clock_source)
20002db0:	7ffb      	ldrb	r3, [r7, #31]
20002db2:	2b01      	cmp	r3, #1
20002db4:	d00b      	beq.n	20002dce <SystemCoreClockUpdate+0x10e>
20002db6:	2b02      	cmp	r3, #2
20002db8:	d00e      	beq.n	20002dd8 <SystemCoreClockUpdate+0x118>
20002dba:	2b00      	cmp	r3, #0
20002dbc:	d114      	bne.n	20002de8 <SystemCoreClockUpdate+0x128>
            {
                case RCOSC_25_50MHZ_CLK_SRC:
                    clk_src = get_rcosc_25_50mhz_frequency();
20002dbe:	f000 f825 	bl	20002e0c <get_rcosc_25_50mhz_frequency>
20002dc2:	4603      	mov	r3, r0
20002dc4:	613b      	str	r3, [r7, #16]
                    set_clock_frequency_globals(clk_src);
20002dc6:	6938      	ldr	r0, [r7, #16]
20002dc8:	f000 f842 	bl	20002e50 <set_clock_frequency_globals>
                break;
20002dcc:	e01a      	b.n	20002e04 <SystemCoreClockUpdate+0x144>

                case CLK_XTAL_CLK_SRC:
                    set_clock_frequency_globals(FREQ_32KHZ);
20002dce:	f44f 4000 	mov.w	r0, #32768	; 0x8000
20002dd2:	f000 f83d 	bl	20002e50 <set_clock_frequency_globals>
                break;
20002dd6:	e015      	b.n	20002e04 <SystemCoreClockUpdate+0x144>

                case RCOSC_1_MHZ_CLK_SRC:
                    set_clock_frequency_globals(FREQ_1MHZ);
20002dd8:	f244 2040 	movw	r0, #16960	; 0x4240
20002ddc:	f2c0 000f 	movt	r0, #15
20002de0:	f000 f836 	bl	20002e50 <set_clock_frequency_globals>
                break;
20002de4:	bf00      	nop
20002de6:	e00d      	b.n	20002e04 <SystemCoreClockUpdate+0x144>

                case CCC2ASCI_CLK_SRC:
                    /* Fall through. */
                default:
                    set_clock_frequency_globals(FREQ_1MHZ);
20002de8:	f244 2040 	movw	r0, #16960	; 0x4240
20002dec:	f2c0 000f 	movt	r0, #15
20002df0:	f000 f82e 	bl	20002e50 <set_clock_frequency_globals>
20002df4:	e006      	b.n	20002e04 <SystemCoreClockUpdate+0x144>
        }
    }
    else
    {
        /* PLL initialization mode. Running from 25/50MHZ RC oscillator. */
        clk_src = get_rcosc_25_50mhz_frequency();
20002df6:	f000 f809 	bl	20002e0c <get_rcosc_25_50mhz_frequency>
20002dfa:	4603      	mov	r3, r0
20002dfc:	613b      	str	r3, [r7, #16]
        set_clock_frequency_globals(clk_src);
20002dfe:	6938      	ldr	r0, [r7, #16]
20002e00:	f000 f826 	bl	20002e50 <set_clock_frequency_globals>
    }
}
20002e04:	f107 0720 	add.w	r7, r7, #32
20002e08:	46bd      	mov	sp, r7
20002e0a:	bd80      	pop	{r7, pc}

20002e0c <get_rcosc_25_50mhz_frequency>:

/***************************************************************************//**
 * Find out frequency generated by the 25_50mhz RC osciallator.
 */
static uint32_t get_rcosc_25_50mhz_frequency(void)
{
20002e0c:	b480      	push	{r7}
20002e0e:	b083      	sub	sp, #12
20002e10:	af00      	add	r7, sp, #0
    uint32_t rcosc_div2;
    uint32_t rcosc_frequency;

    rcosc_div2 = SYSREG->MSSDDR_PLL_STATUS & RCOSC_DIV2_MASK;
20002e12:	f248 0300 	movw	r3, #32768	; 0x8000
20002e16:	f2c4 0303 	movt	r3, #16387	; 0x4003
20002e1a:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
20002e1e:	f003 0304 	and.w	r3, r3, #4
20002e22:	603b      	str	r3, [r7, #0]
    if(0u == rcosc_div2)
20002e24:	683b      	ldr	r3, [r7, #0]
20002e26:	2b00      	cmp	r3, #0
20002e28:	d105      	bne.n	20002e36 <get_rcosc_25_50mhz_frequency+0x2a>
    {
        /* 25_50mhz oscillator is configured for 25 MHz operations. */
        rcosc_frequency = FREQ_25MHZ;
20002e2a:	f647 0340 	movw	r3, #30784	; 0x7840
20002e2e:	f2c0 137d 	movt	r3, #381	; 0x17d
20002e32:	607b      	str	r3, [r7, #4]
20002e34:	e004      	b.n	20002e40 <get_rcosc_25_50mhz_frequency+0x34>
    }
    else
    {
        /* 25_50mhz oscillator is configured for 50 MHz operations. */
        rcosc_frequency = FREQ_50MHZ;
20002e36:	f24f 0380 	movw	r3, #61568	; 0xf080
20002e3a:	f2c0 23fa 	movt	r3, #762	; 0x2fa
20002e3e:	607b      	str	r3, [r7, #4]
    }

    return rcosc_frequency;
20002e40:	687b      	ldr	r3, [r7, #4]
}
20002e42:	4618      	mov	r0, r3
20002e44:	f107 070c 	add.w	r7, r7, #12
20002e48:	46bd      	mov	sp, r7
20002e4a:	bc80      	pop	{r7}
20002e4c:	4770      	bx	lr
20002e4e:	bf00      	nop

20002e50 <set_clock_frequency_globals>:
        - g_FrequencyFIC0
        - g_FrequencyFIC1
        - g_FrequencyFIC64
 */
static void set_clock_frequency_globals(uint32_t standby_clk)
{
20002e50:	b480      	push	{r7}
20002e52:	b083      	sub	sp, #12
20002e54:	af00      	add	r7, sp, #0
20002e56:	6078      	str	r0, [r7, #4]
    SystemCoreClock = standby_clk;
20002e58:	f243 1378 	movw	r3, #12664	; 0x3178
20002e5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002e60:	687a      	ldr	r2, [r7, #4]
20002e62:	601a      	str	r2, [r3, #0]
    g_FrequencyPCLK0 = standby_clk;
20002e64:	f243 137c 	movw	r3, #12668	; 0x317c
20002e68:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002e6c:	687a      	ldr	r2, [r7, #4]
20002e6e:	601a      	str	r2, [r3, #0]
    g_FrequencyPCLK1 = standby_clk;
20002e70:	f243 1380 	movw	r3, #12672	; 0x3180
20002e74:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002e78:	687a      	ldr	r2, [r7, #4]
20002e7a:	601a      	str	r2, [r3, #0]
    g_FrequencyPCLK2 = MSS_SYS_APB_2_CLK_FREQ;
20002e7c:	f243 1384 	movw	r3, #12676	; 0x3184
20002e80:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002e84:	f647 0240 	movw	r2, #30784	; 0x7840
20002e88:	f2c0 127d 	movt	r2, #381	; 0x17d
20002e8c:	601a      	str	r2, [r3, #0]
    g_FrequencyFIC0 = standby_clk;
20002e8e:	f243 1388 	movw	r3, #12680	; 0x3188
20002e92:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002e96:	687a      	ldr	r2, [r7, #4]
20002e98:	601a      	str	r2, [r3, #0]
    g_FrequencyFIC1 = standby_clk;
20002e9a:	f243 138c 	movw	r3, #12684	; 0x318c
20002e9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002ea2:	687a      	ldr	r2, [r7, #4]
20002ea4:	601a      	str	r2, [r3, #0]
    g_FrequencyFIC64 = standby_clk;
20002ea6:	f243 1390 	movw	r3, #12688	; 0x3190
20002eaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002eae:	687a      	ldr	r2, [r7, #4]
20002eb0:	601a      	str	r2, [r3, #0]
}
20002eb2:	f107 070c 	add.w	r7, r7, #12
20002eb6:	46bd      	mov	sp, r7
20002eb8:	bc80      	pop	{r7}
20002eba:	4770      	bx	lr

20002ebc <get_silicon_revision>:

/*------------------------------------------------------------------------------
  Retrieve silicon revision from system registers.
 */
static uint32_t get_silicon_revision(void)
{
20002ebc:	b480      	push	{r7}
20002ebe:	b083      	sub	sp, #12
20002ec0:	af00      	add	r7, sp, #0
    uint32_t silicon_revision;
    uint32_t device_version;

    device_version = SYSREG->DEVICE_VERSION;
20002ec2:	f248 0300 	movw	r3, #32768	; 0x8000
20002ec6:	f2c4 0303 	movt	r3, #16387	; 0x4003
20002eca:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
20002ece:	607b      	str	r3, [r7, #4]
    switch(device_version)
20002ed0:	687a      	ldr	r2, [r7, #4]
20002ed2:	f64f 0302 	movw	r3, #63490	; 0xf802
20002ed6:	429a      	cmp	r2, r3
20002ed8:	d006      	beq.n	20002ee8 <get_silicon_revision+0x2c>
20002eda:	f64f 0302 	movw	r3, #63490	; 0xf802
20002ede:	f2c0 0301 	movt	r3, #1
20002ee2:	429a      	cmp	r2, r3
20002ee4:	d004      	beq.n	20002ef0 <get_silicon_revision+0x34>
20002ee6:	e007      	b.n	20002ef8 <get_silicon_revision+0x3c>
    {
        case 0x0000F802:
            silicon_revision = M2S050_REV_A_SILICON;
20002ee8:	f04f 0301 	mov.w	r3, #1
20002eec:	603b      	str	r3, [r7, #0]
            break;
20002eee:	e006      	b.n	20002efe <get_silicon_revision+0x42>

        case 0x0001F802:
            silicon_revision = M2S050_REV_B_SILICON;
20002ef0:	f04f 0302 	mov.w	r3, #2
20002ef4:	603b      	str	r3, [r7, #0]
            break;
20002ef6:	e002      	b.n	20002efe <get_silicon_revision+0x42>

        default:
            silicon_revision = UNKNOWN_SILICON_REV;
20002ef8:	f04f 0300 	mov.w	r3, #0
20002efc:	603b      	str	r3, [r7, #0]
            break;
    }

    return silicon_revision;
20002efe:	683b      	ldr	r3, [r7, #0]
}
20002f00:	4618      	mov	r0, r3
20002f02:	f107 070c 	add.w	r7, r7, #12
20002f06:	46bd      	mov	sp, r7
20002f08:	bc80      	pop	{r7}
20002f0a:	4770      	bx	lr

20002f0c <silicon_workarounds>:

/*------------------------------------------------------------------------------
  Workarounds for various silicon versions.
 */
static void silicon_workarounds(void)
{
20002f0c:	b580      	push	{r7, lr}
20002f0e:	b082      	sub	sp, #8
20002f10:	af00      	add	r7, sp, #0
    uint32_t silicon_revision;

    silicon_revision = get_silicon_revision();
20002f12:	f7ff ffd3 	bl	20002ebc <get_silicon_revision>
20002f16:	4603      	mov	r3, r0
20002f18:	607b      	str	r3, [r7, #4]

    switch(silicon_revision)
20002f1a:	687b      	ldr	r3, [r7, #4]
20002f1c:	2b01      	cmp	r3, #1
20002f1e:	d101      	bne.n	20002f24 <silicon_workarounds+0x18>
    {
        case M2S050_REV_A_SILICON:
            m2s050_rev_a_workarounds();
20002f20:	f000 f804 	bl	20002f2c <m2s050_rev_a_workarounds>
        case UNKNOWN_SILICON_REV:
            /* Fall through. */
        default:
            break;
    }
}
20002f24:	f107 0708 	add.w	r7, r7, #8
20002f28:	46bd      	mov	sp, r7
20002f2a:	bd80      	pop	{r7, pc}

20002f2c <m2s050_rev_a_workarounds>:

/*------------------------------------------------------------------------------
  Silicon workarounds for M2S050 rev A.
 */
static void m2s050_rev_a_workarounds(void)
{
20002f2c:	b480      	push	{r7}
20002f2e:	af00      	add	r7, sp, #0
    /*--------------------------------------------------------------------------
     * Work around a couple of silicon issues:
     */
    /* DDR_CLK_EN <- 1 */
    SYSREG->MSSDDR_FACC1_CR |= (uint32_t)1 << DDR_CLK_EN_SHIFT;
20002f30:	f248 0300 	movw	r3, #32768	; 0x8000
20002f34:	f2c4 0303 	movt	r3, #16387	; 0x4003
20002f38:	f248 0200 	movw	r2, #32768	; 0x8000
20002f3c:	f2c4 0203 	movt	r2, #16387	; 0x4003
20002f40:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
20002f44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
20002f48:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

    /* CONTROLLER_PLL_INIT <- 0 */
    SYSREG->MSSDDR_FACC1_CR = SYSREG->MSSDDR_FACC1_CR & ~CONTROLLER_PLL_INIT_MASK;
20002f4c:	f248 0300 	movw	r3, #32768	; 0x8000
20002f50:	f2c4 0303 	movt	r3, #16387	; 0x4003
20002f54:	f248 0200 	movw	r2, #32768	; 0x8000
20002f58:	f2c4 0203 	movt	r2, #16387	; 0x4003
20002f5c:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
20002f60:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
20002f64:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
}
20002f68:	46bd      	mov	sp, r7
20002f6a:	bc80      	pop	{r7}
20002f6c:	4770      	bx	lr
20002f6e:	bf00      	nop

20002f70 <__libc_init_array>:
20002f70:	b570      	push	{r4, r5, r6, lr}
20002f72:	f243 1658 	movw	r6, #12632	; 0x3158
20002f76:	f243 1558 	movw	r5, #12632	; 0x3158
20002f7a:	f2c2 0600 	movt	r6, #8192	; 0x2000
20002f7e:	f2c2 0500 	movt	r5, #8192	; 0x2000
20002f82:	1b76      	subs	r6, r6, r5
20002f84:	10b6      	asrs	r6, r6, #2
20002f86:	d006      	beq.n	20002f96 <__libc_init_array+0x26>
20002f88:	2400      	movs	r4, #0
20002f8a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
20002f8e:	3401      	adds	r4, #1
20002f90:	4798      	blx	r3
20002f92:	42a6      	cmp	r6, r4
20002f94:	d8f9      	bhi.n	20002f8a <__libc_init_array+0x1a>
20002f96:	f243 1558 	movw	r5, #12632	; 0x3158
20002f9a:	f243 165c 	movw	r6, #12636	; 0x315c
20002f9e:	f2c2 0500 	movt	r5, #8192	; 0x2000
20002fa2:	f2c2 0600 	movt	r6, #8192	; 0x2000
20002fa6:	1b76      	subs	r6, r6, r5
20002fa8:	f000 f8ca 	bl	20003140 <_init>
20002fac:	10b6      	asrs	r6, r6, #2
20002fae:	d006      	beq.n	20002fbe <__libc_init_array+0x4e>
20002fb0:	2400      	movs	r4, #0
20002fb2:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
20002fb6:	3401      	adds	r4, #1
20002fb8:	4798      	blx	r3
20002fba:	42a6      	cmp	r6, r4
20002fbc:	d8f9      	bhi.n	20002fb2 <__libc_init_array+0x42>
20002fbe:	bd70      	pop	{r4, r5, r6, pc}

20002fc0 <memset>:
20002fc0:	2a03      	cmp	r2, #3
20002fc2:	b2c9      	uxtb	r1, r1
20002fc4:	b430      	push	{r4, r5}
20002fc6:	d807      	bhi.n	20002fd8 <memset+0x18>
20002fc8:	b122      	cbz	r2, 20002fd4 <memset+0x14>
20002fca:	2300      	movs	r3, #0
20002fcc:	54c1      	strb	r1, [r0, r3]
20002fce:	3301      	adds	r3, #1
20002fd0:	4293      	cmp	r3, r2
20002fd2:	d1fb      	bne.n	20002fcc <memset+0xc>
20002fd4:	bc30      	pop	{r4, r5}
20002fd6:	4770      	bx	lr
20002fd8:	eb00 0c02 	add.w	ip, r0, r2
20002fdc:	4603      	mov	r3, r0
20002fde:	e001      	b.n	20002fe4 <memset+0x24>
20002fe0:	f803 1c01 	strb.w	r1, [r3, #-1]
20002fe4:	f003 0403 	and.w	r4, r3, #3
20002fe8:	461a      	mov	r2, r3
20002fea:	3301      	adds	r3, #1
20002fec:	2c00      	cmp	r4, #0
20002fee:	d1f7      	bne.n	20002fe0 <memset+0x20>
20002ff0:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
20002ff4:	ebc2 040c 	rsb	r4, r2, ip
20002ff8:	fb03 f301 	mul.w	r3, r3, r1
20002ffc:	e01f      	b.n	2000303e <memset+0x7e>
20002ffe:	f842 3c40 	str.w	r3, [r2, #-64]
20003002:	f842 3c3c 	str.w	r3, [r2, #-60]
20003006:	f842 3c38 	str.w	r3, [r2, #-56]
2000300a:	f842 3c34 	str.w	r3, [r2, #-52]
2000300e:	f842 3c30 	str.w	r3, [r2, #-48]
20003012:	f842 3c2c 	str.w	r3, [r2, #-44]
20003016:	f842 3c28 	str.w	r3, [r2, #-40]
2000301a:	f842 3c24 	str.w	r3, [r2, #-36]
2000301e:	f842 3c20 	str.w	r3, [r2, #-32]
20003022:	f842 3c1c 	str.w	r3, [r2, #-28]
20003026:	f842 3c18 	str.w	r3, [r2, #-24]
2000302a:	f842 3c14 	str.w	r3, [r2, #-20]
2000302e:	f842 3c10 	str.w	r3, [r2, #-16]
20003032:	f842 3c0c 	str.w	r3, [r2, #-12]
20003036:	f842 3c08 	str.w	r3, [r2, #-8]
2000303a:	f842 3c04 	str.w	r3, [r2, #-4]
2000303e:	4615      	mov	r5, r2
20003040:	3240      	adds	r2, #64	; 0x40
20003042:	2c3f      	cmp	r4, #63	; 0x3f
20003044:	f1a4 0440 	sub.w	r4, r4, #64	; 0x40
20003048:	dcd9      	bgt.n	20002ffe <memset+0x3e>
2000304a:	462a      	mov	r2, r5
2000304c:	ebc5 040c 	rsb	r4, r5, ip
20003050:	e007      	b.n	20003062 <memset+0xa2>
20003052:	f842 3c10 	str.w	r3, [r2, #-16]
20003056:	f842 3c0c 	str.w	r3, [r2, #-12]
2000305a:	f842 3c08 	str.w	r3, [r2, #-8]
2000305e:	f842 3c04 	str.w	r3, [r2, #-4]
20003062:	4615      	mov	r5, r2
20003064:	3210      	adds	r2, #16
20003066:	2c0f      	cmp	r4, #15
20003068:	f1a4 0410 	sub.w	r4, r4, #16
2000306c:	dcf1      	bgt.n	20003052 <memset+0x92>
2000306e:	462a      	mov	r2, r5
20003070:	ebc5 050c 	rsb	r5, r5, ip
20003074:	e001      	b.n	2000307a <memset+0xba>
20003076:	f842 3c04 	str.w	r3, [r2, #-4]
2000307a:	4614      	mov	r4, r2
2000307c:	3204      	adds	r2, #4
2000307e:	2d03      	cmp	r5, #3
20003080:	f1a5 0504 	sub.w	r5, r5, #4
20003084:	dcf7      	bgt.n	20003076 <memset+0xb6>
20003086:	e001      	b.n	2000308c <memset+0xcc>
20003088:	f804 1b01 	strb.w	r1, [r4], #1
2000308c:	4564      	cmp	r4, ip
2000308e:	d3fb      	bcc.n	20003088 <memset+0xc8>
20003090:	e7a0      	b.n	20002fd4 <memset+0x14>
20003092:	bf00      	nop

20003094 <gp_my_uart>:
20003094:	31e4 2000                                   .1. 

20003098 <g_config_reg_lut>:
20003098:	3000 4001 3004 4001 3008 4001 300c 4001     .0.@.0.@.0.@.0.@
200030a8:	3010 4001 3014 4001 3018 4001 301c 4001     .0.@.0.@.0.@.0.@
200030b8:	3020 4001 3024 4001 3028 4001 302c 4001      0.@$0.@(0.@,0.@
200030c8:	3030 4001 3034 4001 3038 4001 303c 4001     00.@40.@80.@<0.@
200030d8:	3040 4001 3044 4001 3048 4001 304c 4001     @0.@D0.@H0.@L0.@
200030e8:	3050 4001 3054 4001 3058 4001 305c 4001     P0.@T0.@X0.@\0.@
200030f8:	3060 4001 3064 4001 3068 4001 306c 4001     `0.@d0.@h0.@l0.@
20003108:	3070 4001 3074 4001 3078 4001 307c 4001     p0.@t0.@x0.@|0.@

20003118 <g_gpio_irqn_lut>:
20003118:	3332 3534 3736 3938 3b3a 3d3c 3f3e 4140     23456789:;<=>?@A
20003128:	4342 4544 4746 4948 4b4a 4d4c 4f4e 5150     BCDEFGHIJKLMNOPQ

20003138 <C.18.3527>:
20003138:	0100 0100 0202 0303                         ........

20003140 <_init>:
20003140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20003142:	bf00      	nop
20003144:	bcf8      	pop	{r3, r4, r5, r6, r7}
20003146:	bc08      	pop	{r3}
20003148:	469e      	mov	lr, r3
2000314a:	4770      	bx	lr

2000314c <_fini>:
2000314c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000314e:	bf00      	nop
20003150:	bcf8      	pop	{r3, r4, r5, r6, r7}
20003152:	bc08      	pop	{r3}
20003154:	469e      	mov	lr, r3
20003156:	4770      	bx	lr

20003158 <__frame_dummy_init_array_entry>:
20003158:	04d5 2000                                   ... 

2000315c <__do_global_dtors_aux_fini_array_entry>:
2000315c:	04c1 2000                                   ... 
